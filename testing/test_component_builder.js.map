{"version":3,"file":"test_component_builder.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/test_component_builder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryMetadata, ChangeDetectorRef, ComponentFactory, ComponentRef, ComponentResolver, DebugElement, ElementRef, Injectable, Injector, NgZone, NgZoneError, OpaqueToken, ViewMetadata, getDebugNode} from '@angular/core';\nimport {ComponentFixture, tick} from '@angular/core/testing';\n\nimport {DirectiveResolver, ViewResolver} from '../index';\nimport {ObservableWrapper, PromiseCompleter, PromiseWrapper} from '../src/facade/async';\nimport {ListWrapper, MapWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {IS_DART, Type, isBlank, isPresent, scheduleMicroTask} from '../src/facade/lang';\n\n/**\n *  @deprecated\n *  Import ComponentFixture from @angular/core/testing instead.\n */\nexport {ComponentFixture} from '@angular/core/testing';\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\nexport var ComponentFixtureAutoDetect = new OpaqueToken('ComponentFixtureAutoDetect');\nexport var ComponentFixtureNoNgZone = new OpaqueToken('ComponentFixtureNoNgZone');\n\nvar _nextRootElementId = 0;\nexport class TestComponentBuilder {\n  /** @internal */\n  _bindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _directiveOverrides = new Map<Type, Map<Type, Type>>();\n  /** @internal */\n  _templateOverrides = new Map<Type, string>();\n  /** @internal */\n  _animationOverrides = new Map<Type, AnimationEntryMetadata[]>();\n  /** @internal */\n  _viewBindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _viewOverrides = new Map<Type, ViewMetadata>();\n\n\n  constructor(private _injector: Injector) {}\n\n  /** @internal */\n  _clone(): TestComponentBuilder {\n    let clone = new TestComponentBuilder(this._injector);\n    clone._viewOverrides = MapWrapper.clone(this._viewOverrides);\n    clone._directiveOverrides = MapWrapper.clone(this._directiveOverrides);\n    clone._templateOverrides = MapWrapper.clone(this._templateOverrides);\n    clone._bindingsOverrides = MapWrapper.clone(this._bindingsOverrides);\n    clone._viewBindingsOverrides = MapWrapper.clone(this._viewBindingsOverrides);\n    return clone;\n  }\n\n  /**\n   * Overrides only the html of a {@link ComponentMetadata}.\n   * All the other properties of the component's {@link ViewMetadata} are preserved.\n   */\n  overrideTemplate(componentType: Type, template: string): TestComponentBuilder {\n    let clone = this._clone();\n    clone._templateOverrides.set(componentType, template);\n    return clone;\n  }\n\n  overrideAnimations(componentType: Type, animations: AnimationEntryMetadata[]):\n      TestComponentBuilder {\n    var clone = this._clone();\n    clone._animationOverrides.set(componentType, animations);\n    return clone;\n  }\n\n  /**\n   * Overrides a component's {@link ViewMetadata}.\n   */\n  overrideView(componentType: Type, view: ViewMetadata): TestComponentBuilder {\n    let clone = this._clone();\n    clone._viewOverrides.set(componentType, view);\n    return clone;\n  }\n\n  /**\n   * Overrides the directives from the component {@link ViewMetadata}.\n   */\n  overrideDirective(componentType: Type, from: Type, to: Type): TestComponentBuilder {\n    let clone = this._clone();\n    let overridesForComponent = clone._directiveOverrides.get(componentType);\n    if (!isPresent(overridesForComponent)) {\n      clone._directiveOverrides.set(componentType, new Map<Type, Type>());\n      overridesForComponent = clone._directiveOverrides.get(componentType);\n    }\n    overridesForComponent.set(from, to);\n    return clone;\n  }\n\n  /**\n   * Overrides one or more injectables configured via `providers` metadata property of a directive\n   * or\n   * component.\n   * Very useful when certain providers need to be mocked out.\n   *\n   * The providers specified via this method are appended to the existing `providers` causing the\n   * duplicated providers to\n   * be overridden.\n   */\n  overrideProviders(type: Type, providers: any[]): TestComponentBuilder {\n    let clone = this._clone();\n    clone._bindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  /**\n   * @deprecated\n   */\n  overrideBindings(type: Type, providers: any[]): TestComponentBuilder {\n    return this.overrideProviders(type, providers);\n  }\n\n  /**\n   * Overrides one or more injectables configured via `providers` metadata property of a directive\n   * or\n   * component.\n   * Very useful when certain providers need to be mocked out.\n   *\n   * The providers specified via this method are appended to the existing `providers` causing the\n   * duplicated providers to\n   * be overridden.\n   */\n  overrideViewProviders(type: Type, providers: any[]): TestComponentBuilder {\n    let clone = this._clone();\n    clone._viewBindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  /**\n   * @deprecated\n   */\n  overrideViewBindings(type: Type, providers: any[]): TestComponentBuilder {\n    return this.overrideViewProviders(type, providers);\n  }\n\n  private _create<C>(ngZone: NgZone, componentFactory: ComponentFactory<C>): ComponentFixture<C> {\n    let rootElId = `root${_nextRootElementId++}`;\n    var testComponentRenderer: TestComponentRenderer = this._injector.get(TestComponentRenderer);\n    testComponentRenderer.insertRootElement(rootElId);\n\n    var componentRef = componentFactory.create(this._injector, [], `#${rootElId}`);\n    let autoDetect: boolean = this._injector.get(ComponentFixtureAutoDetect, false);\n    return new ComponentFixture<any /*C*/>(componentRef, ngZone, autoDetect);\n  }\n\n  /**\n   * Builds and returns a ComponentFixture.\n   */\n  createAsync(rootComponentType: Type): Promise<ComponentFixture<any>> {\n    let noNgZone = IS_DART || this._injector.get(ComponentFixtureNoNgZone, false);\n    let ngZone: NgZone = noNgZone ? null : this._injector.get(NgZone, null);\n\n    let initComponent = () => {\n      let mockDirectiveResolver = this._injector.get(DirectiveResolver);\n      let mockViewResolver = this._injector.get(ViewResolver);\n      this._viewOverrides.forEach((view, type) => mockViewResolver.setView(type, view));\n      this._templateOverrides.forEach(\n          (template, type) => mockViewResolver.setInlineTemplate(type, template));\n      this._animationOverrides.forEach(\n          (animationsEntry, type) => mockViewResolver.setAnimations(type, animationsEntry));\n      this._directiveOverrides.forEach((overrides, component) => {\n        overrides.forEach(\n            (to, from) => { mockViewResolver.overrideViewDirective(component, from, to); });\n      });\n      this._bindingsOverrides.forEach(\n          (bindings, type) => mockDirectiveResolver.setProvidersOverride(type, bindings));\n      this._viewBindingsOverrides.forEach(\n          (bindings, type) => mockDirectiveResolver.setViewProvidersOverride(type, bindings));\n\n      let promise: Promise<ComponentFactory<any>> =\n          this._injector.get(ComponentResolver).resolveComponent(rootComponentType);\n      return promise.then(componentFactory => this._create(ngZone, componentFactory));\n    };\n\n    return ngZone == null ? initComponent() : ngZone.run(initComponent);\n  }\n\n  createFakeAsync(rootComponentType: Type): ComponentFixture<any> {\n    let result: any /** TODO #9100 */;\n    let error: any /** TODO #9100 */;\n    PromiseWrapper.then(\n        this.createAsync(rootComponentType), (_result) => { result = _result; },\n        (_error) => { error = _error; });\n    tick();\n    if (isPresent(error)) {\n      throw error;\n    }\n    return result;\n  }\n\n  createSync<C>(componentFactory: ComponentFactory<C>): ComponentFixture<C> {\n    let noNgZone = IS_DART || this._injector.get(ComponentFixtureNoNgZone, false);\n    let ngZone: NgZone = noNgZone ? null : this._injector.get(NgZone, null);\n\n    let initComponent = () => this._create(ngZone, componentFactory);\n    return ngZone == null ? initComponent() : ngZone.run(initComponent);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
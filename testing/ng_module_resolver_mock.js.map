{"version":3,"sources":["../../../../modules/@angular/compiler/testing/ng_module_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,gBAAE,EAAgB,MAAM,mBAAA,CAAoB;AACnD,OAAO,EAAA,QAAE,EAAS,UAAA,EAAY,QAAA,EAAyB,MAAM,eAAA,CAAgB;AAG7E;IAA0C,wCAAgB;IAGxD,8BAAoB,SAAmB;QAAvC,YAA2C,iBAAO,SAAG;QAAjC,eAAS,GAAT,SAAS,CAAU;QAF/B,gBAAU,GAAG,IAAI,GAAG,EAAuB,CAAC;;IAEA,CAAC;IAErD;;OAEG;IACH,0CAAW,GAAX,UAAY,IAAe,EAAE,QAAkB;QAC7C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACH,sCAAO,GAAP,UAAQ,IAAe,EAAE,eAAsB;QAAtB,gCAAA,EAAA,sBAAsB;QAC7C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,iBAAM,OAAO,YAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IAED,sBAAY,2CAAS;aAArB,cAAoC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAElE,6CAAc,GAAtB,UAAuB,SAAoB,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAQ3F,2BAAC;AAAD,CAjCA,AAiCC,CAjCyC,gBAAgB;;AA0BnD,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,mCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAF6F,CAE7F,CAAC","file":"ng_module_resolver_mock.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, NgModule, Type} from '@angular/core';\n\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<Type<any>, NgModule>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: Type<any>, metadata: NgModule): void {\n    this._ngModules.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound);\n  }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
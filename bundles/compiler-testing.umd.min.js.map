{"version":3,"file":"compiler-testing.umd.min.js","sources":["../../../../packages/compiler/testing/src/metadata_overrider.ts","../../../../packages/compiler/testing/src/testing.ts","../../../../packages/compiler/testing/index.ts","../../../../packages/compiler/testing/src/pipe_resolver_mock.ts","../../../../packages/compiler/testing/src/ng_module_resolver_mock.ts","../../../../packages/compiler/testing/src/schema_registry_mock.ts","../../../../packages/compiler/testing/src/directive_resolver_mock.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride} from '@angular/core/testing';\n\ntype StringMap = {\n  [key: string]: any\n};\n\nlet _nextReferenceId = 0;\n\nexport class MetadataOverrider {\n  private _references = new Map<any, string>();\n  /**\n   * Creates a new instance for the given metadata class\n   * based on an old instance and overrides.\n   */\n  overrideMetadata<C extends T, T>(\n      metadataClass: {new (options: T): C;}, oldMetadata: C, override: MetadataOverride<T>): C {\n    const props: StringMap = {};\n    if (oldMetadata) {\n      _valueProps(oldMetadata).forEach((prop) => props[prop] = (<any>oldMetadata)[prop]);\n    }\n\n    if (override.set) {\n      if (override.remove || override.add) {\n        throw new Error(`Cannot set and add/remove ${stringify(metadataClass)} at the same time!`);\n      }\n      setMetadata(props, override.set);\n    }\n    if (override.remove) {\n      removeMetadata(props, override.remove, this._references);\n    }\n    if (override.add) {\n      addMetadata(props, override.add);\n    }\n    return new metadataClass(<any>props);\n  }\n}\n\nfunction removeMetadata(metadata: StringMap, remove: any, references: Map<any, string>) {\n  const removeObjects = new Set<string>();\n  for (const prop in remove) {\n    const removeValue = remove[prop];\n    if (removeValue instanceof Array) {\n      removeValue.forEach(\n          (value: any) => { removeObjects.add(_propHashKey(prop, value, references)); });\n    } else {\n      removeObjects.add(_propHashKey(prop, removeValue, references));\n    }\n  }\n\n  for (const prop in metadata) {\n    const propValue = metadata[prop];\n    if (propValue instanceof Array) {\n      metadata[prop] = propValue.filter(\n          (value: any) => !removeObjects.has(_propHashKey(prop, value, references)));\n    } else {\n      if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n        metadata[prop] = undefined;\n      }\n    }\n  }\n}\n\nfunction addMetadata(metadata: StringMap, add: any) {\n  for (const prop in add) {\n    const addValue = add[prop];\n    const propValue = metadata[prop];\n    if (propValue != null && propValue instanceof Array) {\n      metadata[prop] = propValue.concat(addValue);\n    } else {\n      metadata[prop] = addValue;\n    }\n  }\n}\n\nfunction setMetadata(metadata: StringMap, set: any) {\n  for (const prop in set) {\n    metadata[prop] = set[prop];\n  }\n}\n\nfunction _propHashKey(propName: any, propValue: any, references: Map<any, string>): string {\n  const replacer = (key: any, value: any) => {\n    if (typeof value === 'function') {\n      value = _serializeReference(value, references);\n    }\n    return value;\n  };\n\n  return `${propName}:${JSON.stringify(propValue, replacer)}`;\n}\n\nfunction _serializeReference(ref: any, references: Map<any, string>): string {\n  let id = references.get(ref);\n  if (!id) {\n    id = `${stringify(ref)}${_nextReferenceId++}`;\n    references.set(ref, id);\n  }\n  return id;\n}\n\n\nfunction _valueProps(obj: any): string[] {\n  const props: string[] = [];\n  // regular public props\n  Object.keys(obj).forEach((prop) => {\n    if (!prop.startsWith('_')) {\n      props.push(prop);\n    }\n  });\n\n  // getters\n  let proto = obj;\n  while (proto = Object.getPrototypeOf(proto)) {\n    Object.keys(proto).forEach((protoProp) => {\n      const desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n      if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n        props.push(protoProp);\n      }\n    });\n  }\n  return props;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\n\nimport {createPlatformFactory, ModuleWithComponentFactories, Injectable, CompilerOptions, COMPILER_OPTIONS, CompilerFactory, ComponentFactory, NgModuleFactory, Injector, NgModule, Component, Directive, Pipe, Type, PlatformRef, ɵstringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompilerFactory as TestingCompilerFactory, ɵTestingCompiler as TestingCompiler} from '@angular/core/testing';\nimport {platformCoreDynamic, JitCompiler, DirectiveResolver, NgModuleResolver, PipeResolver, CompileMetadataResolver} from '@angular/compiler';\nimport {MockDirectiveResolver} from './directive_resolver_mock';\nimport {MockNgModuleResolver} from './ng_module_resolver_mock';\nimport {MockPipeResolver} from './pipe_resolver_mock';\nimport {MetadataOverrider} from './metadata_overrider';\n\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <JitCompiler>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver),\n        compiler.injector.get(CompileMetadataResolver));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CompilerFactory, },\n];\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: JitCompiler, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver,\n      private _metadataResolver: CompileMetadataResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getNgContentSelectors(component: Type<any>): string[] {\n    return this._compiler.getNgContentSelectors(component);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata !, override));\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata !, override));\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n  }\n  loadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n}\n\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {\n        provide: COMPILER_OPTIONS,\n        useValue: {\n          providers: [\n            MockPipeResolver,\n            {provide: PipeResolver, useExisting: MockPipeResolver},\n            MockDirectiveResolver,\n            {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n            MockNgModuleResolver,\n            {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n          ]\n        },\n        multi: true\n      },\n      {provide: TestingCompilerFactory, useClass: TestingCompilerFactoryImpl}\n    ]);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the compiler/testing package.\n */\n\nexport * from './src/testing';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, PipeResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, Pipe, Type} from '@angular/core';\n\n\nexport class MockPipeResolver extends PipeResolver {\n  private _pipes = new Map<Type<any>, Pipe>();\n\n  constructor(private _injector: Injector, refector: CompileReflector) { super(refector); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(pipe: Type<any>) { this._compiler.clearCacheFor(pipe); }\n\n  /**\n   * Overrides the {@link Pipe} for a pipe.\n   */\n  setPipe(type: Type<any>, metadata: Pipe): void {\n    this._pipes.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link Pipe} for a pipe:\n   * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n   * default\n   * `PipeResolver`, see `setPipe`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): Pipe {\n    let metadata = this._pipes.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound) !;\n    }\n    return metadata;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, NgModuleResolver} from '@angular/compiler';\nimport {Compiler, Injectable, Injector, NgModule, Type} from '@angular/core';\n\n\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<Type<any>, NgModule>();\n\n  constructor(private _injector: Injector, reflector: CompileReflector) { super(reflector); }\n\n  /**\n   * Overrides the {@link NgModule} for a module.\n   */\n  setNgModule(type: Type<any>, metadata: NgModule): void {\n    this._ngModules.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link NgModule} for a module:\n   * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: Type<any>, throwIfNotFound = true): NgModule {\n    return this._ngModules.get(type) || super.resolve(type, throwIfNotFound) !;\n  }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementSchemaRegistry} from '@angular/compiler';\nimport {SchemaMetadata, SecurityContext} from '@angular/core';\n\nexport class MockSchemaRegistry implements ElementSchemaRegistry {\n  constructor(\n      public existingProperties: {[key: string]: boolean},\n      public attrPropMapping: {[key: string]: string},\n      public existingElements: {[key: string]: boolean}, public invalidProperties: Array<string>,\n      public invalidAttributes: Array<string>) {}\n\n  hasProperty(tagName: string, property: string, schemas: SchemaMetadata[]): boolean {\n    const value = this.existingProperties[property];\n    return value === void 0 ? true : value;\n  }\n\n  hasElement(tagName: string, schemaMetas: SchemaMetadata[]): boolean {\n    const value = this.existingElements[tagName.toLowerCase()];\n    return value === void 0 ? true : value;\n  }\n\n  allKnownElementNames(): string[] { return Object.keys(this.existingElements); }\n\n  securityContext(selector: string, property: string, isAttribute: boolean): SecurityContext {\n    return SecurityContext.NONE;\n  }\n\n  getMappedPropName(attrName: string): string { return this.attrPropMapping[attrName] || attrName; }\n\n  getDefaultComponentElementName(): string { return 'ng-component'; }\n\n  validateProperty(name: string): {error: boolean, msg?: string} {\n    if (this.invalidProperties.indexOf(name) > -1) {\n      return {error: true, msg: `Binding to property '${name}' is disallowed for security reasons`};\n    } else {\n      return {error: false};\n    }\n  }\n\n  validateAttribute(name: string): {error: boolean, msg?: string} {\n    if (this.invalidAttributes.indexOf(name) > -1) {\n      return {\n        error: true,\n        msg: `Binding to attribute '${name}' is disallowed for security reasons`\n      };\n    } else {\n      return {error: false};\n    }\n  }\n\n  normalizeAnimationStyleProperty(propName: string): string { return propName; }\n  normalizeAnimationStyleValue(camelCaseProp: string, userProvidedProp: string, val: string|number):\n      {error: string, value: string} {\n    return {error: null !, value: val.toString()};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileReflector, DirectiveResolver} from '@angular/compiler';\nimport {Compiler, Component, Directive, Injectable, Injector, Provider, Type, resolveForwardRef, ɵViewMetadata as ViewMetadata} from '@angular/core';\n\n\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\n\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<Type<any>, Directive>();\n  private _providerOverrides = new Map<Type<any>, any[]>();\n  private _viewProviderOverrides = new Map<Type<any>, any[]>();\n  private _views = new Map<Type<any>, ViewMetadata>();\n  private _inlineTemplates = new Map<Type<any>, string>();\n\n  constructor(private _injector: Injector, reflector: CompileReflector) { super(reflector); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type<any>) { this._compiler.clearCacheFor(component); }\n\n  resolve(type: Type<any>): Directive;\n  resolve(type: Type<any>, throwIfNotFound: true): Directive;\n  resolve(type: Type<any>, throwIfNotFound: boolean): Directive|null;\n  resolve(type: Type<any>, throwIfNotFound = true): Directive|null {\n    let metadata = this._directives.get(type) || null;\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    if (!metadata) {\n      return null;\n    }\n\n    const providerOverrides = this._providerOverrides.get(type);\n    const viewProviderOverrides = this._viewProviderOverrides.get(type);\n\n    let providers = metadata.providers;\n    if (providerOverrides != null) {\n      const originalViewProviders: Provider[] = metadata.providers || [];\n      providers = originalViewProviders.concat(providerOverrides);\n    }\n\n    if (metadata instanceof Component) {\n      let viewProviders = metadata.viewProviders;\n      if (viewProviderOverrides != null) {\n        const originalViewProviders: Provider[] = metadata.viewProviders || [];\n        viewProviders = originalViewProviders.concat(viewProviderOverrides);\n      }\n\n      let view = this._views.get(type) || metadata;\n      let animations = view.animations;\n      let templateUrl: string|undefined = view.templateUrl;\n\n      let inlineTemplate = this._inlineTemplates.get(type);\n      if (inlineTemplate) {\n        templateUrl = undefined;\n      } else {\n        inlineTemplate = view.template;\n      }\n\n      return new Component({\n        selector: metadata.selector,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        host: metadata.host,\n        exportAs: metadata.exportAs,\n        moduleId: metadata.moduleId,\n        queries: metadata.queries,\n        changeDetection: metadata.changeDetection,\n        providers: providers,\n        viewProviders: viewProviders,\n        entryComponents: metadata.entryComponents,\n        template: inlineTemplate,\n        templateUrl: templateUrl,\n        animations: animations,\n        styles: view.styles,\n        styleUrls: view.styleUrls,\n        encapsulation: view.encapsulation,\n        interpolation: view.interpolation\n      });\n    }\n\n    return new Directive({\n      selector: metadata.selector,\n      inputs: metadata.inputs,\n      outputs: metadata.outputs,\n      host: metadata.host,\n      providers: providers,\n      exportAs: metadata.exportAs,\n      queries: metadata.queries\n    });\n  }\n\n  /**\n   * Overrides the {@link Directive} for a directive.\n   */\n  setDirective(type: Type<any>, metadata: Directive): void {\n    this._directives.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  setProvidersOverride(type: Type<any>, providers: Provider[]): void {\n    this._providerOverrides.set(type, providers);\n    this._clearCacheFor(type);\n  }\n\n  setViewProvidersOverride(type: Type<any>, viewProviders: Provider[]): void {\n    this._viewProviderOverrides.set(type, viewProviders);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Overrides the {@link ViewMetadata} for a component.\n   */\n  setView(component: Type<any>, view: ViewMetadata): void {\n    this._views.set(component, view);\n    this._clearCacheFor(component);\n  }\n  /**\n   * Overrides the inline template for a component - other configuration remains unchanged.\n   */\n  setInlineTemplate(component: Type<any>, template: string): void {\n    this._inlineTemplates.set(component, template);\n    this._clearCacheFor(component);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: CompileReflector, },\n];\n}\n\nfunction flattenArray(tree: any[], out: Array<Type<any>|any[]>): void {\n  if (tree == null) return;\n  for (let i = 0; i < tree.length; i++) {\n    const item = resolveForwardRef(tree[i]);\n    if (Array.isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["MetadataOverrider","prototype","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","forEach","prop","set","remove","add","Error","_angular_core","ɵstringify","setMetadata","removeMetadata","this","_references","addMetadata","TestingCompilerFactoryImpl","_compilerFactory","createTestingCompiler","options","compiler","createCompiler","TestingCompilerImpl","injector","get","MockDirectiveResolver","MockPipeResolver","MockNgModuleResolver","_angular_compiler","CompileMetadataResolver","decorators","type","Injectable","ctorParameters","CompilerFactory","_compiler","_directiveResolver","_pipeResolver","_moduleResolver","_metadataResolver","Object","defineProperty","enumerable","configurable","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","component","getComponentFactory","checkOverrideAllowed","hasAotSummary","overrideModule","ngModule","resolve","setNgModule","_overrider","NgModule","overrideDirective","directive","setDirective","Component","Directive","overrideComponent","platformCoreDynamicTesting","createPlatformFactory","platformCoreDynamic","provide","COMPILER_OPTIONS","useValue","providers","PipeResolver","useExisting","DirectiveResolver","_this","_super","call","refector","_injector","throwIfNotFound","metadata","reflector","Compiler","_clearCacheFor","clearCacheFor","NgModuleResolver","references","removeObjects","Set","_loop_1","removeValue","Array","value","_propHashKey","_loop_2","propValue","filter","has","undefined","addValue","concat","propName","replacer","key","_serializeReference","JSON","stringify","id","ref","_nextReferenceId","obj","startsWith","push","proto","keys","protoProp","MockSchemaRegistry","existingProperties","attrPropMapping","existingElements","invalidProperties","invalidAttributes","hasProperty","tagName","property","schemas","hasElement","schemaMetas","toLowerCase","allKnownElementNames","securityContext","selector","isAttribute","SecurityContext","NONE","getMappedPropName","attrName","getDefaultComponentElementName","validateProperty","name","indexOf","error","msg","validateAttribute","normalizeAnimationStyleProperty","_providerOverrides","Map","_viewProviderOverrides","_views","__extends","_directives","providerOverrides","viewProviderOverrides","originalViewProviders","viewProviders","view","animations","templateUrl","inlineTemplate","_inlineTemplates","template","inputs","outputs","host","exportAs","moduleId","queries","changeDetection","entryComponents","styles","styleUrls","encapsulation","interpolation","setInlineTemplate"],"mappings":"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"}
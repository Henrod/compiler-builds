{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerFactory, CompilerOptions, ComponentResolver, Injectable, PLATFORM_DIRECTIVES, PLATFORM_PIPES, ReflectiveInjector, Type, ViewEncapsulation, isDevMode} from '@angular/core';\n\nexport * from './template_ast';\nexport {TEMPLATE_TRANSFORMS} from './template_parser';\nexport {CompilerConfig, RenderTypes} from './config';\nexport * from './compile_metadata';\nexport * from './offline_compiler';\nexport {RuntimeCompiler} from './runtime_compiler';\nexport * from './url_resolver';\nexport * from './xhr';\n\nexport {ViewResolver} from './view_resolver';\nexport {DirectiveResolver} from './directive_resolver';\nexport {PipeResolver} from './pipe_resolver';\n\nimport {TemplateParser} from './template_parser';\nimport {HtmlParser} from './html_parser';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {StyleCompiler} from './style_compiler';\nimport {ViewCompiler} from './view_compiler/view_compiler';\nimport {AppModuleCompiler} from './app_module_compiler';\nimport {CompilerConfig} from './config';\nimport {RuntimeCompiler} from './runtime_compiler';\nimport {ElementSchemaRegistry} from './schema/element_schema_registry';\nimport {DomElementSchemaRegistry} from './schema/dom_element_schema_registry';\nimport {UrlResolver, DEFAULT_PACKAGE_URL_PROVIDER} from './url_resolver';\nimport {Parser} from './expression_parser/parser';\nimport {Lexer} from './expression_parser/lexer';\nimport {ViewResolver} from './view_resolver';\nimport {DirectiveResolver} from './directive_resolver';\nimport {PipeResolver} from './pipe_resolver';\nimport {Console, Reflector, reflector, ReflectorReader} from '../core_private';\nimport {ResourceLoader} from './xhr';\n\n/**\n * A set of providers that provide `RuntimeCompiler` and its dependencies to use for\n * template compilation.\n */\nexport const COMPILER_PROVIDERS: Array<any|Type|{[k: string]: any}|any[]> =\n    /*@ts2dart_const*/[\n      {provide: PLATFORM_DIRECTIVES, useValue: [], multi: true},\n      {provide: PLATFORM_PIPES, useValue: [], multi: true},\n      {provide: Reflector, useValue: reflector},\n      {provide: ReflectorReader, useExisting: Reflector},\n      Console,\n      Lexer,\n      Parser,\n      HtmlParser,\n      TemplateParser,\n      DirectiveNormalizer,\n      CompileMetadataResolver,\n      DEFAULT_PACKAGE_URL_PROVIDER,\n      StyleCompiler,\n      ViewCompiler,\n      AppModuleCompiler,\n      /*@ts2dart_Provider*/ {provide: CompilerConfig, useValue: new CompilerConfig()},\n      RuntimeCompiler,\n      /*@ts2dart_Provider*/ {provide: ComponentResolver, useExisting: RuntimeCompiler},\n      /*@ts2dart_Provider*/ {provide: Compiler, useExisting: RuntimeCompiler},\n      DomElementSchemaRegistry,\n      /*@ts2dart_Provider*/ {provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry},\n      UrlResolver,\n      ViewResolver,\n      DirectiveResolver,\n      PipeResolver\n    ];\nexport class _RuntimeCompilerFactory extends CompilerFactory {\n  createCompiler(options: CompilerOptions): Compiler {\n    const deprecationMessages: string[] = [];\n    let platformDirectivesFromAppProviders: any[] = [];\n    let platformPipesFromAppProviders: any[] = [];\n    let compilerProvidersFromAppProviders: any[] = [];\n    let useDebugFromAppProviders: boolean;\n    let useJitFromAppProviders: boolean;\n    let defaultEncapsulationFromAppProviders: ViewEncapsulation;\n\n    if (options.deprecatedAppProviders && options.deprecatedAppProviders.length > 0) {\n      // Note: This is a hack to still support the old way\n      // of configuring platform directives / pipes and the compiler xhr.\n      // This will soon be deprecated!\n      const inj = ReflectiveInjector.resolveAndCreate(options.deprecatedAppProviders);\n      const compilerConfig: CompilerConfig = inj.get(CompilerConfig, null);\n      if (compilerConfig) {\n        platformDirectivesFromAppProviders = compilerConfig.deprecatedPlatformDirectives;\n        platformPipesFromAppProviders = compilerConfig.deprecatedPlatformPipes;\n        useJitFromAppProviders = compilerConfig.useJit;\n        useDebugFromAppProviders = compilerConfig.genDebugInfo;\n        defaultEncapsulationFromAppProviders = compilerConfig.defaultEncapsulation;\n        deprecationMessages.push(\n            `Passing a CompilerConfig to \"bootstrap()\" as provider is deprecated. Pass the provider via the new parameter \"compilerOptions\" of \"bootstrap()\" instead.`);\n      } else {\n        // If nobody provided a CompilerConfig, use the\n        // PLATFORM_DIRECTIVES / PLATFORM_PIPES values directly if existing\n        platformDirectivesFromAppProviders = inj.get(PLATFORM_DIRECTIVES, []);\n        if (platformDirectivesFromAppProviders.length > 0) {\n          deprecationMessages.push(\n              `Passing PLATFORM_DIRECTIVES to \"bootstrap()\" as provider is deprecated. Use the new parameter \"directives\" of \"bootstrap()\" instead.`);\n        }\n        platformPipesFromAppProviders = inj.get(PLATFORM_PIPES, []);\n        if (platformPipesFromAppProviders.length > 0) {\n          deprecationMessages.push(\n              `Passing PLATFORM_PIPES to \"bootstrap()\" as provider is deprecated. Use the new parameter \"pipes\" of \"bootstrap()\" instead.`);\n        }\n      }\n      const xhr = inj.get(ResourceLoader, null);\n      if (xhr) {\n        compilerProvidersFromAppProviders.push([{provide: ResourceLoader, useValue: xhr}]);\n        deprecationMessages.push(\n            `Passing an instance of XHR to \"bootstrap()\" as provider is deprecated. Pass the provider via the new parameter \"compilerOptions\" of \"bootstrap()\" instead.`);\n      }\n      // Need to copy console from deprecatedAppProviders to compiler providers\n      // as well so that we can test the above deprecation messages in old style bootstrap\n      // where we only have app providers!\n      const console = inj.get(Console, null);\n      if (console) {\n        compilerProvidersFromAppProviders.push([{provide: Console, useValue: console}]);\n      }\n    }\n\n    const injector = ReflectiveInjector.resolveAndCreate([\n      COMPILER_PROVIDERS, {\n        provide: CompilerConfig,\n        useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n          return new CompilerConfig({\n            deprecatedPlatformDirectives:\n                _mergeArrays(platformDirectivesFromAppProviders, platformDirectives),\n            deprecatedPlatformPipes: _mergeArrays(platformPipesFromAppProviders, platformPipes),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers. E.g. important for the testing platform.\n            genDebugInfo: _firstDefined(options.useDebug, useDebugFromAppProviders, isDevMode()),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            useJit: _firstDefined(options.useJit, useJitFromAppProviders, true),\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            defaultEncapsulation: _firstDefined(\n                options.defaultEncapsulation, defaultEncapsulationFromAppProviders,\n                ViewEncapsulation.Emulated)\n          });\n        },\n        deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n      },\n      // options.providers will always contain a provider for ResourceLoader as well\n      // (added by platforms). So allow compilerProvidersFromAppProviders to overwrite this\n      _mergeArrays(options.providers, compilerProvidersFromAppProviders)\n    ]);\n    const console: Console = injector.get(Console);\n    deprecationMessages.forEach((msg) => { console.warn(msg); });\n\n    return injector.get(Compiler);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\n\nexport const RUNTIME_COMPILER_FACTORY = new _RuntimeCompilerFactory();\n\nfunction _firstDefined<T>(...args: T[]): T {\n  for (var i = 0; i < args.length; i++) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(...parts: any[][]): any[] {\n  let result: any[] = [];\n  parts.forEach((part) => result.push(...part));\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
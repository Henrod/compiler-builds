{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/config.ts"],"names":[],"mappings":"OAAO,EAAC,iBAAiB,EAAC,MAAM,eAAe;OAExC,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAC/C,EAAC,OAAO,EAAC,MAAM,oBAAoB;OAGnC,EAAC,WAAW,EAAC,MAAM,eAAe;AAEzC;IAIE,YACW,YAAqB,EAAS,gBAAyB,EAAS,MAAe,EACtF,WAAW,GAAgB,IAAI,EAAE,oBAAoB,GAAsB,IAAI;QADxE,iBAAY,GAAZ,YAAY,CAAS;QAAS,qBAAgB,GAAhB,gBAAgB,CAAS;QAAS,WAAM,GAAN,MAAM,CAAS;QAExF,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACzB,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACzC,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,EAAE,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAClC,oBAAoB,GAAG,iBAAiB,CAAC,QAAQ,CAAC;QACpD,CAAC;QACD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;IACE,IAAI,QAAQ,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACrE,IAAI,UAAU,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACvE,IAAI,aAAa,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAC1E,IAAI,aAAa,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAC1E,IAAI,UAAU,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IACvE,IAAI,WAAW,KAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AAC1E,CAAC;AAED;IAAA;QACE,aAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAChC,eAAU,GAA0B,IAAI,CAAC;QACzC,kBAAa,GAA0B,IAAI,CAAC;QAC5C,kBAAa,GAA0B,IAAI,CAAC;QAC5C,eAAU,GAA0B,IAAI,CAAC;QACzC,gBAAW,GAA0B,IAAI,CAAC;IAC5C,CAAC;AAAD,CAAC;AAAA","sourcesContent":["import {ViewEncapsulation} from '@angular/core';\n\nimport {unimplemented} from '../src/facade/exceptions';\nimport {isBlank} from '../src/facade/lang';\n\nimport {CompileIdentifierMetadata} from './compile_metadata';\nimport {Identifiers} from './identifiers';\n\nexport class CompilerConfig {\n  public renderTypes: RenderTypes;\n  public defaultEncapsulation: ViewEncapsulation;\n\n  constructor(\n      public genDebugInfo: boolean, public logBindingUpdate: boolean, public useJit: boolean,\n      renderTypes: RenderTypes = null, defaultEncapsulation: ViewEncapsulation = null) {\n    if (isBlank(renderTypes)) {\n      renderTypes = new DefaultRenderTypes();\n    }\n    this.renderTypes = renderTypes;\n    if (isBlank(defaultEncapsulation)) {\n      defaultEncapsulation = ViewEncapsulation.Emulated;\n    }\n    this.defaultEncapsulation = defaultEncapsulation;\n  }\n}\n\n/**\n * Types used for the renderer.\n * Can be replaced to specialize the generated output to a specific renderer\n * to help tree shaking.\n */\nexport abstract class RenderTypes {\n  get renderer(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderText(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderElement(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderComment(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderNode(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderEvent(): CompileIdentifierMetadata { return unimplemented(); }\n}\n\nexport class DefaultRenderTypes implements RenderTypes {\n  renderer = Identifiers.Renderer;\n  renderText: any /** TODO #9100 */ = null;\n  renderElement: any /** TODO #9100 */ = null;\n  renderComment: any /** TODO #9100 */ = null;\n  renderNode: any /** TODO #9100 */ = null;\n  renderEvent: any /** TODO #9100 */ = null;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
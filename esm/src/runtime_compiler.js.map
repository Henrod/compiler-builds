{"version":3,"file":"runtime_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/runtime_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AppModuleFactory, AppModuleMetadata, Compiler, ComponentFactory, ComponentResolver, Injectable} from '@angular/core';\n\nimport {BaseException} from '../src/facade/exceptions';\nimport {ConcreteType, IS_DART, Type, isBlank, isString, stringify} from '../src/facade/lang';\n\nimport {ListWrapper,} from '../src/facade/collection';\nimport {PromiseWrapper} from '../src/facade/async';\nimport {createHostComponentMeta, CompileDirectiveMetadata, CompilePipeMetadata, CompileIdentifierMetadata} from './compile_metadata';\nimport {TemplateAst,} from './template_ast';\nimport {StyleCompiler, StylesCompileDependency, CompiledStylesheet} from './style_compiler';\nimport {ViewCompiler, ViewCompileResult, ViewFactoryDependency, ComponentFactoryDependency} from './view_compiler/view_compiler';\nimport {AppModuleCompiler} from './app_module_compiler';\nimport {TemplateParser} from './template_parser';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {CompilerConfig} from './config';\nimport * as ir from './output/output_ast';\nimport {jitStatements} from './output/output_jit';\nimport {interpretStatements} from './output/output_interpreter';\nimport {SyncAsyncResult} from './util';\nexport class RuntimeCompiler implements ComponentResolver, Compiler {\n  private _compiledTemplateCache = new Map<Type, CompiledTemplate>();\n  private _compiledHostTemplateCache = new Map<Type, CompiledTemplate>();\n  private _compiledAppModuleCache = new Map<Type, AppModuleFactory<any>>();\n\n  constructor(\n      private _metadataResolver: CompileMetadataResolver,\n      private _templateNormalizer: DirectiveNormalizer, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _appModuleCompiler: AppModuleCompiler, private _genConfig: CompilerConfig) {}\n\n  resolveComponent(component: Type|string): Promise<ComponentFactory<any>> {\n    if (isString(component)) {\n      return PromiseWrapper.reject(\n          new BaseException(`Cannot resolve component using '${component}'.`), null);\n    }\n    return this.compileComponentAsync(<ConcreteType<any>>component);\n  }\n\n  compileAppModuleSync<T>(moduleType: ConcreteType<T>, metadata: AppModuleMetadata = null):\n      AppModuleFactory<T> {\n    return this._compileAppModule(moduleType, true, metadata).syncResult;\n  }\n\n  compileAppModuleAsync<T>(moduleType: ConcreteType<T>, metadata: AppModuleMetadata = null):\n      Promise<AppModuleFactory<T>> {\n    return this._compileAppModule(moduleType, false, metadata).asyncResult;\n  }\n\n  private _compileAppModule<T>(\n      moduleType: ConcreteType<T>, isSync: boolean,\n      metadata: AppModuleMetadata = null): SyncAsyncResult<AppModuleFactory<T>> {\n    // Only cache if we read the metadata via the reflector,\n    // as we use the moduleType as cache key.\n    let useCache = !metadata;\n    let appModuleFactory = this._compiledAppModuleCache.get(moduleType);\n    let componentCompilePromises: Promise<any>[] = [];\n    if (!appModuleFactory || !useCache) {\n      var compileModuleMeta = this._metadataResolver.getAppModuleMetadata(moduleType, metadata);\n      var compileResult = this._appModuleCompiler.compile(compileModuleMeta);\n      compileResult.dependencies.forEach((dep) => {\n        let compileResult = this._compileComponent(\n            dep.comp.runtime, isSync,\n            compileModuleMeta.directives.map(compileType => <any>compileType.runtime),\n            compileModuleMeta.pipes.map(compileType => <any>compileType.runtime));\n        dep.placeholder.runtime = compileResult.syncResult;\n        componentCompilePromises.push(compileResult.asyncResult);\n        dep.placeholder.name = `compFactory_${dep.comp.name}`;\n      });\n      if (IS_DART || !this._genConfig.useJit) {\n        appModuleFactory =\n            interpretStatements(compileResult.statements, compileResult.appModuleFactoryVar);\n      } else {\n        appModuleFactory = jitStatements(\n            `${compileModuleMeta.type.name}.ngfactory.js`, compileResult.statements,\n            compileResult.appModuleFactoryVar);\n      }\n      if (useCache) {\n        this._compiledAppModuleCache.set(moduleType, appModuleFactory);\n      }\n    }\n    return new SyncAsyncResult(\n        appModuleFactory, Promise.all(componentCompilePromises).then(() => appModuleFactory));\n  }\n\n  compileComponentAsync<T>(compType: ConcreteType<T>, {moduleDirectives = [], modulePipes = []}: {\n    moduleDirectives?: ConcreteType<any>[],\n    modulePipes?: ConcreteType<any>[]\n  } = {}): Promise<ComponentFactory<T>> {\n    return this._compileComponent(compType, false, moduleDirectives, modulePipes).asyncResult;\n  }\n\n  compileComponentSync<T>(compType: ConcreteType<T>, {moduleDirectives = [], modulePipes = []}: {\n    moduleDirectives?: ConcreteType<any>[],\n    modulePipes?: ConcreteType<any>[]\n  } = {}): ComponentFactory<T> {\n    return this._compileComponent(compType, true, moduleDirectives, modulePipes).syncResult;\n  }\n\n  private _compileComponent<T>(\n      compType: ConcreteType<T>, isSync: boolean, moduleDirectives: ConcreteType<any>[],\n      modulePipes: ConcreteType<any>[]): SyncAsyncResult<ComponentFactory<T>> {\n    var templates =\n        this._getTransitiveCompiledTemplates(compType, true, moduleDirectives, modulePipes);\n    var loadingPromises: Promise<any>[] = [];\n    templates.forEach((template) => {\n      if (template.loading) {\n        if (isSync) {\n          throw new BaseException(\n              `Can't compile synchronously as ${template.compType.name} is still being loaded!`);\n        } else {\n          loadingPromises.push(template.loading);\n        }\n      }\n    });\n    let compile = () => { templates.forEach((template) => { this._compileTemplate(template); }); };\n    if (isSync) {\n      compile();\n    }\n    let result = this._compiledHostTemplateCache.get(compType).proxyComponentFactory;\n    return new SyncAsyncResult(result, Promise.all(loadingPromises).then(() => {\n      compile();\n      return result;\n    }));\n  }\n\n  clearCacheFor(type: Type) {\n    this._compiledAppModuleCache.delete(type);\n    this._metadataResolver.clearCacheFor(type);\n    this._compiledHostTemplateCache.delete(type);\n    var compiledTemplate = this._compiledTemplateCache.get(type);\n    if (compiledTemplate) {\n      this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);\n      this._compiledTemplateCache.delete(type);\n    }\n  }\n\n  clearCache(): void {\n    this._metadataResolver.clearCache();\n    this._compiledTemplateCache.clear();\n    this._compiledHostTemplateCache.clear();\n    this._templateNormalizer.clearCache();\n    this._compiledAppModuleCache.clear();\n  }\n\n  private _createCompiledHostTemplate(type: Type): CompiledTemplate {\n    var compiledTemplate = this._compiledHostTemplateCache.get(type);\n    if (isBlank(compiledTemplate)) {\n      var compMeta = this._metadataResolver.getDirectiveMetadata(type);\n      assertComponent(compMeta);\n      var hostMeta = createHostComponentMeta(compMeta.type, compMeta.selector);\n      compiledTemplate = new CompiledTemplate(\n          true, compMeta.selector, compMeta.type, [], [type], [], [],\n          this._templateNormalizer.normalizeDirective(hostMeta));\n      this._compiledHostTemplateCache.set(type, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _createCompiledTemplate(\n      type: Type, moduleDirectives: ConcreteType<any>[],\n      modulePipes: ConcreteType<any>[]): CompiledTemplate {\n    var compiledTemplate = this._compiledTemplateCache.get(type);\n    if (isBlank(compiledTemplate)) {\n      var compMeta = this._metadataResolver.getDirectiveMetadata(type);\n      assertComponent(compMeta);\n      var viewDirectives: CompileDirectiveMetadata[] = [];\n      moduleDirectives.forEach(\n          (type) => viewDirectives.push(this._metadataResolver.getDirectiveMetadata(type)));\n      var viewComponentTypes: Type[] = [];\n      this._metadataResolver.getViewDirectivesMetadata(type).forEach(dirOrComp => {\n        if (dirOrComp.isComponent) {\n          viewComponentTypes.push(dirOrComp.type.runtime);\n        } else {\n          viewDirectives.push(dirOrComp);\n        }\n      });\n      var precompileComponentTypes = compMeta.precompile.map((typeMeta) => typeMeta.runtime);\n      var pipes = [\n        ...modulePipes.map((type) => this._metadataResolver.getPipeMetadata(type)),\n        ...this._metadataResolver.getViewPipesMetadata(type)\n      ];\n      compiledTemplate = new CompiledTemplate(\n          false, compMeta.selector, compMeta.type, viewDirectives, viewComponentTypes,\n          precompileComponentTypes, pipes, this._templateNormalizer.normalizeDirective(compMeta));\n      this._compiledTemplateCache.set(type, compiledTemplate);\n    }\n    return compiledTemplate;\n  }\n\n  private _getTransitiveCompiledTemplates(\n      compType: Type, isHost: boolean, moduleDirectives: ConcreteType<any>[],\n      modulePipes: ConcreteType<any>[],\n      target: Set<CompiledTemplate> = new Set<CompiledTemplate>()): Set<CompiledTemplate> {\n    var template = isHost ? this._createCompiledHostTemplate(compType) :\n                            this._createCompiledTemplate(compType, moduleDirectives, modulePipes);\n    if (!target.has(template)) {\n      target.add(template);\n      template.viewComponentTypes.forEach((compType) => {\n        this._getTransitiveCompiledTemplates(\n            compType, false, moduleDirectives, modulePipes, target);\n      });\n      template.precompileHostComponentTypes.forEach((compType) => {\n        this._getTransitiveCompiledTemplates(compType, true, moduleDirectives, modulePipes, target);\n      });\n    }\n    return target;\n  }\n\n  private _compileTemplate(template: CompiledTemplate) {\n    if (template.isCompiled) {\n      return;\n    }\n    var compMeta = template.normalizedCompMeta;\n    var externalStylesheetsByModuleUrl = new Map<string, CompiledStylesheet>();\n    var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);\n    stylesCompileResult.externalStylesheets.forEach(\n        (r) => { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });\n    this._resolveStylesCompileResult(\n        stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);\n    var viewCompMetas = template.viewComponentTypes.map(\n        (compType) => this._compiledTemplateCache.get(compType).normalizedCompMeta);\n    var parsedTemplate = this._templateParser.parse(\n        compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas),\n        template.viewPipes, compMeta.type.name);\n    var compileResult = this._viewCompiler.compileComponent(\n        compMeta, parsedTemplate, ir.variable(stylesCompileResult.componentStylesheet.stylesVar),\n        template.viewPipes);\n    var depTemplates = compileResult.dependencies.map((dep) => {\n      let depTemplate: CompiledTemplate;\n      if (dep instanceof ViewFactoryDependency) {\n        let vfd = <ViewFactoryDependency>dep;\n        depTemplate = this._compiledTemplateCache.get(vfd.comp.runtime);\n        vfd.placeholder.runtime = depTemplate.proxyViewFactory;\n        vfd.placeholder.name = `viewFactory_${vfd.comp.name}`;\n      } else if (dep instanceof ComponentFactoryDependency) {\n        let cfd = <ComponentFactoryDependency>dep;\n        depTemplate = this._compiledHostTemplateCache.get(cfd.comp.runtime);\n        cfd.placeholder.runtime = depTemplate.proxyComponentFactory;\n        cfd.placeholder.name = `compFactory_${cfd.comp.name}`;\n      }\n      return depTemplate;\n    });\n    var statements =\n        stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);\n    var factory: any;\n    if (IS_DART || !this._genConfig.useJit) {\n      factory = interpretStatements(statements, compileResult.viewFactoryVar);\n    } else {\n      factory = jitStatements(\n          `${template.compType.name}.ngfactory.js`, statements, compileResult.viewFactoryVar);\n    }\n    template.compiled(factory);\n  }\n\n  private _resolveStylesCompileResult(\n      result: CompiledStylesheet, externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>) {\n    result.dependencies.forEach((dep, i) => {\n      var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n      var nestedStylesArr = this._resolveAndEvalStylesCompileResult(\n          nestedCompileResult, externalStylesheetsByModuleUrl);\n      dep.valuePlaceholder.runtime = nestedStylesArr;\n      dep.valuePlaceholder.name = `importedStyles${i}`;\n    });\n  }\n\n  private _resolveAndEvalStylesCompileResult(\n      result: CompiledStylesheet,\n      externalStylesheetsByModuleUrl: Map<string, CompiledStylesheet>): string[] {\n    this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n    if (IS_DART || !this._genConfig.useJit) {\n      return interpretStatements(result.statements, result.stylesVar);\n    } else {\n      return jitStatements(`${result.meta.moduleUrl}.css.js`, result.statements, result.stylesVar);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: CompileMetadataResolver, },\n{type: DirectiveNormalizer, },\n{type: TemplateParser, },\n{type: StyleCompiler, },\n{type: ViewCompiler, },\n{type: AppModuleCompiler, },\n{type: CompilerConfig, },\n];\n}\n\nclass CompiledTemplate {\n  private _viewFactory: Function = null;\n  proxyViewFactory: Function;\n  proxyComponentFactory: ComponentFactory<any>;\n  loading: Promise<any> = null;\n  private _normalizedCompMeta: CompileDirectiveMetadata = null;\n  isCompiled = false;\n  isCompiledWithDeps = false;\n\n  constructor(\n      public isHost: boolean, selector: string, public compType: CompileIdentifierMetadata,\n      public viewDirectives: CompileDirectiveMetadata[], public viewComponentTypes: Type[],\n      public precompileHostComponentTypes: Type[], public viewPipes: CompilePipeMetadata[],\n      _normalizeResult: SyncAsyncResult<CompileDirectiveMetadata>) {\n    this.proxyViewFactory = (...args: any[]) => this._viewFactory.apply(null, args);\n    this.proxyComponentFactory = isHost ?\n        new ComponentFactory<any>(selector, this.proxyViewFactory, compType.runtime) :\n        null;\n    if (_normalizeResult.syncResult) {\n      this._normalizedCompMeta = _normalizeResult.syncResult;\n    } else {\n      this.loading = _normalizeResult.asyncResult.then((normalizedCompMeta) => {\n        this._normalizedCompMeta = normalizedCompMeta;\n        this.loading = null;\n      });\n    }\n  }\n\n  get normalizedCompMeta(): CompileDirectiveMetadata {\n    if (this.loading) {\n      throw new BaseException(`Template is still loading for ${this.compType.name}!`);\n    }\n    return this._normalizedCompMeta;\n  }\n\n  compiled(viewFactory: Function) {\n    this._viewFactory = viewFactory;\n    this.isCompiled = true;\n  }\n\n  depsCompiled() { this.isCompiledWithDeps = true; }\n}\n\nfunction assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new BaseException(`Could not compile '${meta.type.name}' because it is not a component.`);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,cAAc,gCAAgC,CAAC;AAC/C,cAAc,8BAA8B,CAAC;AAC7C,cAAc,kCAAkC,CAAC;AACjD,cAAc,mCAAmC,CAAC;AAClD,cAAc,mCAAmC,CAAC;OAE3C,EAAC,qBAAqB,EAAE,eAAe,EAAc,MAAM,eAAe;OAC1E,EAAC,mBAAmB,EAAE,iBAAiB,EAAE,YAAY,EAAE,gBAAgB,EAAC,MAAM,SAAS;OACvF,EAAC,gBAAgB,EAAC,MAAM,8BAA8B;OACtD,EAAC,qBAAqB,EAAC,MAAM,mCAAmC;OAChE,EAAC,oBAAoB,EAAC,MAAM,mCAAmC;AAGtE;;;;GAIG;AACH,OAAO,MAAM,0BAA0B,GACnC,qBAAqB,CAAC,mBAAmB,EAAE,oBAAoB,EAAE,CAAC;QAC1C,OAAO,EAAE,eAAe;QACxB,QAAQ,EAAE;YACR,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,qBAAqB,EAAC;gBAC7D,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,gBAAgB,EAAC;gBACnD,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAC;aAC5D;SACF;QACD,KAAK,EAAE,IAAI;KACZ,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './testing/schema_registry_mock';\nexport * from './testing/view_resolver_mock';\nexport * from './testing/test_component_builder';\nexport * from './testing/directive_resolver_mock';\nexport * from './testing/ng_module_resolver_mock';\n\nimport {createPlatformFactory, CompilerOptions, PlatformRef} from '@angular/core';\nimport {coreDynamicPlatform, DirectiveResolver, ViewResolver, NgModuleResolver} from './index';\nimport {MockViewResolver} from './testing/view_resolver_mock';\nimport {MockDirectiveResolver} from './testing/directive_resolver_mock';\nimport {MockNgModuleResolver} from './testing/ng_module_resolver_mock';\n\n\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport const coreDynamicTestingPlatform =\n    createPlatformFactory(coreDynamicPlatform, 'coreDynamicTesting', [{\n                            provide: CompilerOptions,\n                            useValue: {\n                              providers: [\n                                {provide: DirectiveResolver, useClass: MockDirectiveResolver},\n                                {provide: ViewResolver, useClass: MockViewResolver},\n                                {provide: NgModuleResolver, useClass: MockNgModuleResolver}\n                              ]\n                            },\n                            multi: true\n                          }]);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/i18n/i18n_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,KAAE,IAAQ,eAAA,EAAgB,MAAA,4BAAA;OAC1B,EAAA,MAAE,IAAS,gBAAA,EAAiB,MAAA,6BAAA;OAC5B,KAAK,IAAA,MAAA,kBAAA;OACL,EAAA,oBAAE,EAAoB,MAAA,wBAAA;OAItB,KAAK,IAAA,MAAA,YAAA;OACL,EAAA,mBAAE,EAAmB,MAAA,2BAAA;AAE5B,IAAM,gBAAgB,CAAhB,UAAA,GAAa,IAAI,gBAAA,CAAiB,IAAI,eAAA,EAAgB,CAAE,CAAC;AAC/D;;;;GAIG;AACH,yCADC,mBAAA;IAGC,IAAM,gBAAgB,CADhB,OAAA,GAAU,IAAI,YAAA,CAAa,UAAC,EAAW,mBAAA,CAAoB,CAAC;IAGlE,MAAM,CADC,UAAA,KAAkB,EAAG,OAAS,EAAQ,WAAa,EAAQ,EAAI;QAE3D,OAAA,OAAO,CADC,aAAC,CAAa,KAAC,EAAM,OAAA,EAAS,WAAA,EAAa,EAAA,CAAG;IACtD,CADsD,CAAC;AAEpE,CAAC;AACD;IAMA;;;OAGG;IACH,sBAFc,iBAAmB,EACnB,oBAAsB;QADtB,sBAAA,GAAA,iBAAA,CAAmB;QACnB,yBAAA,GAAA,oBAAA,CAAsB;IAAoB,CAAA;IAIxD;;;;;;OAMG;IARA,oCAAA,GASH,UATG,KAAA,EAAA,OAAA,EAAA,WAAA,EAAA,EAAA;QAWC,IAAI,CATC,MAAC,GAAQ,KAAA,CAAM,MAAC,IAAS,CAAA,IAAK,KAAA,CAAM,CAAC,CAAC,YAAY,IAAA,CAAK,SAAC,CAAS;QAUtE,IAAI,CATC,SAAC,GAAW,CAAA,CAAE;QAUnB,IAAI,CATC,oBAAC,GAAsB,IAAI,mBAAA,EAAoB,CAAE;QAUtD,IAAI,CATC,qBAAC,GAAuB,EAAA,CAAG;QAUhC,IAAI,CATC,qBAAC,GAAuB,EAAA,CAAG;QAWhC,IAAM,gBAAgB,CAThB,QAAA,GAAwB,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,KAAA,EAAO,EAAA,CAAG,CAAC;QAW7D,MAAM,CATC,IAAI,IAAA,CAAK,OAAC,CAUb,QAAQ,EATE,IAAA,CAAK,qBAAC,EAAsB,IAAA,CAAK,qBAAC,EAAsB,OAAA,EAAS,WAAA,EAAa,EAAA,CAAG,CAAC;IAUlG,CAAC;IACH;;;;OAIG;IACH,mCAbG,GAaH,UAbG,EAAA,EAAA,OAAA;QAcC,IAAM,gBAAgB,CAbhB,QAAA,GAAW,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,EAAA,CAAG,QAAC,CAAQ,CAAC;QAclD,IAAM,gBAAgB,CAbhB,KAAA,GAA+B,EAAA,CAAG;QAcxC,EAAE,CAbC,KAAC,CAAK,OAAC,CAAO,UAAA,IAAC;YAchB,oEAAoE;YACpE,KAAK,CAbC,IAAC,CAAI,IAAC,CAAI,GAAG,IAAA,CAAK,KAAC,CAAK;QAchC,CAAC,CAbC,CAAC;QAeH,IAAM,gBAAgB,CAbhB,MAAA,GAAkB,oBAAA,CAAqB,EAAC,CAAE,IAAC,CAAI,CAAC,MAAC,CAAM;QAc7D,IAAM,gBAAgB,CAbhB,WAAA,GAcF,IAAI,CAbC,oBAAC,CAAoB,0BAAC,CAA0B,EAAC,CAAE,IAAC,EAAK,KAAA,EAAO,MAAA,CAAO,CAAC;QAcjF,IAAI,CAbC,qBAAC,CAAqB,WAAC,CAAW,GAAG,EAAA,CAAG,UAAC,CAAU,QAAC,EAAQ,CAAE;QAenE,IAAI,gBAAgB,CAbhB,WAAA,GAAc,EAAA,CAAG;QAerB,EAAE,CAAC,CAAC,CAbC,MAAC,CAAM,CAAC,CAAA;YAcX,WAAW,GAbG,IAAA,CAAK,oBAAC,CAAoB,0BAAC,CAA0B,EAAC,CAAE,IAAC,CAAI,CAAC;YAc5E,IAAI,CAbC,qBAAC,CAAqB,WAAC,CAAW,GAAG,OAAA,EAAM,CAAE,IAAC,MAAI,CAAG;QAc5D,CAAC;QAED,MAAM,CAbC,IAAI,IAAA,CAAK,cAAC,CAcb,EAAE,CAbC,IAAC,EAAK,KAAA,EAAO,WAAA,EAAa,WAAA,EAAa,QAAA,EAAU,MAAA,EAAQ,EAAA,CAAG,UAAC,CAAU,CAAC;IAcjF,CAAC;IACH;;;;OAIG;IACH,qCAjBG,GAiBH,UAjBG,SAAA,EAAA,OAAA;QAkBC,MAAM,CAjBC,IAAA,CAAK,2BAAC,CAA2B,SAAC,CAAS,KAAC,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;IAkBjF,CAAC;IACH;;;;OAIG;IACH,gCArBG,GAqBH,UArBG,IAAA,EAAA,OAAA;QAsBC,MAAM,CArBC,IAAA,CAAK,2BAAC,CAA2B,IAAC,CAAI,KAAC,EAAM,IAAA,CAAK,UAAC,CAAU,CAAC;IAsBvE,CAAC;IACH;;;;OAIG;IACH,mCAzBG,GAyBH,UAzBG,OAAA,EAAA,OAAA,IAA8D,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA0B9E;;;;OAIG;IACH,qCA7BG,GA6BH,UA7BG,GAAA,EAAA,OAAA;QA6BH,iBA8BG;QA7BC,IAAI,CA7BC,SAAC,EAAS,CAAE;QA8BjB,IAAM,gBAAgB,CA7BhB,YAAA,GAAyC,EAAA,CAAG;QA8BlD,IAAM,gBAAgB,CA7BhB,OAAA,GAAU,IAAI,IAAA,CAAK,GAAC,CAAG,GAAC,CAAG,WAAC,EAAY,GAAA,CAAI,IAAC,EAAK,YAAA,EAAc,GAAA,CAAI,UAAC,CAAU,CAAC;QA8BtF,GAAG,CA7BC,KAAC,CAAK,OAAC,CAAO,UAAC,IAAC;YA8BlB,YAAY,CA7BC,IAAC,CAAI,KAAC,CAAK,GAAG,IAAI,IAAA,CAAK,SAAC,CA8BjC,IAAI,CA7BC,UAAC,CAAU,GAAC,CAAG,UAAC,IAAC,IAAQ,OAAA,IAAA,CAAK,KAAC,CAAK,KAAC,EAAK,EAAA,CAAG,EAApB,CAAoB,CAAC,EAAE,IAAA,CAAK,aAAC,CAAa,CAAC;QA8B/E,CAAC,CA7BC,CAAC;QA8BH,IAAI,CA7BC,SAAC,EAAS,CAAE;QA+BjB,EAAE,CAAC,CAAC,IA7BC,CAAI,MAAC,IAAS,IAAA,CAAK,SAAC,GAAW,CAAA,CAAE,CAAC,CAAA;YA8BrC,4BAA4B;YAC5B,iEAAiE;YACjE,+BAA+B;YAC/B,IAAM,gBAAgB,CA7BhB,KAAA,GAAQ,IAAA,CAAK,oBAAC,CAAoB,oBAAC,CAAoB,SAAC,GAAO,CAAG,IAAK,CAAE,CAAC;YA8BhF,OAAO,CA7BC,qBAAC,GAAuB,KAAA,CAAM;YA8BtC,IAAI,CA7BC,qBAAC,CAAqB,KAAC,CAAK,GAAG,GAAA,CAAI,WAAC,CAAW;YA+BpD,MAAM,CA7BC,OAAA,CAAQ;QA8BjB,CAAC;QAED,6BAA6B;QAC7B,yFAAyF;QACzF,yFAAyF;QACzF,cAAc;QACd,yFAAyF;QACzF,IAAM,gBAAgB,CA7BhB,MAAA,GAAS,IAAA,CAAK,oBAAC,CAAoB,kBAAC,CAAkB,KAAC,EAAM,GAAA,CAAI,UAAC,CAAU,QAAC,EAAQ,CAAE,CAAC;QA8B9F,IAAM,gBAAgB,CA7BhB,OAAA,GAAU,IAAI,YAAA,CAAa,IAAC,CAAI,iBAAC,EAAkB,IAAA,CAAK,oBAAC,CAAoB,CAAC;QA8BpF,IAAI,CA7BC,qBAAC,CAAqB,MAAC,CAAM,GAAG,OAAA,CAAQ,aAAC,CAAa,CAAC,GAAC,CAAG,EAAE,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,CAAC;QA8B9E,MAAM,CA7BC,IAAI,IAAA,CAAK,cAAC,CAAc,OAAC,EAAQ,MAAA,EAAQ,GAAA,CAAI,UAAC,CAAU,CAAC;IA8BlE,CAAC;IACH;;;;OAIG;IACH,yCAjCG,GAiCH,UAjCG,OAAA,EAAA,OAAA;QAkCC,MAjCM,IAAI,KAAA,CAAM,kBAAC,CAAkB,CAAC;IAkCtC,CAAC;IACH;;;;OAIG;IApCA,kDAAA,GAqCH,UArCG,IAAA,EAAA,UAAA;QAsCC,IAAM,gBAAgB,CArChB,kBAAA,GAAqB,IAAA,CAAK,iBAAC,CAAiB,kBAAC,CAsC/C,IAAI,EArCE,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,EAAG,IAAA,CAAK,oBAAC,CAAoB,CAAC;QAuClE,EAAE,CAAC,CAAC,CArCC,kBAAC,CAAkB,CAAC,CAAA;YAsCvB,sCAAsC;YACtC,MAAM,CArCC,IAAI,IAAA,CAAK,IAAC,CAAI,IAAC,EAAK,UAAA,CAAW,CAAC;QAsCzC,CAAC;QAED,uCAAuC;QACvC,IAAM,gBAAgB,CArChB,KAAA,GAAqB,EAAA,CAAG;QAsC9B,IAAM,gBAAgB,CArChB,SAAA,GAAY,IAAI,IAAA,CAAK,SAAC,CAAS,KAAC,EAAM,UAAA,CAAW,CAAC;QAsCxD,IAAA,8BArCmD,EAA7C,qBAAQ,EAAY,mBAAK,CAAwC;QAuCvE,GAAG,CAAC,CAAC,IArCC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,kBAAA,CAAmB,OAAC,CAAO,MAAC,GAAQ,CAAA,EAAG,CAAA,EAAE,EAAG,CAAA;YAsC9D,IAAM,gBAAgB,CArChB,UAAA,GAAa,kBAAA,CAAmB,WAAC,CAAW,CAAC,CAAC,CAAC;YAsCrD,IAAM,gBAAgB,CArChB,QAAA,GAAW,uBAAA,CAAwB,UAAC,CAAU,IAAI,eAAA,CAAgB;YAsCxE,IAAM,gBAAgB,CArChB,MAAA,GAAS,IAAA,CAAK,oBAAC,CAAoB,kBAAC,CAAkB,QAAC,EAAS,UAAA,CAAW,CAAC;YAuClF,EAAE,CAAC,CAAC,kBArCC,CAAkB,OAAC,CAAO,CAAC,CAAC,CAAC,MAAC,CAAM,CAAC,CAAA;gBAsCxC,+BAA+B;gBAC/B,KAAK,CArCC,IAAC,CAAI,IAAI,IAAA,CAAK,IAAC,CAAI,kBAAC,CAAkB,OAAC,CAAO,CAAC,CAAC,EAAE,UAAA,CAAW,CAAC,CAAC;YAsCvE,CAAC;YAED,KAAK,CArCC,IAAC,CAAI,IAAI,IAAA,CAAK,WAAC,CAAW,UAAC,EAAW,MAAA,EAAQ,UAAA,CAAW,CAAC,CAAC;YAsCjE,IAAI,CArCC,qBAAC,CAAqB,MAAC,CAAM,GAAG,UAAA,GAAa,UAAA,GAAa,UAAA,CAAW;QAsC5E,CAAC;QAED,wCAAwC;QACxC,IAAM,gBAAgB,CArChB,aAAA,GAAgB,kBAAA,CAAmB,OAAC,CAAO,MAAC,GAAQ,CAAA,CAAE;QAsC5D,EAAE,CAAC,CAAC,kBArCC,CAAkB,OAAC,CAAO,aAAC,CAAa,CAAC,MAAC,CAAM,CAAC,CAAA;YAsCpD,KAAK,CArCC,IAAC,CAAI,IAAI,IAAA,CAAK,IAAC,CAAI,kBAAC,CAAkB,OAAC,CAAO,aAAC,CAAa,EAAE,UAAA,CAAW,CAAC,CAAC;QAsCnF,CAAC;QACD,MAAM,CArCC,SAAA,CAAU;IAsCnB,CAAC;IACH,mBAAC;AAAD,CAvKA,AAuKC,IAAA;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;IACjC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC5C,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,qBAAqB,CAAC;IAC7C,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,qBAAqB,CAAC;IAC7C,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,iBAAiB,CAAC;IACzC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,oBAAoB,CAAC;AAC5C,CAAC;AAGD,IAAM,gBAAgB,CAvDhB,cAAA,GAAiB,wEAAA,CAAyE;AAwDhG;;;GAGG;AACH,iCA1DC,KAAA;IA2DC,MAAM,CA1DC,KAAA,CAAM,KAAC,CAAK,cAAC,CAAc,CAAC,CAAC,CAAC,CAAC;AA2DxC,CAAC","file":"i18n_parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Lexer as ExpressionLexer} from '../expression_parser/lexer';\nimport {Parser as ExpressionParser} from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport {getHtmlTagDefinition} from '../ml_parser/html_tags';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseSourceSpan} from '../parse_util';\n\nimport * as i18n from './i18n_ast';\nimport {PlaceholderRegistry} from './serializers/placeholder';\n\nconst /** @type {?} */ _expParser = new ExpressionParser(new ExpressionLexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n * @param {?} interpolationConfig\n * @return {?}\n */\nexport function createI18nMessageFactory(interpolationConfig: InterpolationConfig): (\n    nodes: html.Node[], meaning: string, description: string, id: string) => i18n.Message {\n  const /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);\n\n  return (nodes: html.Node[], meaning: string, description: string, id: string) =>\n             visitor.toI18nMessage(nodes, meaning, description, id);\n}\nclass _I18nVisitor implements html.Visitor {\nprivate _isIcu: boolean;\nprivate _icuDepth: number;\nprivate _placeholderRegistry: PlaceholderRegistry;\nprivate _placeholderToContent: {[phName: string]: string};\nprivate _placeholderToMessage: {[phName: string]: i18n.Message};\n/**\n * @param {?} _expressionParser\n * @param {?} _interpolationConfig\n */\nconstructor(\nprivate _expressionParser: ExpressionParser,\nprivate _interpolationConfig: InterpolationConfig) {}\n/**\n * @param {?} nodes\n * @param {?} meaning\n * @param {?} description\n * @param {?} id\n * @return {?}\n */\npublic toI18nMessage(nodes: html.Node[], meaning: string, description: string, id: string):\n      i18n.Message {\n    this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n    this._icuDepth = 0;\n    this._placeholderRegistry = new PlaceholderRegistry();\n    this._placeholderToContent = {};\n    this._placeholderToMessage = {};\n\n    const /** @type {?} */ i18nodes: i18n.Node[] = html.visitAll(this, nodes, {});\n\n    return new i18n.Message(\n        i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n  }\n/**\n * @param {?} el\n * @param {?} context\n * @return {?}\n */\nvisitElement(el: html.Element, context: any): i18n.Node {\n    const /** @type {?} */ children = html.visitAll(this, el.children);\n    const /** @type {?} */ attrs: {[k: string]: string} = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n\n    const /** @type {?} */ isVoid: boolean = getHtmlTagDefinition(el.name).isVoid;\n    const /** @type {?} */ startPhName =\n        this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    this._placeholderToContent[startPhName] = el.sourceSpan.toString();\n\n    let /** @type {?} */ closePhName = '';\n\n    if (!isVoid) {\n      closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      this._placeholderToContent[closePhName] = `</${el.name}>`;\n    }\n\n    return new i18n.TagPlaceholder(\n        el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);\n  }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n  }\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: html.Text, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(text.value, text.sourceSpan);\n  }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): i18n.Node { return null; }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(icu: html.Expansion, context: any): i18n.Node {\n    this._icuDepth++;\n    const /** @type {?} */ i18nIcuCases: {[k: string]: i18n.Node} = {};\n    const /** @type {?} */ i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach((caze): void => {\n      i18nIcuCases[caze.value] = new i18n.Container(\n          caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\n    });\n    this._icuDepth--;\n\n    if (this._isIcu || this._icuDepth > 0) {\n      // Returns an ICU node when:\n      // - the message (vs a part of the message) is an ICU message, or\n      // - the ICU message is nested.\n      const /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n      i18nIcu.expressionPlaceholder = expPh;\n      this._placeholderToContent[expPh] = icu.switchValue;\n\n      return i18nIcu;\n    }\n\n    // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations. We need to create a new visitor (they are not re-entrant) to compute the\n    // message id.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n    const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    const /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n    this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n    return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n  }\n/**\n * @param {?} icuCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(icuCase: html.ExpansionCase, context: any): i18n.Node {\n    throw new Error('Unreachable code');\n  }\n/**\n * @param {?} text\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _visitTextWithInterpolation(text: string, sourceSpan: ParseSourceSpan): i18n.Node {\n    const /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(\n        text, sourceSpan.start.toString(), this._interpolationConfig);\n\n    if (!splitInterpolation) {\n      // No expression, return a single text\n      return new i18n.Text(text, sourceSpan);\n    }\n\n    // Return a group of text + expressions\n    const /** @type {?} */ nodes: i18n.Node[] = [];\n    const /** @type {?} */ container = new i18n.Container(nodes, sourceSpan);\n    const {start: sDelimiter, end: eDelimiter} = this._interpolationConfig;\n\n    for (let /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\n      const /** @type {?} */ expression = splitInterpolation.expressions[i];\n      const /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n      const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n\n      if (splitInterpolation.strings[i].length) {\n        // No need to add empty strings\n        nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n      }\n\n      nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n      this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n    }\n\n    // The last index contains no expression\n    const /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\n    if (splitInterpolation.strings[lastStringIdx].length) {\n      nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n    }\n    return container;\n  }\n}\n\nfunction _I18nVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\n_I18nVisitor.prototype._isIcu;\n/** @type {?} */\n_I18nVisitor.prototype._icuDepth;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderRegistry;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderToContent;\n/** @type {?} */\n_I18nVisitor.prototype._placeholderToMessage;\n/** @type {?} */\n_I18nVisitor.prototype._expressionParser;\n/** @type {?} */\n_I18nVisitor.prototype._interpolationConfig;\n}\n\n\nconst /** @type {?} */ _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*\"([\\s\\S]*?)\"[\\s\\S]*\\)/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction _extractPlaceholderName(input: string): string {\n  return input.split(_CUSTOM_PH_EXP)[1];\n}\n"]}
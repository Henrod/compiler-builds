{"version":3,"file":"translation_bundle.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/translation_bundle.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,UAAU,EAAC,MAAM,0BAA0B;OAG5C,EAAC,SAAS,EAAC,MAAM,cAAc;AAGtC;;GAEG;AACH;IAGE,2BACY,iBAAsD,EACvD,MAAmC;QAD1C,iCAA8D,GAA9D,sBAA8D;QAAtD,sBAAiB,GAAjB,iBAAiB,CAAqC;QACvD,WAAM,GAAN,MAAM,CAA6B;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC;IAEM,sBAAI,GAAX,UAAY,OAAe,EAAE,GAAW,EAAE,UAAsB;QAC9D,IAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACvD,IAAM,QAAQ,GAAG,UAAC,CAAe,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC;QAC3D,MAAM,CAAC,IAAI,iBAAiB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,+BAAG,GAAH,UAAI,MAAoB;QACtB,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAE9C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,+BAAG,GAAH,UAAI,MAAoB,IAAa,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC9F,wBAAC;AAAD,CAAC,AA1BD,IA0BC;AAED;IAKE,2BACY,iBAAsD,EACtD,OAAoC;QAD5C,iCAA8D,GAA9D,sBAA8D;QAAtD,sBAAiB,GAAjB,iBAAiB,CAAqC;QACtD,YAAO,GAAP,OAAO,CAA6B;QALxC,iBAAY,GAAmB,EAAE,CAAC;QAClC,YAAO,GAAgB,EAAE,CAAC;IAIiB,CAAC;IAEpD,mCAAO,GAAP,UAAQ,MAAoB;QAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QACxB,eAAe;QACf,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAEzC,eAAe;QACf,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;QACtD,IAAM,IAAI,GAAG,IAAI,UAAU,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAErD,MAAM,CAAC;YACL,KAAK,EAAE,IAAI,CAAC,SAAS;YACrB,MAAM,EAAM,IAAI,CAAC,OAAO,QAAK,IAAI,CAAC,MAAM,CAAC;SAC1C,CAAC;IACJ,CAAC;IAED,qCAAS,GAAT,UAAU,IAAe,EAAE,OAAa,IAAY,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAExE,0CAAc,GAAd,UAAe,SAAyB,EAAE,OAAa;QAAvD,iBAEC;QADC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,EAAb,CAAa,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,oCAAQ,GAAR,UAAS,GAAa,EAAE,OAAa;QAArC,iBAUC;QATC,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAG,CAAC,UAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,OAAG,EAApC,CAAoC,CAAC,CAAC;QAEpF,sEAAsE;QACtE,oEAAoE;QACpE,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC;YAChE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;YACzC,GAAG,CAAC,UAAU,CAAC;QAEnB,MAAM,CAAC,MAAI,GAAG,UAAK,GAAG,CAAC,IAAI,UAAK,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAC;IACrD,CAAC;IAED,4CAAgB,GAAhB,UAAiB,EAAoB,EAAE,OAAa;QAClD,IAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC1C,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,+CAAmB,GAAnB,UAAoB,EAAuB,EAAE,OAAa,IAAS,MAAM,kBAAkB,CAAC,CAAC,CAAC;IAE9F,+CAAmB,GAAnB,UAAoB,EAAuB,EAAE,OAAa,IAAS,MAAM,kBAAkB,CAAC,CAAC,CAAC;IAEtF,0CAAc,GAAtB,UAAuB,MAAoB;QAA3C,iBAaC;QAZC,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,EAAhB,CAAgB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YACvC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,qCAAmC,MAAQ,CAAC,CAAC;QAC7E,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAEO,qCAAS,GAAjB,UAAkB,EAAa,EAAE,GAAW;QAC1C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;IACvD,CAAC;IACH,wBAAC;AAAD,CAAC,AA/ED,IA+EC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {HtmlParser} from '../ml_parser/html_parser';\n\nimport * as i18n from './i18n_ast';\nimport {I18nError} from './parse_util';\nimport {Serializer} from './serializers/serializer';\n\n/**\n * A container for translated messages\n */\nexport class TranslationBundle {\n  private _i18nToHtml: I18nToHtmlVisitor;\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {},\n      public digest: (m: i18n.Message) => string) {\n    this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest);\n  }\n\n  static load(content: string, url: string, serializer: Serializer): TranslationBundle {\n    const i18nNodesByMsgId = serializer.load(content, url);\n    const digestFn = (m: i18n.Message) => serializer.digest(m);\n    return new TranslationBundle(i18nNodesByMsgId, digestFn);\n  }\n\n  get(srcMsg: i18n.Message): html.Node[] {\n    const html = this._i18nToHtml.convert(srcMsg);\n\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n\n    return html.nodes;\n  }\n\n  has(srcMsg: i18n.Message): boolean { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\n}\n\nclass I18nToHtmlVisitor implements i18n.Visitor {\n  private _srcMsg: i18n.Message;\n  private _srcMsgStack: i18n.Message[] = [];\n  private _errors: I18nError[] = [];\n\n  constructor(\n      private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {},\n      private _digest: (m: i18n.Message) => string) {}\n\n  convert(srcMsg: i18n.Message): {nodes: html.Node[], errors: I18nError[]} {\n    this._srcMsgStack.length = 0;\n    this._errors.length = 0;\n    // i18n to text\n    const text = this._convertToText(srcMsg);\n\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, true);\n\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors],\n    };\n  }\n\n  visitText(text: i18n.Text, context?: any): string { return text.value; }\n\n  visitContainer(container: i18n.Container, context?: any): any {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): any {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n        this._srcMsg.placeholders[icu.expression] :\n        icu.expression;\n\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): string {\n    const phName = ph.name;\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName];\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder`);\n    return '';\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any { throw 'unreachable code'; }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any { throw 'unreachable code'; }\n\n  private _convertToText(srcMsg: i18n.Message): string {\n    const digest = this._digest(srcMsg);\n    if (this._i18nNodesByMsgId.hasOwnProperty(digest)) {\n      this._srcMsgStack.push(this._srcMsg);\n      this._srcMsg = srcMsg;\n      const nodes = this._i18nNodesByMsgId[digest];\n      const text = nodes.map(node => node.visit(this)).join('');\n      this._srcMsg = this._srcMsgStack.pop();\n      return text;\n    }\n\n    this._addError(srcMsg.nodes[0], `Missing translation for message ${digest}`);\n    return '';\n  }\n\n  private _addError(el: i18n.Node, msg: string) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/i18n/extractor_merger.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,KAAK,IAAA,MAAA,kBAAA;OAEL,EAAA,eAAE,EAAe,MAAA,qBAAA;OAEjB,KAAK,IAAA,MAAA,YAAA;OACL,EAAA,wBAAE,EAAwB,MAAA,eAAA;OAC1B,EAAA,SAAE,EAAS,MAAA,cAAA;AAGlB,IAAM,gBAAgB,CAAhB,UAAA,GAAa,MAAA,CAAO;AAC1B,IAAM,gBAAgB,CAAhB,iBAAA,GAAoB,OAAA,CAAQ;AAClC,IAAM,gBAAgB,CAAhB,2BAAA,GAA8B,SAAA,CAAU;AAC9C,IAAM,gBAAgB,CAAhB,iBAAA,GAAoB,GAAA,CAAI;AAC9B,IAAM,gBAAgB,CAAhB,YAAA,GAAe,IAAA,CAAK;AAC1B;;;;;;;GAOG;AACH,gCACI,KAAkB,EAAE,mBAAwC,EAAE,YAAsB,EACpF,aAAsC;IACxC,IAAM,gBAAgB,CAJhB,OAAA,GAAU,IAAI,QAAA,CAAS,YAAC,EAAa,aAAA,CAAc,CAAC;IAK1D,MAAM,CAJC,OAAA,CAAQ,OAAC,CAAO,KAAC,EAAM,mBAAA,CAAoB,CAAC;AAKrD,CAAC;AACD;;;;;;;GAOG;AACH,kCACI,KAAkB,EAAE,YAA+B,EAAE,mBAAwC,EAC7F,YAAsB,EAAE,aAAsC;IAChE,IAAM,gBAAgB,CAXhB,OAAA,GAAU,IAAI,QAAA,CAAS,YAAC,EAAa,aAAA,CAAc,CAAC;IAY1D,MAAM,CAXC,OAAA,CAAQ,KAAC,CAAK,KAAC,EAAM,YAAA,EAAc,mBAAA,CAAoB,CAAC;AAYjE,CAAC;AACD;IACA;;;OAGG;IACH,0BAdqB,QAAuB,EAAU,MAAkB;QAAnD,aAAA,GAAA,QAAA,CAAuB;QAAU,WAAA,GAAA,MAAA,CAAkB;IAAE,CAAA;IAgB1E,uBAAC;AAAD,CAPA,AAOC,IAAA;AAED;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACpC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;AAClC,CAAC;AAGD,IAAI,YAAY,GAAQ,EAAE,CAAC;AAC3B,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC;AACzB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC;AACvB,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;AAC/C,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;AAE3C;;;;;;GAMG;AACH;IAgBA;;;OAGG;IACH,kBAdsB,aAAsB,EAAW,cAAuC;QAAxE,kBAAA,GAAA,aAAA,CAAsB;QAAW,mBAAA,GAAA,cAAA,CAAuC;IAAC,CAAA;IAgB/F;;;;;OAKG;IACH,0BAjBG,GAiBH,UAjBG,KAAA,EAAA,mBAAA;QAiBH,iBAUG;QATC,IAAI,CAjBC,KAAC,CAAK,YAAC,CAAY,OAAC,EAAQ,mBAAA,CAAoB,CAAC;QAmBtD,KAAK,CAjBC,OAAC,CAAO,UAAA,IAAC,IAAO,OAAA,IAAA,CAAK,KAAC,CAAK,KAAC,EAAK,IAAA,CAAK,EAAtB,CAAsB,CAAC,CAAC;QAmB9C,EAAE,CAAC,CAAC,IAjBC,CAAI,YAAC,CAAY,CAAC,CAAA;YAkBrB,IAAI,CAjBC,YAAC,CAAY,KAAC,CAAK,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,EAAE,gBAAA,CAAiB,CAAC;QAkB/D,CAAC;QAED,MAAM,CAjBC,IAAI,gBAAA,CAAiB,IAAC,CAAI,SAAC,EAAU,IAAA,CAAK,OAAC,CAAO,CAAC;IAkB5D,CAAC;IACH;;;;;;OAMG;IACH,wBApBG,GAoBH,UACM,KAAkB,EAAE,YAA+B,EACnD,mBAAwC;QAC1C,IAAI,CApBC,KAAC,CAAK,YAAC,CAAY,KAAC,EAAM,mBAAA,CAAoB,CAAC;QAqBpD,IAAI,CApBC,aAAC,GAAe,YAAA,CAAa;QAsBlC,uCAAuC;QACvC,IAAM,gBAAgB,CApBhB,OAAA,GAAU,IAAI,IAAA,CAAK,OAAC,CAAO,SAAC,EAAU,EAAA,EAAI,KAAA,EAAO,IAAA,EAAM,IAAA,EAAM,IAAA,CAAK,CAAC;QAsBzE,IAAM,gBAAgB,CApBhB,cAAA,GAAiB,OAAA,CAAQ,KAAC,CAAK,IAAC,EAAK,IAAA,CAAK,CAAC;QAsBjD,EAAE,CAAC,CAAC,IApBC,CAAI,YAAC,CAAY,CAAC,CAAA;YAqBrB,IAAI,CApBC,YAAC,CAAY,KAAC,CAAK,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,EAAE,gBAAA,CAAiB,CAAC;QAqB/D,CAAC;QAED,MAAM,CApBC,IAAI,eAAA,CAAgB,cAAC,CAAc,QAAC,EAAS,IAAA,CAAK,OAAC,CAAO,CAAC;IAqBpE,CAAC;IACH;;;;OAIG;IACH,qCAxBG,GAwBH,UAxBG,OAAA,EAAA,OAAA;QAyBC,+CAA+C;QAC/C,IAAM,gBAAgB,CAxBhB,UAAA,GAAa,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,OAAA,CAAQ,UAAC,EAAW,OAAA,CAAQ,CAAC;QA0BpE,EAAE,CAAC,CAAC,IAxBC,CAAI,KAAC,KAAS,YAAA,CAAa,KAAC,CAAK,CAAC,CAAA;YAyBrC,MAAM,CAxBC,IAAI,IAAA,CAAK,aAAC,CAyBb,OAAO,CAxBC,KAAC,EAAM,UAAA,EAAY,OAAA,CAAQ,UAAC,EAAW,OAAA,CAAQ,eAAC,EAyBxD,OAAO,CAxBC,aAAC,CAAa,CAAC;QAyB7B,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,iCA5BG,GA4BH,UA5BG,GAAA,EAAA,OAAA;QA6BC,IAAI,CA5BC,sBAAC,CAAsB,GAAC,CAAG,CAAC;QA8BjC,IAAM,gBAAgB,CA5BhB,QAAA,GAAW,IAAA,CAAK,MAAC,CAAM;QA8B7B,EAAE,CAAC,CAAC,CA5BC,IAAC,CAAI,MAAC,CAAM,CAAC,CAAA;YA6BhB,kFAAkF;YAClF,EAAE,CAAC,CAAC,IA5BC,CAAI,wBAAC,CAAwB,CAAC,CAAA;gBA6BjC,IAAI,CA5BC,WAAC,CAAW,CAAC,GAAC,CAAG,CAAC,CAAC;YA6B1B,CAAC;YACD,IAAI,CA5BC,MAAC,GAAQ,IAAA,CAAK;QA6BrB,CAAC;QAED,IAAM,gBAAgB,CA5BhB,KAAA,GAAQ,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,GAAA,CAAI,KAAC,EAAM,OAAA,CAAQ,CAAC;QA8BtD,EAAE,CAAC,CAAC,IA5BC,CAAI,KAAC,KAAS,YAAA,CAAa,KAAC,CAAK,CAAC,CAAA;YA6BrC,GAAG,GA5BG,IAAI,IAAA,CAAK,SAAC,CA6BZ,GAAG,CA5BC,WAAC,EAAY,GAAA,CAAI,IAAC,EAAK,KAAA,EAAO,GAAA,CAAI,UAAC,EAAW,GAAA,CAAI,qBAAC,CAAqB,CAAC;QA6BnF,CAAC;QAED,IAAI,CA5BC,MAAC,GAAQ,QAAA,CAAS;QA8BvB,MAAM,CA5BC,GAAA,CAAI;IA6Bb,CAAC;IACH;;;;OAIG;IACH,+BAhCG,GAgCH,UAhCG,OAAA,EAAA,OAAA;QAiCC,IAAM,gBAAgB,CAhChB,SAAA,GAAY,iBAAA,CAAkB,OAAC,CAAO,CAAC;QAkC7C,EAAE,CAAC,CAAC,SAhCC,IAAY,IAAA,CAAK,wBAAC,CAAwB,CAAC,CAAA;YAiC9C,IAAI,CAhCC,YAAC,CAAY,OAAC,EAAQ,uDAAA,CAAwD,CAAC;YAiCpF,MAAM,CAAC;QACT,CAAC;QAED,IAAM,gBAAgB,CAhChB,SAAA,GAAY,iBAAA,CAAkB,OAAC,CAAO,CAAC;QAkC7C,EAAE,CAAC,CAAC,SAhCC,IAAY,CAAA,IAAE,CAAI,YAAC,CAAY,CAAC,CAAA;YAiCnC,IAAI,CAhCC,YAAC,CAAY,OAAC,EAAQ,mCAAA,CAAoC,CAAC;YAiChE,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAhCC,IAAC,CAAI,WAAC,IAAc,CAAA,IAAE,CAAI,MAAC,CAAM,CAAC,CAAA;YAiCrC,EAAE,CAAC,CAAC,CAhCC,IAAC,CAAI,YAAC,CAAY,CAAC,CAAA;gBAiCtB,EAAE,CAAC,CAAC,SAhCC,CAAS,CAAC,CAAA;oBAiCb,IAAI,CAhCC,YAAC,GAAc,IAAA,CAAK;oBAiCzB,IAAI,CAhCC,gBAAC,GAAkB,IAAA,CAAK,MAAC,CAAM;oBAiCpC,IAAI,CAhCC,cAAC,GAAgB,EAAA,CAAG;oBAiCzB,IAAI,CAhCC,oBAAC,GAAsB,OAAA,CAAQ,KAAC,CAAK,OAAC,CAAO,2BAAC,EAA4B,EAAA,CAAG,CAAC,IAAC,EAAI,CAAE;oBAiC1F,IAAI,CAhCC,wBAAC,CAAwB,OAAC,CAAO,CAAC;gBAiCzC,CAAC;YACH,CAAC;YAhCC,IAAA,CAAK,CAAA;gBAiCL,EAAE,CAAC,CAAC,SAhCC,CAAS,CAAC,CAAA;oBAiCb,EAAE,CAAC,CAAC,IAhCC,CAAI,MAAC,IAAS,IAAA,CAAK,gBAAC,CAAgB,CAAC,CAAA;wBAiCxC,IAAI,CAhCC,yBAAC,CAAyB,OAAC,EAAQ,IAAA,CAAK,cAAC,CAAc,CAAC;wBAiC7D,IAAI,CAhCC,YAAC,GAAc,KAAA,CAAM;wBAiC1B,IAAM,gBAAgB,CAhChB,OAAA,GAAU,IAAA,CAAK,WAAC,CAAW,IAAC,CAAI,cAAC,EAAe,IAAA,CAAK,oBAAC,CAAoB,CAAC;wBAiCjF,+BAA+B;wBAC/B,IAAM,gBAAgB,CAhChB,KAAA,GAAQ,IAAA,CAAK,iBAAC,CAAiB,OAAC,EAAQ,OAAA,CAAQ,CAAC;wBAiCvD,MAAM,CAhCC,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,KAAA,CAAM,CAAC;oBAiCpC,CAAC;oBAhCC,IAAA,CAAK,CAAA;wBAiCL,IAAI,CAhCC,YAAC,CAAY,OAAC,EAAQ,iDAAA,CAAkD,CAAC;wBAiC9E,MAAM,CAAC;oBACT,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,4BApCG,GAoCH,UApCG,IAAA,EAAA,OAAA;QAqCC,EAAE,CAAC,CAAC,IApCC,CAAI,wBAAC,CAAwB,CAAC,CAAA;YAqCjC,IAAI,CApCC,sBAAC,CAAsB,IAAC,CAAI,CAAC;QAqCpC,CAAC;QACD,MAAM,CApCC,IAAA,CAAK;IAqCd,CAAC;IACH;;;;OAIG;IACH,+BAxCG,GAwCH,UAxCG,EAAA,EAAA,OAAA;QAwCH,iBAmEG;QAlEC,IAAI,CAxCC,sBAAC,CAAsB,EAAC,CAAE,CAAC;QAyChC,IAAI,CAxCC,MAAC,EAAM,CAAE;QAyCd,IAAM,gBAAgB,CAxChB,aAAA,GAAgB,IAAA,CAAK,WAAC,CAAW;QAyCvC,IAAM,gBAAgB,CAxChB,iBAAA,GAAoB,IAAA,CAAK,eAAC,CAAe;QAyC/C,IAAI,gBAAgB,CAxChB,UAAA,GAA0B,EAAA,CAAG;QAyCjC,IAAI,gBAAgB,CAxChB,oBAAgC,CAAE;QA0CtC,WAAW;QACX,qFAAqF;QACrF,iBAAiB;QACjB,IAAM,gBAAgB,CAxChB,QAAA,GAAW,YAAA,CAAa,EAAC,CAAE,CAAC;QAyClC,IAAM,gBAAgB,CAxChB,QAAA,GAAW,QAAA,GAAW,QAAA,CAAS,KAAC,GAAO,EAAA,CAAG;QAyChD,IAAM,gBAAgB,CAxChB,UAAA,GAAa,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,UAAA,GAAC,IAAM,OAAA,EAAA,CAAG,IAAC,KAAQ,GAAA,EAAZ,CAAY,CAAI,IAAI,CAAA,IAAE,CAAI,MAAC;YAyCzE,CAAC,IAxCC,CAAI,wBAAC,CAAwB;QAyCnC,IAAM,gBAAgB,CAxChB,kBAAA,GAAqB,CAAA,iBAAE,IAAoB,UAAA,CAAW;QAyC5D,IAAI,CAxCC,eAAC,GAAiB,iBAAA,IAAqB,UAAA,CAAW;QA0CvD,EAAE,CAAC,CAAC,CAxCC,IAAC,CAAI,wBAAC,IAA2B,CAAA,IAAE,CAAI,MAAC,CAAM,CAAC,CAAA;YAyClD,EAAE,CAAC,CAAC,QAxCC,IAAW,kBAAA,CAAmB,CAAC,CAAA;gBAyClC,IAAI,CAxCC,WAAC,GAAa,IAAA,CAAK;gBAyCxB,IAAM,gBAAgB,CAxChB,OAAA,GAAU,IAAA,CAAK,WAAC,CAAW,EAAC,CAAE,QAAC,EAAS,QAAA,CAAS,CAAC;gBAyCxD,oBAAoB,GAxCG,IAAA,CAAK,iBAAC,CAAiB,EAAC,EAAG,OAAA,CAAQ,CAAC;YAyC7D,CAAC;YAED,EAAE,CAAC,CAAC,IAxCC,CAAI,KAAC,IAAQ,YAAA,CAAa,OAAC,CAAO,CAAC,CAAA;gBAyCtC,IAAM,gBAAgB,CAxChB,cAAA,GAAiB,QAAA,IAAY,kBAAA,CAAmB;gBAyCtD,EAAE,CAAC,CAAC,cAxCC,CAAc;oBAAC,IAAA,CAAK,wBAAC,CAAwB,EAAC,CAAE,CAAC;gBAyCtD,IAAI,CAxCC,QAAC,CAAQ,IAAC,EAAK,EAAA,CAAG,QAAC,CAAQ,CAAC;gBAyCjC,EAAE,CAAC,CAAC,cAxCC,CAAc;oBAAC,IAAA,CAAK,yBAAC,CAAyB,EAAC,EAAG,EAAA,CAAG,QAAC,CAAQ,CAAC;YAyCtE,CAAC;QACH,CAAC;QAxCC,IAAA,CAAK,CAAA;YAyCL,EAAE,CAAC,CAAC,QAxCC,IAAW,kBAAA,CAAmB,CAAC,CAAA;gBAyClC,IAAI,CAxCC,YAAC,CAyCF,EAAE,EAxCE,yEAAA,CAA0E,CAAC;YAyCrF,CAAC;YAED,EAAE,CAAC,CAAC,IAxCC,CAAI,KAAC,IAAQ,YAAA,CAAa,OAAC,CAAO,CAAC,CAAA;gBAyCtC,0CAA0C;gBAC1C,IAAI,CAxCC,QAAC,CAAQ,IAAC,EAAK,EAAA,CAAG,QAAC,CAAQ,CAAC;YAyCnC,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,IAxCC,CAAI,KAAC,KAAS,YAAA,CAAa,KAAC,CAAK,CAAC,CAAA;YAyCrC,IAAM,gBAAgB,CAxChB,UAAA,GAAa,oBAAA,IAAwB,EAAA,CAAG,QAAC,CAAQ;YAyCvD,UAAU,CAxCC,OAAC,CAAO,UAAA,KAAC;gBAyClB,IAAM,gBAAgB,CAxChB,OAAA,GAAU,KAAA,CAAM,KAAC,CAAK,KAAC,EAAK,OAAA,CAAQ,CAAC;gBAyC3C,EAAE,CAAC,CAAC,OAxCC,IAAU,CAAA,KAAE,CAAI,wBAAC,CAAwB,CAAC,CAAA;oBAyC7C,0EAA0E;oBAC1E,yFAAyF;oBACzF,UAAU,GAxCG,UAAA,CAAW,MAAC,CAAM,OAAC,CAAO,CAAC;gBAyC1C,CAAC;YACH,CAAC,CAxCC,CAAC;QAyCL,CAAC;QAED,IAAI,CAxCC,kBAAC,CAAkB,EAAC,CAAE,CAAC;QA0C5B,IAAI,CAxCC,MAAC,EAAM,CAAE;QAyCd,IAAI,CAxCC,WAAC,GAAa,aAAA,CAAc;QAyCjC,IAAI,CAxCC,eAAC,GAAiB,iBAAA,CAAkB;QA0CzC,EAAE,CAAC,CAAC,IAxCC,CAAI,KAAC,KAAS,YAAA,CAAa,KAAC,CAAK,CAAC,CAAA;YAyCrC,IAAM,gBAAgB,CAxChB,eAAA,GAAkB,IAAA,CAAK,oBAAC,CAAoB,EAAC,CAAE,CAAC;YAyCtD,MAAM,CAxCC,IAAI,IAAA,CAAK,OAAC,CAyCb,EAAE,CAxCC,IAAC,EAAK,eAAA,EAAiB,UAAA,EAAY,EAAA,CAAG,UAAC,EAAW,EAAA,CAAG,eAAC,EAyCzD,EAAE,CAxCC,aAAC,CAAa,CAAC;QAyCxB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,iCA5CG,GA4CH,UA5CG,SAAA,EAAA,OAAA;QA6CC,MA5CM,IAAI,KAAA,CAAM,kBAAC,CAAkB,CAAC;IA6CtC,CAAC;IACH;;;;OAIG;IA/CA,wBAAA,GAgDH,UAhDG,IAAA,EAAA,mBAAA;QAiDC,IAAI,CAhDC,KAAC,GAAO,IAAA,CAAK;QAiDlB,IAAI,CAhDC,YAAC,GAAc,KAAA,CAAM;QAiD1B,IAAI,CAhDC,WAAC,GAAa,KAAA,CAAM;QAiDzB,IAAI,CAhDC,MAAC,GAAQ,CAAA,CAAE;QAiDhB,IAAI,CAhDC,MAAC,GAAQ,KAAA,CAAM;QAiDpB,IAAI,CAhDC,uBAAC,GAAyB,KAAK,CAAA,CAAE;QAiDtC,IAAI,CAhDC,OAAC,GAAS,EAAA,CAAG;QAiDlB,IAAI,CAhDC,SAAC,GAAW,EAAA,CAAG;QAiDpB,IAAI,CAhDC,eAAC,GAAiB,KAAA,CAAM;QAiD7B,IAAI,CAhDC,kBAAC,GAAoB,wBAAA,CAAyB,mBAAC,CAAmB,CAAC;IAiD1E,CAAC;IACH;;;OAGG;IAjDA,qCAAA,GAkDH,UAlDG,EAAA;QAkDH,iBAgBG;QAfC,IAAM,gBAAgB,CAlDhB,uBAAA,GAAiD,EAAA,CAAG;QAmD1D,IAAM,gBAAgB,CAlDhB,iBAAA,GAA8B,IAAA,CAAK,cAAC,CAAc,EAAC,CAAE,IAAC,CAAI,IAAI,EAAA,CAAG;QAoDvE,EAAE,CAlDC,KAAC,CAAK,MAAC,CAAM,UAAA,IAAC,IAAO,OAAA,IAAA,CAAK,IAAC,CAAI,UAAC,CAAU,iBAAC,CAAiB,EAAvC,CAAuC,CAAC;aAmD3D,OAlDC,CAmDE,UAAA,IAAI,IAlDI,OAAA,uBAAA,CAAwB,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,iBAAC,CAAiB,MAAC,CAAM,CAAC;YAmDtE,IAAI,CAlDC,KAAC,EADF,CACE,CAAK,CAAC;QAoDxB,EAAE,CAlDC,KAAC,CAAK,OAAC,CAAO,UAAA,IAAC;YAmDhB,EAAE,CAAC,CAAC,IAlDC,CAAI,IAAC,IAAO,uBAAA,CAAwB,CAAC,CAAA;gBAmDxC,KAAI,CAlDC,WAAC,CAAW,CAAC,IAAC,CAAI,EAAE,uBAAA,CAAwB,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;YAmD/D,CAAC;YAlDC,IAAA,CAAK,EAAA,CAAA,CAAA,iBAAK,CAAiB,IAAC,CAAI,UAAA,IAAC,IAAO,OAAA,IAAA,CAAK,IAAC,KAAQ,IAAA,EAAd,CAAc,CAAK,CAAC,CAAC,CAAA;gBAmD7D,KAAI,CAlDC,WAAC,CAAW,CAAC,IAAC,CAAI,CAAC,CAAC;YAmD3B,CAAC;QACH,CAAC,CAlDC,CAAC;IAmDL,CAAC;IACH;;;;OAIG;IApDA,8BAAA,GAqDH,UArDG,GAAA,EAAA,OAAA;QAsDC,EAAE,CAAC,CAAC,GArDC,CAAG,MAAC,IAAS,CAAA;YAsDd,GAAG,CArDC,MAAC,IAAS,CAAA,IAAK,GAAA,CAAI,CAAC,CAAC,YAAY,IAAA,CAAK,SAAC,IAAY,CAAA,CAAE,CAAgB,GAAC,CAAG,CAAC,CAAC,CAAA,CAAC,CAAC,KAAC,CAAK,CAAC,CAAA;YAsD1F,+BAA+B;YAC/B,MAAM,CAAC;QACT,CAAC;QAED,IAAA,+BArD6D,EAAvD,oBAAE,EAAQ,4BAAA,EAAa,UAAA,CAAiC;QAsD9D,IAAM,gBAAgB,CArDhB,OAAA,GAAU,IAAA,CAAK,kBAAC,CAAkB,GAAC,EAAI,OAAA,EAAS,WAAA,EAAa,EAAA,CAAG,CAAC;QAsDvE,IAAI,CArDC,SAAC,CAAS,IAAC,CAAI,OAAC,CAAO,CAAC;QAsD7B,MAAM,CArDC,OAAA,CAAQ;IAsDjB,CAAC;IACH;;;;OAIG;IArDA,oCAAA,GAsDH,UAtDG,EAAA,EAAA,OAAA;QAuDC,EAAE,CAAC,CAAC,OAtDC,IAAU,IAAA,CAAK,KAAC,KAAS,YAAA,CAAa,KAAC,CAAK,CAAC,CAAA;YAuDhD,IAAM,gBAAgB,CAtDhB,KAAA,GAAQ,IAAA,CAAK,aAAC,CAAa,GAAC,CAAG,OAAC,CAAO,CAAC;YAwD9C,EAAE,CAAC,CAAC,KAtDC,CAAK,CAAC,CAAA;gBAuDT,MAAM,CAtDC,KAAA,CAAM;YAuDf,CAAC;YAED,IAAI,CAtDC,YAAC,CAuDF,EAAE,EAtDE,8CAAA,IAA4C,CAAI,aAAC,CAAa,MAAC,CAAM,OAAC,CAAO,OAAC,CAAG,CAAC;QAuD5F,CAAC;QAED,MAAM,CAtDC,EAAA,CAAG;IAuDZ,CAAC;IACH;;;OAGG;IAvDA,uCAAA,GAwDH,UAxDG,EAAA;QAwDH,iBA6CG;QA5CC,IAAM,gBAAgB,CAxDhB,UAAA,GAAa,EAAA,CAAG,KAAC,CAAK;QAyD5B,IAAM,gBAAgB,CAxDhB,qBAAA,GAAkD,EAAA,CAAG;QA0D3D,UAAU,CAxDC,OAAC,CAAO,UAAA,IAAC;YAyDlB,EAAE,CAAC,CAAC,IAxDC,CAAI,IAAC,CAAI,UAAC,CAAU,iBAAC,CAAiB,CAAC,CAAC,CAAA;gBAyD3C,qBAAqB,CAxDC,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,iBAAC,CAAiB,MAAC,CAAM,CAAC;oBAyD5D,iBAAiB,CAxDC,IAAC,CAAI,KAAC,CAAK,CAAC,OAAC,CAAO;YAyD5C,CAAC;QACH,CAAC,CAxDC,CAAC;QA0DH,IAAM,gBAAgB,CAxDhB,oBAAA,GAAyC,EAAA,CAAG;QA0DlD,UAAU,CAxDC,OAAC,CAAO,UAAC,IAAC;YAyDnB,EAAE,CAAC,CAAC,IAxDC,CAAI,IAAC,KAAQ,UAAA,IAAc,IAAA,CAAK,IAAC,CAAI,UAAC,CAAU,iBAAC,CAAiB,CAAC,CAAC,CAAA;gBAyDvE,iCAAiC;gBACjC,MAAM,CAAC;YACT,CAAC;YAED,EAAE,CAAC,CAAC,IAxDC,CAAI,KAAC,IAAQ,IAAA,CAAK,KAAC,IAAQ,EAAA,IAAM,qBAAA,CAAsB,cAAC,CAAc,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;gBAyDrF,IAAM,gBAAgB,CAxDhB,OAAA,GAAU,qBAAA,CAAsB,IAAC,CAAI,IAAC,CAAI,CAAC;gBAyDjD,IAAM,gBAAgB,CAxDhB,OAAA,GAAwB,KAAA,CAAK,kBAAC,CAAkB,CAAC,IAAC,CAAI,EAAE,OAAA,EAAS,EAAA,EAAI,EAAA,CAAG,CAAC;gBAyD/E,IAAM,gBAAgB,CAxDhB,KAAA,GAAQ,KAAA,CAAK,aAAC,CAAa,GAAC,CAAG,OAAC,CAAO,CAAC;gBAyD9C,EAAE,CAAC,CAAC,KAxDC,CAAK,CAAC,CAAA;oBAyDT,EAAE,CAAC,CAAC,KAxDC,CAAK,MAAC,IAAS,CAAA,CAAE,CAAC,CAAA;wBAyDrB,oBAAoB,CAxDC,IAAC,CAAI,IAAI,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,IAAC,EAAK,EAAA,EAAI,IAAA,CAAK,UAAC,CAAU,CAAC,CAAC;oBAyDhF,CAAC;oBAxDC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,CAAK,CAAC,CAAC,YAAY,IAAA,CAAK,IAAC,CAAI,CAAC,CAAA;wBAyDxC,IAAM,gBAAgB,CAxDhB,KAAA,GAAQ,CAAA,CAAA,KAAE,CAAK,CAAC,CAAW,CAAA,CAAI,CAAC,KAAC,CAAK;wBAyD5C,oBAAoB,CAxDC,IAAC,CAAI,IAAI,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,IAAC,EAAK,KAAA,EAAO,IAAA,CAAK,UAAC,CAAU,CAAC,CAAC;oBAyDnF,CAAC;oBAxDC,IAAA,CAAK,CAAA;wBAyDL,KAAI,CAxDC,YAAC,CAyDF,EAAE,EACF,4CAAyC,IAxDC,CAAI,IAAC,iBAAI,KAAU,CAAI,aAAC,CAAa,MAAC,CAAM,OAAC,CAAO,QAAC,CAAI,CAAC;oBAyD1G,CAAC;gBACH,CAAC;gBAxDC,IAAA,CAAK,CAAA;oBAyDL,KAAI,CAxDC,YAAC,CAyDF,EAAE,EACF,6CAA0C,IAxDC,CAAI,IAAC,iBAAI,KAAU,CAAI,aAAC,CAAa,MAAC,CAAM,OAAC,CAAO,QAAC,CAAI,CAAC;gBAyD3G,CAAC;YACH,CAAC;YAxDC,IAAA,CAAK,CAAA;gBAyDL,oBAAoB,CAxDC,IAAC,CAAI,IAAC,CAAI,CAAC;YAyDlC,CAAC;QACH,CAAC,CAxDC,CAAC;QA0DH,MAAM,CAxDC,oBAAA,CAAqB;IAyD9B,CAAC;IACH;;;;;;;OAOG;IAvDA,yCAAA,GAwDH,UAxDG,IAAA;QAyDC,EAAE,CAAC,CAAC,IAxDC,CAAI,YAAC,IAAe,CAAA,IAAE,CAAI,MAAC,IAAS,IAAA,CAAK,MAAC,IAAS,IAAA,CAAK,gBAAC,CAAgB,CAAC,CAAA;YAyD7E,IAAI,CAxDC,cAAC,CAAc,IAAC,CAAI,IAAC,CAAI,CAAC;QAyDjC,CAAC;IACH,CAAC;IACH;;;;OAIG;IAxDA,2CAAA,GAyDH,UAzDG,IAAA;QA0DC,EAAE,CAAC,CAAC,IAzDC,CAAI,wBAAC,CAAwB,CAAC,CAAA;YA0DjC,IAAI,CAzDC,YAAC,CAAY,IAAC,EAAK,0BAAA,CAA2B,CAAC;QA0DtD,CAAC;QAzDC,IAAA,CAAK,CAAA;YA0DL,IAAI,CAzDC,uBAAC,GAAyB,IAAA,CAAK,SAAC,CAAS,MAAC,CAAM;QA0DvD,CAAC;IACH,CAAC;IAOH,sBAzDG,8CAAA;QAmDH;;;;;WAKG;aACH;YACI,MAAM,CAzDC,IAAA,CAAK,uBAAC,KAA2B,KAAK,CAAA,CAAE;QA0DjD,CAAC;;;OAAA;IACH;;;;;;;;;;;;;;;;;;OAkBG;IA1DA,4CAAA,GA2DH,UA3DG,IAAA,EAAA,cAAA;QA4DC,EAAE,CAAC,CAAC,CA3DC,IAAC,CAAI,wBAAC,CAAwB,CAAC,CAAA;YA4DlC,IAAI,CA3DC,YAAC,CAAY,IAAC,EAAK,wBAAA,CAAyB,CAAC;YA4DlD,MAAM,CAAC;QACT,CAAC;QAED,IAAM,gBAAgB,CA3DhB,UAAA,GAAa,IAAA,CAAK,uBAAC,CAAuB;QA4DhD,IAAM,gBAAgB,CA3DhB,mBAAA,GAA8B,cAAA,CAAe,MAAC,CA4DhD,UAAC,KA3DO,EAAQ,IAAY,IAAgB,OAAA,KAAA,GAAQ,CAAA,IAAE,YAAe,IAAA,CAAK,OAAC,GAAS,CAAA,GAAI,CAAA,CAAE,EAA9C,CAA8C,EA4D1F,CAAC,CA3DC,CAAC;QA6DP,EAAE,CAAC,CAAC,mBA3DC,IAAsB,CAAA,CAAE,CAAC,CAAA;YA4D5B,GAAG,CAAC,CAAC,IA3DC,gBAAA,CAAG,CAAA,GAAI,IAAA,CAAK,SAAC,CAAS,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,UAAA,EAAY,CAAA,EAAE,EAAG,CAAA;gBA4D5D,IAAM,gBAAgB,CA3DhB,GAAA,GAAM,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC,KAAC,CAAK;gBA4DpC,EAAE,CAAC,CAAC,CA3DC,CAAC,GAAC,CAAG,MAAC,IAAS,CAAA,IAAK,GAAA,CAAI,CAAC,CAAC,YAAY,IAAA,CAAK,IAAC,CAAI,CAAC,CAAC,CAAA;oBA4DrD,IAAI,CA3DC,SAAC,CAAS,MAAC,CAAM,CAAC,EAAE,CAAA,CAAE,CAAC;oBA4D5B,KAAK,CAAC;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,CA3DC,uBAAC,GAAyB,KAAK,CAAA,CAAE;IA4DxC,CAAC;IACH;;;;OAIG;IA9DA,+BAAA,GA+DH,UA/DG,IAAA,EAAA,GAAA;QAgEC,IAAI,CA/DC,OAAC,CAAO,IAAC,CAAI,IAAI,SAAA,CAAU,IAAC,CAAI,UAAC,EAAW,GAAA,CAAI,CAAC,CAAC;IAgEzD,CAAC;IACH,eAAC;AAAD,CArcA,AAqcC,IAAA;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC/B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC;IACnC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC;IAChC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC;IACxC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC;IAClC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACpC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;IAC1B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC;IAC3C,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IACjC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC;IACtC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IACjC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC;AAClC,CAAC;AAED;;;GAGG;AACH,2BAtGC,CAAA;IAuGC,MAAM,CAtGC,CAAA,YAAa,IAAA,CAAK,OAAC,IAAU,CAAA,CAAE,KAAC,IAAQ,CAAA,CAAE,KAAC,CAAK,UAAC,CAAU,MAAC,CAAM,CAAC;AAuG5E,CAAC;AACD;;;GAGG;AACH,2BAzGC,CAAA;IA0GC,MAAM,CAzGC,CAAA,YAAa,IAAA,CAAK,OAAC,IAAU,CAAA,CAAE,KAAC,IAAQ,CAAA,CAAE,KAAC,KAAS,OAAA,CAAQ;AA0GrE,CAAC;AACD;;;GAGG;AACH,sBA5GC,CAAA;IA6GC,MAAM,CA5GC,CAAA,CAAE,KAAC,CAAK,IAAC,CAAI,UAAA,IAAC,IAAO,OAAA,IAAA,CAAK,IAAC,KAAQ,UAAA,EAAd,CAAc,CAAW,IAAI,IAAA,CAAK;AA6GhE,CAAC;AACD;;;GAGG;AACH,2BA/GC,IAAA;IAgHC,EAAE,CAAC,CAAC,CA/GC,IAAC,CAAI;QAAC,MAAA,CAAO,EAAA,OAAE,EAAQ,EAAA,EAAI,WAAA,EAAa,EAAA,EAAI,EAAA,EAAI,EAAA,EAAG,CAAC;IAiHzD,IAAM,gBAAgB,CA/GhB,OAAA,GAAU,IAAA,CAAK,OAAC,CAAO,YAAC,CAAY,CAAC;IAgH3C,IAAM,gBAAgB,CA/GhB,SAAA,GAAY,IAAA,CAAK,OAAC,CAAO,iBAAC,CAAiB,CAAC;IAgHlD,IAAA,oFA9GmF,EAD7E,sBAAE,EAAe,UAAA,CAC6D;IAgHpF,IAAA;;4BA7GwB,EAFlB,eAAE,EAAQ,mBAAA,CAES;IAiHzB,MAAM,CA/GC,EAAA,gBAAE,EAAQ,wBAAA,EAAa,MAAA,EAAG,CAAC;AAgHpC,CAAC","file":"extractor_merger.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../ml_parser/ast';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseTreeResult} from '../ml_parser/parser';\n\nimport * as i18n from './i18n_ast';\nimport {createI18nMessageFactory} from './i18n_parser';\nimport {I18nError} from './parse_util';\nimport {TranslationBundle} from './translation_bundle';\n\nconst /** @type {?} */ _I18N_ATTR = 'i18n';\nconst /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';\nconst /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst /** @type {?} */ MEANING_SEPARATOR = '|';\nconst /** @type {?} */ ID_SEPARATOR = '@@';\n/**\n * Extract translatable messages from an html AST\n * @param {?} nodes\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function extractMessages(\n    nodes: html.Node[], interpolationConfig: InterpolationConfig, implicitTags: string[],\n    implicitAttrs: {[k: string]: string[]}): ExtractionResult {\n  const /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.extract(nodes, interpolationConfig);\n}\n/**\n * @param {?} nodes\n * @param {?} translations\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function mergeTranslations(\n    nodes: html.Node[], translations: TranslationBundle, interpolationConfig: InterpolationConfig,\n    implicitTags: string[], implicitAttrs: {[k: string]: string[]}): ParseTreeResult {\n  const /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\nexport class ExtractionResult {\n/**\n * @param {?} messages\n * @param {?} errors\n */\nconstructor(public messages: i18n.Message[],\npublic errors: I18nError[]) {}\n}\n\nfunction ExtractionResult_tsickle_Closure_declarations() {\n/** @type {?} */\nExtractionResult.prototype.messages;\n/** @type {?} */\nExtractionResult.prototype.errors;\n}\n\ntype _VisitorMode = number;\nlet _VisitorMode: any = {};\n_VisitorMode.Extract = 0;\n_VisitorMode.Merge = 1;\n_VisitorMode[_VisitorMode.Extract] = \"Extract\";\n_VisitorMode[_VisitorMode.Merge] = \"Merge\";\n\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n * \n * \\@internal\n */\nclass _Visitor implements html.Visitor {\nprivate _depth: number;\nprivate _inI18nNode: boolean;\nprivate _inImplicitNode: boolean;\nprivate _inI18nBlock: boolean;\nprivate _blockMeaningAndDesc: string;\nprivate _blockChildren: html.Node[];\nprivate _blockStartDepth: number;\nprivate _inIcu: boolean;\nprivate _msgCountAtSectionStart: number;\nprivate _errors: I18nError[];\nprivate _mode: _VisitorMode;\nprivate _messages: i18n.Message[];\nprivate _translations: TranslationBundle;\nprivate _createI18nMessage:\n      (msg: html.Node[], meaning: string, description: string, id: string) => i18n.Message;\n/**\n * @param {?} _implicitTags\n * @param {?} _implicitAttrs\n */\nconstructor(private _implicitTags: string[],\nprivate _implicitAttrs: {[k: string]: string[]}) {}\n/**\n * Extracts the messages from the tree\n * @param {?} nodes\n * @param {?} interpolationConfig\n * @return {?}\n */\nextract(nodes: html.Node[], interpolationConfig: InterpolationConfig): ExtractionResult {\n    this._init(_VisitorMode.Extract, interpolationConfig);\n\n    nodes.forEach(node => node.visit(this, null));\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ExtractionResult(this._messages, this._errors);\n  }\n/**\n * Returns a tree where all translatable nodes are translated\n * @param {?} nodes\n * @param {?} translations\n * @param {?} interpolationConfig\n * @return {?}\n */\nmerge(\n      nodes: html.Node[], translations: TranslationBundle,\n      interpolationConfig: InterpolationConfig): ParseTreeResult {\n    this._init(_VisitorMode.Merge, interpolationConfig);\n    this._translations = translations;\n\n    // Construct a single fake root element\n    const /** @type {?} */ wrapper = new html.Element('wrapper', [], nodes, null, null, null);\n\n    const /** @type {?} */ translatedNode = wrapper.visit(this, null);\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ParseTreeResult(translatedNode.children, this._errors);\n  }\n/**\n * @param {?} icuCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    // Parse cases for translatable html attributes\n    const /** @type {?} */ expression = html.visitAll(this, icuCase.expression, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      return new html.ExpansionCase(\n          icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan,\n          icuCase.expSourceSpan);\n    }\n  }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(icu: html.Expansion, context: any): html.Expansion {\n    this._mayBeAddBlockChildren(icu);\n\n    const /** @type {?} */ wasInIcu = this._inIcu;\n\n    if (!this._inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this._isInTranslatableSection) {\n        this._addMessage([icu]);\n      }\n      this._inIcu = true;\n    }\n\n    const /** @type {?} */ cases = html.visitAll(this, icu.cases, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      icu = new html.Expansion(\n          icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n    }\n\n    this._inIcu = wasInIcu;\n\n    return icu;\n  }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): any {\n    const /** @type {?} */ isOpening = _isOpeningComment(comment);\n\n    if (isOpening && this._isInTranslatableSection) {\n      this._reportError(comment, 'Could not start a block inside a translatable section');\n      return;\n    }\n\n    const /** @type {?} */ isClosing = _isClosingComment(comment);\n\n    if (isClosing && !this._inI18nBlock) {\n      this._reportError(comment, 'Trying to close an unopened block');\n      return;\n    }\n\n    if (!this._inI18nNode && !this._inIcu) {\n      if (!this._inI18nBlock) {\n        if (isOpening) {\n          this._inI18nBlock = true;\n          this._blockStartDepth = this._depth;\n          this._blockChildren = [];\n          this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n          this._openTranslatableSection(comment);\n        }\n      } else {\n        if (isClosing) {\n          if (this._depth == this._blockStartDepth) {\n            this._closeTranslatableSection(comment, this._blockChildren);\n            this._inI18nBlock = false;\n            const /** @type {?} */ message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n            // merge attributes in sections\n            const /** @type {?} */ nodes = this._translateMessage(comment, message);\n            return html.visitAll(this, nodes);\n          } else {\n            this._reportError(comment, 'I18N blocks should not cross element boundaries');\n            return;\n          }\n        }\n      }\n    }\n  }\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: html.Text, context: any): html.Text {\n    if (this._isInTranslatableSection) {\n      this._mayBeAddBlockChildren(text);\n    }\n    return text;\n  }\n/**\n * @param {?} el\n * @param {?} context\n * @return {?}\n */\nvisitElement(el: html.Element, context: any): html.Element {\n    this._mayBeAddBlockChildren(el);\n    this._depth++;\n    const /** @type {?} */ wasInI18nNode = this._inI18nNode;\n    const /** @type {?} */ wasInImplicitNode = this._inImplicitNode;\n    let /** @type {?} */ childNodes: html.Node[] = [];\n    let /** @type {?} */ translatedChildNodes: html.Node[];\n\n    // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n    const /** @type {?} */ i18nAttr = _getI18nAttr(el);\n    const /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';\n    const /** @type {?} */ isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\n        !this._isInTranslatableSection;\n    const /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this._inImplicitNode = wasInImplicitNode || isImplicit;\n\n    if (!this._isInTranslatableSection && !this._inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._inI18nNode = true;\n        const /** @type {?} */ message = this._addMessage(el.children, i18nMeta);\n        translatedChildNodes = this._translateMessage(el, message);\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        const /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) this._openTranslatableSection(el);\n        html.visitAll(this, el.children);\n        if (isTranslatable) this._closeTranslatableSection(el, el.children);\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(\n            el, 'Could not mark an element as translatable inside a translatable section');\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        html.visitAll(this, el.children);\n      }\n    }\n\n    if (this._mode === _VisitorMode.Merge) {\n      const /** @type {?} */ visitNodes = translatedChildNodes || el.children;\n      visitNodes.forEach(child => {\n        const /** @type {?} */ visited = child.visit(this, context);\n        if (visited && !this._isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n\n    this._visitAttributesOf(el);\n\n    this._depth--;\n    this._inI18nNode = wasInI18nNode;\n    this._inImplicitNode = wasInImplicitNode;\n\n    if (this._mode === _VisitorMode.Merge) {\n      const /** @type {?} */ translatedAttrs = this._translateAttributes(el);\n      return new html.Element(\n          el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan,\n          el.endSourceSpan);\n    }\n  }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): any {\n    throw new Error('unreachable code');\n  }\n/**\n * @param {?} mode\n * @param {?} interpolationConfig\n * @return {?}\n */\nprivate _init(mode: _VisitorMode, interpolationConfig: InterpolationConfig): void {\n    this._mode = mode;\n    this._inI18nBlock = false;\n    this._inI18nNode = false;\n    this._depth = 0;\n    this._inIcu = false;\n    this._msgCountAtSectionStart = void 0;\n    this._errors = [];\n    this._messages = [];\n    this._inImplicitNode = false;\n    this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nprivate _visitAttributesOf(el: html.Element): void {\n    const /** @type {?} */ explicitAttrNameToValue: {[k: string]: string} = {};\n    const /** @type {?} */ implicitAttrNames: string[] = this._implicitAttrs[el.name] || [];\n\n    el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\n        .forEach(\n            attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                attr.value);\n\n    el.attrs.forEach(attr => {\n      if (attr.name in explicitAttrNameToValue) {\n        this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n      } else if (implicitAttrNames.some(name => attr.name === name)) {\n        this._addMessage([attr]);\n      }\n    });\n  }\n/**\n * @param {?} ast\n * @param {?=} msgMeta\n * @return {?}\n */\nprivate _addMessage(ast: html.Node[], msgMeta?: string): i18n.Message {\n    if (ast.length == 0 ||\n        ast.length == 1 && ast[0] instanceof html.Attribute && !( /** @type {?} */((<html.Attribute>ast[0]))).value) {\n      // Do not create empty messages\n      return;\n    }\n\n    const {meaning, description, id} = _parseMessageMeta(msgMeta);\n    const /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);\n    this._messages.push(message);\n    return message;\n  }\n/**\n * @param {?} el\n * @param {?} message\n * @return {?}\n */\nprivate _translateMessage(el: html.Node, message: i18n.Message): html.Node[] {\n    if (message && this._mode === _VisitorMode.Merge) {\n      const /** @type {?} */ nodes = this._translations.get(message);\n\n      if (nodes) {\n        return nodes;\n      }\n\n      this._reportError(\n          el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n    }\n\n    return [];\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nprivate _translateAttributes(el: html.Element): html.Attribute[] {\n    const /** @type {?} */ attributes = el.attrs;\n    const /** @type {?} */ i18nAttributeMeanings: {[name: string]: string} = {};\n\n    attributes.forEach(attr => {\n      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n            _parseMessageMeta(attr.value).meaning;\n      }\n    });\n\n    const /** @type {?} */ translatedAttributes: html.Attribute[] = [];\n\n    attributes.forEach((attr) => {\n      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        // strip i18n specific attributes\n        return;\n      }\n\n      if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {\n        const /** @type {?} */ meaning = i18nAttributeMeanings[attr.name];\n        const /** @type {?} */ message: i18n.Message = this._createI18nMessage([attr], meaning, '', '');\n        const /** @type {?} */ nodes = this._translations.get(message);\n        if (nodes) {\n          if (nodes.length == 0) {\n            translatedAttributes.push(new html.Attribute(attr.name, '', attr.sourceSpan));\n          } else if (nodes[0] instanceof html.Text) {\n            const /** @type {?} */ value = ( /** @type {?} */((nodes[0] as html.Text))).value;\n            translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));\n          } else {\n            this._reportError(\n                el,\n                `Unexpected translation for attribute \"${attr.name}\" (id=\"${this._translations.digest(message)}\")`);\n          }\n        } else {\n          this._reportError(\n              el,\n              `Translation unavailable for attribute \"${attr.name}\" (id=\"${this._translations.digest(message)}\")`);\n        }\n      } else {\n        translatedAttributes.push(attr);\n      }\n    });\n\n    return translatedAttributes;\n  }\n/**\n * Add the node as a child of the block when:\n * - we are in a block,\n * - we are not inside a ICU message (those are handled separately),\n * - the node is a \"direct child\" of the block\n * @param {?} node\n * @return {?}\n */\nprivate _mayBeAddBlockChildren(node: html.Node): void {\n    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n      this._blockChildren.push(node);\n    }\n  }\n/**\n * Marks the start of a section, see `_closeTranslatableSection`\n * @param {?} node\n * @return {?}\n */\nprivate _openTranslatableSection(node: html.Node): void {\n    if (this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section start');\n    } else {\n      this._msgCountAtSectionStart = this._messages.length;\n    }\n  }\n/**\n * A translatable section could be:\n * - the content of translatable element,\n * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n * @return {?}\n */\nprivate get _isInTranslatableSection(): boolean {\n    return this._msgCountAtSectionStart !== void 0;\n  }\n/**\n * Terminates a section.\n * \n * If a section has only one significant children (comments not significant) then we should not\n * keep the message from this children:\n * \n * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n * - one for the <p> content with meaning and description,\n * - another one for the ICU message.\n * \n * In this case the last message is discarded as it contains less information (the AST is\n * otherwise identical).\n * \n * Note that we should still keep messages extracted from attributes inside the section (ie in the\n * ICU message here)\n * @param {?} node\n * @param {?} directChildren\n * @return {?}\n */\nprivate _closeTranslatableSection(node: html.Node, directChildren: html.Node[]): void {\n    if (!this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section end');\n      return;\n    }\n\n    const /** @type {?} */ startIndex = this._msgCountAtSectionStart;\n    const /** @type {?} */ significantChildren: number = directChildren.reduce(\n        (count: number, node: html.Node): number => count + (node instanceof html.Comment ? 0 : 1),\n        0);\n\n    if (significantChildren == 1) {\n      for (let /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {\n        const /** @type {?} */ ast = this._messages[i].nodes;\n        if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {\n          this._messages.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    this._msgCountAtSectionStart = void 0;\n  }\n/**\n * @param {?} node\n * @param {?} msg\n * @return {?}\n */\nprivate _reportError(node: html.Node, msg: string): void {\n    this._errors.push(new I18nError(node.sourceSpan, msg));\n  }\n}\n\nfunction _Visitor_tsickle_Closure_declarations() {\n/** @type {?} */\n_Visitor.prototype._depth;\n/** @type {?} */\n_Visitor.prototype._inI18nNode;\n/** @type {?} */\n_Visitor.prototype._inImplicitNode;\n/** @type {?} */\n_Visitor.prototype._inI18nBlock;\n/** @type {?} */\n_Visitor.prototype._blockMeaningAndDesc;\n/** @type {?} */\n_Visitor.prototype._blockChildren;\n/** @type {?} */\n_Visitor.prototype._blockStartDepth;\n/** @type {?} */\n_Visitor.prototype._inIcu;\n/** @type {?} */\n_Visitor.prototype._msgCountAtSectionStart;\n/** @type {?} */\n_Visitor.prototype._errors;\n/** @type {?} */\n_Visitor.prototype._mode;\n/** @type {?} */\n_Visitor.prototype._messages;\n/** @type {?} */\n_Visitor.prototype._translations;\n/** @type {?} */\n_Visitor.prototype._createI18nMessage;\n/** @type {?} */\n_Visitor.prototype._implicitTags;\n/** @type {?} */\n_Visitor.prototype._implicitAttrs;\n}\n\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isOpeningComment(n: html.Node): boolean {\n  return n instanceof html.Comment && n.value && n.value.startsWith('i18n');\n}\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isClosingComment(n: html.Node): boolean {\n  return n instanceof html.Comment && n.value && n.value === '/i18n';\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction _getI18nAttr(p: html.Element): html.Attribute {\n  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\n/**\n * @param {?} i18n\n * @return {?}\n */\nfunction _parseMessageMeta(i18n: string): {meaning: string, description: string, id: string} {\n  if (!i18n) return {meaning: '', description: '', id: ''};\n\n  const /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\n  const /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\n  const [meaningAndDesc, id] =\n      (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n  const [meaning, description] = (descIndex > -1) ?\n      [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n      ['', meaningAndDesc];\n\n  return {meaning, description, id};\n}\n"]}
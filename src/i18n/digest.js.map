{"version":3,"sources":["../../../../../modules/@angular/compiler/src/i18n/digest.ts"],"names":[],"mappings":"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","file":"digest.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from './i18n_ast';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message: i18n.Message): string {\n  return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\n * @param {?} message\n * @return {?}\n */\nexport function decimalDigest(message: i18n.Message): string {\n  if (message.id) {\n    return message.id;\n  }\n\n  const /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();\n  const /** @type {?} */ parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n * \n * The visitor is also used in the i18n parser tests\n * \n * \\@internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n/**\n * @param {?} text\n * @param {?} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context: any): any { return text.value; }\n/**\n * @param {?} container\n * @param {?} context\n * @return {?}\n */\nvisitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitIcu(icu: i18n.Icu, context: any): any {\n    const /** @type {?} */ strCases =\n        Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n/**\n * @param {?} ph\n * @param {?} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n/**\n * @param {?} ph\n * @param {?} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst /** @type {?} */ serializerVisitor = new _SerializerVisitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serializeNodes(nodes: i18n.Node[]): string[] {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n * \n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n * \n * \\@internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n/**\n * @param {?} icu\n * @param {?} context\n * @return {?}\n */\nvisitIcu(icu: i18n.Icu, context: any): any {\n    let /** @type {?} */ strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    // Do not take the expression into account\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n}\n/**\n * Compute the SHA1 of the given string\n * \n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n * \n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n * @param {?} str\n * @return {?}\n */\nexport function sha1(str: string): string {\n  const /** @type {?} */ utf8 = utf8Encode(str);\n  const /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\n  const /** @type {?} */ len = utf8.length * 8;\n\n  const /** @type {?} */ w = new Array(80);\n  let [a, b, c, d, e]: number[] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  words32[len >> 5] |= 0x80 << (24 - len % 32);\n  words32[((len + 64 >> 9) << 4) + 15] = len;\n\n  for (let /** @type {?} */ i = 0; i < words32.length; i += 16) {\n    const [h0, h1, h2, h3, h4]: number[] = [a, b, c, d, e];\n\n    for (let /** @type {?} */ j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const [f, k] = fk(j, b, c, d);\n      const /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n    }\n\n    [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n  }\n\n  return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\n/**\n * @param {?} index\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction fk(index: number, b: number, c: number, d: number): [number, number] {\n  if (index < 20) {\n    return [(b & c) | (~b & d), 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n * \n * The output is 64 bit number encoded as a decimal string\n * \n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n * @param {?} str\n * @return {?}\n */\nexport function fingerprint(str: string): [number, number] {\n  const /** @type {?} */ utf8 = utf8Encode(str);\n\n  let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n/**\n * @param {?} msg\n * @param {?} meaning\n * @return {?}\n */\nexport function computeMsgId(msg: string, meaning: string): string {\n  let [hi, lo] = fingerprint(msg);\n\n  if (meaning) {\n    const [him, lom] = fingerprint(meaning);\n    [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);\n  }\n\n  return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n}\n/**\n * @param {?} str\n * @param {?} c\n * @return {?}\n */\nfunction hash32(str: string, c: number): number {\n  let [a, b] = [0x9e3779b9, 0x9e3779b9];\n  let /** @type {?} */ i: number;\n\n  const /** @type {?} */ len = str.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    c = add32(c, wordAt(str, i + 8, Endian.Little));\n    [a, b, c] = mix([a, b, c]);\n  }\n\n  a = add32(a, wordAt(str, i, Endian.Little));\n  b = add32(b, wordAt(str, i + 4, Endian.Little));\n  // the first byte of c is reserved for the length\n  c = add32(c, len);\n  c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n\n  return mix([a, b, c])[2];\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction mix([a, b, c]: [number, number, number]): [number, number, number] {\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 13;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 8;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 13;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 12;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 16;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 5;\n  a = sub32(a, b); a = sub32(a, c); a ^= c >>> 3;\n  b = sub32(b, c); b = sub32(b, a); b ^= a << 10;\n  c = sub32(c, a); c = sub32(c, b); c ^= b >>> 15;\n  return [a, b, c];\n}\ntype Endian = number;\nlet Endian: any = {};\nEndian.Little = 0;\nEndian.Big = 1;\nEndian[Endian.Little] = \"Little\";\nEndian[Endian.Big] = \"Big\";\n\n/**\n * @param {?} str\n * @return {?}\n */\nfunction utf8Encode(str: string): string {\n  let /** @type {?} */ encoded: string = '';\n\n  for (let /** @type {?} */ index = 0; index < str.length; index++) {\n    const /** @type {?} */ codePoint = decodeSurrogatePairs(str, index);\n\n    if (codePoint <= 0x7f) {\n      encoded += String.fromCharCode(codePoint);\n    } else if (codePoint <= 0x7ff) {\n      encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);\n    } else if (codePoint <= 0xffff) {\n      encoded += String.fromCharCode(\n          0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);\n    } else if (codePoint <= 0x1fffff) {\n      encoded += String.fromCharCode(\n          0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f,\n          0x80 | codePoint & 0x3f);\n    }\n  }\n\n  return encoded;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction decodeSurrogatePairs(str: string, index: number): number {\n  if (index < 0 || index >= str.length) {\n    throw new Error(`index=${index} is out of range in \"${str}\"`);\n  }\n\n  const /** @type {?} */ high = str.charCodeAt(index);\n\n  if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {\n    const /** @type {?} */ low = byteAt(str, index + 1);\n    if (low >= 0xdc00 && low <= 0xdfff) {\n      return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;\n    }\n  }\n\n  return high;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32(a: number, b: number): number {\n  return add32to64(a, b)[1];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32to64(a: number, b: number): [number, number] {\n  const /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\n  const /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n/**\n * @param {?} __0\n * @param {?} __1\n * @return {?}\n */\nfunction add64([ah, al]: [number, number], [bh, bl]: [number, number]): [number, number] {\n  const [carry, l] = add32to64(al, bl);\n  const /** @type {?} */ h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sub32(a: number, b: number): number {\n  const /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\n  const /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\n  return (high << 16) | (low & 0xffff);\n}\n/**\n * @param {?} a\n * @param {?} count\n * @return {?}\n */\nfunction rol32(a: number, count: number): number {\n  return (a << count) | (a >>> (32 - count));\n}\n/**\n * @param {?} __0\n * @param {?} count\n * @return {?}\n */\nfunction rol64([hi, lo]: [number, number], count: number): [number, number] {\n  const /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\n  const /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\n  return [h, l];\n}\n/**\n * @param {?} str\n * @param {?} endian\n * @return {?}\n */\nfunction stringToWords32(str: string, endian: Endian): number[] {\n  const /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\n\n  for (let /** @type {?} */ i = 0; i < words32.length; i++) {\n    words32[i] = wordAt(str, i * 4, endian);\n  }\n\n  return words32;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction byteAt(str: string, index: number): number {\n  return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @param {?} endian\n * @return {?}\n */\nfunction wordAt(str: string, index: number, endian: Endian): number {\n  let /** @type {?} */ word = 0;\n  if (endian === Endian.Big) {\n    for (let /** @type {?} */ i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << (24 - 8 * i);\n    }\n  } else {\n    for (let /** @type {?} */ i = 0; i < 4; i++) {\n      word += byteAt(str, index + i) << 8 * i;\n    }\n  }\n  return word;\n}\n/**\n * @param {?} words32\n * @return {?}\n */\nfunction words32ToByteString(words32: number[]): string {\n  return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\n/**\n * @param {?} word\n * @return {?}\n */\nfunction word32ToByteString(word: number): string {\n  let /** @type {?} */ str = '';\n  for (let /** @type {?} */ i = 0; i < 4; i++) {\n    str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n  }\n  return str;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToHexString(str: string): string {\n  let /** @type {?} */ hex: string = '';\n  for (let /** @type {?} */ i = 0; i < str.length; i++) {\n    const /** @type {?} */ b = byteAt(str, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n  return hex.toLowerCase();\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToDecString(str: string): string {\n  let /** @type {?} */ decimal = '';\n  let /** @type {?} */ toThePower = '1';\n\n  for (let /** @type {?} */ i = str.length - 1; i >= 0; i--) {\n    decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n    toThePower = numberTimesBigInt(256, toThePower);\n  }\n\n  return decimal.split('').reverse().join('');\n}\n/**\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction addBigInt(x: string, y: string): string {\n  let /** @type {?} */ sum = '';\n  const /** @type {?} */ len = Math.max(x.length, y.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\n    const /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n    if (tmpSum >= 10) {\n      carry = 1;\n      sum += tmpSum - 10;\n    } else {\n      carry = 0;\n      sum += tmpSum;\n    }\n  }\n\n  return sum;\n}\n/**\n * @param {?} num\n * @param {?} b\n * @return {?}\n */\nfunction numberTimesBigInt(num: number, b: string): string {\n  let /** @type {?} */ product = '';\n  let /** @type {?} */ bToThePower = b;\n  for (; num !== 0; num = num >>> 1) {\n    if (num & 1) product = addBigInt(product, bToThePower);\n    bToThePower = addBigInt(bToThePower, bToThePower);\n  }\n  return product;\n}\n"]}
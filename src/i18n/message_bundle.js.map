{"version":3,"file":"message_bundle.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/message_bundle.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAMI,EAAC,eAAe,EAAC,MAAM,oBAAoB;AAIlD;;GAEG;AACH;IAGE,uBACY,WAAuB,EAAU,aAAuB,EACxD,cAAuC;QADvC,gBAAW,GAAX,WAAW,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAU;QACxD,mBAAc,GAAd,cAAc,CAAyB;QAJ3C,cAAS,GAAc,EAAE,CAAC;IAIoB,CAAC;IAEvD,0CAAkB,GAAlB,UAAmB,IAAY,EAAE,GAAW,EAAE,mBAAwC;QAEpF,IAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;QAEtF,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC;QACjC,CAAC;QAED,IAAM,gBAAgB,GAAG,eAAe,CACpC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAE9F,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC;QACjC,CAAC;QAED,MAAA,IAAI,CAAC,SAAS,EAAC,IAAI,WAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;;IACpD,CAAC;IAED,mCAAW,GAAX,cAA2B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAEnD,6BAAK,GAAL,UAAM,UAAsB,IAAY,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACpF,oBAAC;AAAD,CAAC,AA5BD,IA4BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseError} from '../parse_util';\n\nimport {extractMessages} from './extractor_merger';\nimport {Message} from './i18n_ast';\nimport {Serializer} from './serializers/serializer';\n\n/**\n * A container for message extracted from the templates.\n */\nexport class MessageBundle {\n  private _messages: Message[] = [];\n\n  constructor(\n      private _htmlParser: HtmlParser, private _implicitTags: string[],\n      private _implicitAttrs: {[k: string]: string[]}) {}\n\n  updateFromTemplate(html: string, url: string, interpolationConfig: InterpolationConfig):\n      ParseError[] {\n    const htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const i18nParserResult = extractMessages(\n        htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n  }\n\n  getMessages(): Message[] { return this._messages; }\n\n  write(serializer: Serializer): string { return serializer.write(this._messages); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
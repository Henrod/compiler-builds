{"version":3,"sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/placeholder.ts"],"names":[],"mappings":"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","file":"placeholder.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES: {[k: string]: string} = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n * \n * Returns the same placeholder name when the content is identical.\n * \n * \\@internal\n */\nexport class PlaceholderRegistry {\nprivate _placeHolderNameCounts: {[k: string]: number} = {};\nprivate _signatureToName: {[k: string]: string} = {};\n/**\n * @param {?} tag\n * @param {?} attrs\n * @param {?} isVoid\n * @return {?}\n */\ngetStartTagPlaceholderName(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ upperTag = tag.toUpperCase();\n    const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\ngetCloseTagPlaceholderName(tag: string): string {\n    const /** @type {?} */ signature = this._hashClosingTag(tag);\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ upperTag = tag.toUpperCase();\n    const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n    const /** @type {?} */ name = this._generateUniqueName(`CLOSE_${baseName}`);\n\n    this._signatureToName[signature] = name;\n\n    return name;\n  }\n/**\n * @param {?} name\n * @param {?} content\n * @return {?}\n */\ngetPlaceholderName(name: string, content: string): string {\n    const /** @type {?} */ upperName = name.toUpperCase();\n    const /** @type {?} */ signature = `PH: ${upperName}=${content}`;\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\n    this._signatureToName[signature] = uniqueName;\n\n    return uniqueName;\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetUniquePlaceholder(name: string): string {\n    return this._generateUniqueName(name.toUpperCase());\n  }\n/**\n * @param {?} tag\n * @param {?} attrs\n * @param {?} isVoid\n * @return {?}\n */\nprivate _hashTag(tag: string, attrs: {[k: string]: string}, isVoid: boolean): string {\n    const /** @type {?} */ start = `<${tag}`;\n    const /** @type {?} */ strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n    const /** @type {?} */ end = isVoid ? '/>' : `></${tag}>`;\n\n    return start + strAttrs + end;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _hashClosingTag(tag: string): string { return this._hashTag(`/${tag}`, {}, false); }\n/**\n * @param {?} base\n * @return {?}\n */\nprivate _generateUniqueName(base: string): string {\n    const /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n\n    const /** @type {?} */ id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n}\n\nfunction PlaceholderRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nPlaceholderRegistry.prototype._placeHolderNameCounts;\n/** @type {?} */\nPlaceholderRegistry.prototype._signatureToName;\n}\n\n"]}
{"version":3,"sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/xmb.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,aAAE,EAAa,MAAA,WAAA;OAGf,EAAoB,UAAA,EAAY,uBAAA,EAAwB,MAAA,cAAA;OACxD,KAAK,GAAA,MAAA,cAAA;AAEZ,MAAM,gBAAgB,CAAhB,aAAA,GAAgB,eAAA,CAAgB;AACtC,MAAM,gBAAgB,CAAhB,YAAA,GAAe,KAAA,CAAM;AAC3B,MAAM,gBAAgB,CAAhB,gBAAA,GAAmB,IAAA,CAAK;AAC9B,MAAM,gBAAgB,CAAhB,YAAA,GAAe,IAAA,CAAK;AAE1B,MAAM,gBAAgB,CAAhB,QAAA,GAAW;;;;;;;;;;;;;;;;;;wBAkBO,CAAC;AACzB,yBACC,UAAA;IAAD;;;OAGG;IACH,KAHG,CAAA,QAAA;QAIC,MAAM,gBAAgB,CAHhB,cAAA,GAAiB,IAAI,cAAA,EAAe,CAAE;QAI5C,MAAM,gBAAgB,CAHhB,OAAA,GAAU,IAAI,QAAA,EAAS,CAAE;QAI/B,IAAI,gBAAgB,CAHhB,QAAA,GAAW,IAAI,GAAA,CAAI,GAAC,CAAG,aAAC,CAAa,CAAC;QAK1C,QAAQ,CAHC,OAAC,CAAO,OAAC;YAIhB,MAAM,gBAAgB,CAHhB,KAAA,GAA+B,EAAA,EAAE,EAAG,OAAA,CAAQ,EAAC,EAAE,CAAC;YAKtD,EAAE,CAAC,CAAC,OAHC,CAAO,WAAC,CAAW,CAAC,CAAA;gBAIvB,KAAK,CAHC,MAAC,CAAM,GAAG,OAAA,CAAQ,WAAC,CAAW;YAItC,CAAC;YAED,EAAE,CAAC,CAAC,OAHC,CAAO,OAAC,CAAO,CAAC,CAAA;gBAInB,KAAK,CAHC,SAAC,CAAS,GAAG,OAAA,CAAQ,OAAC,CAAO;YAIrC,CAAC;YAED,QAAQ,CAHC,QAAC,CAAQ,IAAC,CAIf,IAHI,GAAA,CAAI,EAAC,CAAE,CAAC,CAAC,EAAE,IAAI,GAAA,CAAI,GAAC,CAAG,YAAC,EAAa,KAAA,EAAO,OAAA,CAAQ,SAAC,CAAS,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAC;QAIzF,CAAC,CAHC,CAAC;QAKH,QAAQ,CAHC,QAAC,CAAQ,IAAC,CAAI,IAAI,GAAA,CAAI,EAAC,EAAE,CAAE,CAAC;QAKrC,MAAM,CAHC,GAAA,CAAI,SAAC,CAAS;YAInB,IAHI,GAAA,CAAI,WAAC,CAAW,EAAC,OAAC,EAAQ,KAAA,EAAO,QAAA,EAAU,OAAA,EAAQ,CAAC;YAIxD,IAHI,GAAA,CAAI,EAAC,EAAE;YAIX,IAHI,GAAA,CAAI,OAAC,CAAO,aAAC,EAAc,QAAA,CAAS;YAIxC,IAHI,GAAA,CAAI,EAAC,EAAE;YAIX,cAAc,CAHC,kBAAC,CAAkB,QAAC,CAAQ;YAI3C,IAHI,GAAA,CAAI,EAAC,EAAE;SAIZ,CAHC,CAAC;IAIL,CAAC;IACH;;;;OAIG;IACH,IAPG,CAAA,OAAA,EAAA,GAAA;QAQC,MAPM,IAAI,KAAA,CAAM,aAAC,CAAa,CAAC;IAQjC,CAAC;IACH;;;OAGG;IACH,MAVG,CAAA,OAAA,IAAuC,MAAA,CAAO,MAAA,CAAO,OAAC,CAAO,CAAC,CAAC,CAAA;IAWlE;;;OAGG;IACH,gBAZG,CAAA,OAAA;QAaC,MAAM,CAZC,IAAI,uBAAA,CAAwB,OAAC,EAAQ,YAAA,CAAa,CAAC;IAa5D,CAAC;AACH,CAAC;AACD;IACA;;;;OAIG;IACH,SAhBG,CAAA,IAAA,EAAA,OAAA,IAAuD,MAAA,CAAO,CAAA,IAAK,GAAA,CAAI,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAC,CAAC,CAAC,CAAA;IAiB7F;;;;OAIG;IACH,cApBG,CAAA,SAAA,EAAA,OAAA;QAqBC,MAAM,gBAAgB,CApBhB,KAAA,GAAoB,EAAA,CAAG;QAqB7B,SAAS,CApBC,QAAC,CAAQ,OAAC,CAAO,CAAC,IAAY,KAAQ,KAAA,CAAM,IAAC,CAAI,GAAC,IAAG,CAAI,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC;QAqBjF,MAAM,CApBC,KAAA,CAAM;IAqBf,CAAC;IACH;;;;OAIG;IACH,QAxBG,CAAA,GAAA,EAAA,OAAA;QAyBC,MAAM,gBAAgB,CAxBhB,KAAA,GAAQ,CAAA,IAAK,GAAA,CAAI,IAAC,CAAI,IAAC,GAAI,CAAG,qBAAC,KAAqB,GAAK,CAAG,IAAC,IAAI,CAAI,CAAC,CAAC;QA0B7E,MAAM,CAxBC,IAAC,CAAI,GAAC,CAAG,KAAC,CAAK,CAAC,OAAC,CAAO,CAAC,CAAG;YAyBjC,KAAK,CAxBC,IAAC,CAAI,IAAI,GAAA,CAAI,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,EAAE,GAAA,GAAI,CAAG,KAAC,CAAK,CAAC,CAAC,CAAC,KAAC,CAAK,IAAC,CAAI,EAAE,IAAI,GAAA,CAAI,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;QAyBtF,CAAC,CAxBC,CAAC;QA0BH,KAAK,CAxBC,IAAC,CAAI,IAAI,GAAA,CAAI,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC;QA0B9B,MAAM,CAxBC,KAAA,CAAM;IAyBf,CAAC;IACH;;;;OAIG;IACH,mBA5BG,CAAA,EAAA,EAAA,OAAA;QA6BC,MAAM,gBAAgB,CA5BhB,OAAA,GAAU,IAAI,GAAA,CAAI,GAAC,CAAG,YAAC,EAAa,EAAA,EAAI,CAAA,IAAK,GAAA,CAAI,IAAC,CAAI,IAAC,EAAI,CAAE,GAAC,GAAG,CAAG,CAAC,CAAC,CAAC;QA6B7E,MAAM,gBAAgB,CA5BhB,UAAA,GAAa,IAAI,GAAA,CAAI,GAAC,CAAG,gBAAC,EAAiB,EAAA,IAAE,EAAK,EAAA,CAAG,SAAC,EAAS,EAAE,CAAA,OAAE,CAAO,CAAC,CAAC;QA6BlF,EAAE,CAAC,CAAC,EA5BC,CAAE,MAAC,CAAM,CAAC,CAAA;YA6Bb,8CAA8C;YAC9C,MAAM,CA5BC,CAAA,UAAE,CAAU,CAAC;QA6BtB,CAAC;QAED,MAAM,gBAAgB,CA5BhB,OAAA,GAAU,IAAI,GAAA,CAAI,GAAC,CAAG,YAAC,EAAa,EAAA,EAAI,CAAA,IAAK,GAAA,CAAI,IAAC,CAAI,KAAC,EAAK,CAAE,GAAC,GAAG,CAAG,CAAC,CAAC,CAAC;QA6B9E,MAAM,gBAAgB,CA5BhB,UAAA,GAAa,IAAI,GAAA,CAAI,GAAC,CAAG,gBAAC,EAAiB,EAAA,IAAE,EAAK,EAAA,CAAG,SAAC,EAAS,EAAE,CAAA,OAAE,CAAO,CAAC,CAAC;QA8BlF,MAAM,CA5BC,CAAA,UAAE,EAAW,GAAA,IAAI,CAAI,SAAC,CAAS,EAAC,CAAE,QAAC,CAAQ,EAAE,UAAA,CAAW,CAAC;IA6BlE,CAAC;IACH;;;;OAIG;IACH,gBAhCG,CAAA,EAAA,EAAA,OAAA;QAiCC,MAAM,CAhCC,CAAA,IAAK,GAAA,CAAI,GAAC,CAAG,gBAAC,EAAiB,EAAA,IAAE,EAAK,EAAA,CAAG,IAAC,EAAI,CAAC,CAAC,CAAC;IAiC1D,CAAC;IACH;;;;OAIG;IACH,mBApCG,CAAA,EAAA,EAAA,OAAA;QAqCC,MAAM,CApCC,CAAA,IAAK,GAAA,CAAI,GAAC,CAAG,gBAAC,EAAiB,EAAA,IAAE,EAAK,EAAA,CAAG,IAAC,EAAI,CAAC,CAAC,CAAC;IAqC1D,CAAC;IACH;;;OAGG;IACH,SAvCG,CAAA,KAAA;QAwCC,MAAM,CAvCC,EAAA,CAAG,MAAC,CAAM,GAAC,KAAG,CAAK,GAAC,CAAG,IAAC,IAAO,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC;IAwC3D,CAAC;AACH,CAAC;AACD;;;GAGG;AACH,uBA1CC,OAAA;IA2CC,MAAM,CA1CC,aAAA,CAAc,OAAC,CAAO,CAAC;AA2ChC,CAAC;AACD;IACA;;;OAGG;IACH,kBA5CG,CAAA,IAAA;QA6CC,IAAI,CA5CC,KAAC,CAAK,IAAC,CAAI,CAAC;QA6CjB,MAAM,CA5CC,IAAA,CAAK;IA6Cd,CAAC;IACH;;;OAGG;IACH,QA/CG,CAAA,GAAA;QAgDC,EAAE,CAAC,CAAC,GA/CC,CAAG,IAAC,KAAQ,gBAAA,CAAiB,CAAC,CAAA;YAgDjC,EAAE,CAAC,CAAC,CA/CC,GAAC,CAAG,QAAC,IAAW,GAAA,CAAI,QAAC,CAAQ,MAAC,IAAS,CAAA,CAAE,CAAC,CAAA;gBAgD7C,MAAM,gBAAgB,CA/ChB,MAAA,GAAS,IAAI,GAAA,CAAI,IAAC,CAAI,GAAC,CAAG,KAAC,CAAK,MAAC,CAAM,IAAI,KAAA,CAAM,CAAC;gBAgDxD,GAAG,CA/CC,QAAC,GAAU,CAAA,IAAK,GAAA,CAAI,GAAC,CAAG,YAAC,EAAa,EAAA,EAAI,CAAA,MAAE,CAAM,CAAC,CAAC,CAAC;YAgD3D,CAAC;QACH,CAAC;QA/CC,IAAA,CAAK,EAAA,CAAA,CAAA,GAAK,CAAG,QAAC,CAAQ,CAAC,CAAA;YAgDvB,GAAG,CA/CC,QAAC,CAAQ,OAAC,CAAO,IAAC,IAAO,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;QAgDjD,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,SAlDG,CAAA,IAAA,IAA+B,CAAA;IAmDlC;;;OAGG;IACH,gBAtDG,CAAA,IAAA,IAA6C,CAAA;IAuDhD;;;OAGG;IACH,YA1DG,CAAA,OAAA,IAAwC,CAAA;AA2D3C,CAAC;AACD;;;GAGG;AACH,6BA5DC,YAAA;IA6DC,MAAM,CA5DC,YAAA,CAAa,WAAC,EAAW,CAAE,OAAC,CAAO,aAAC,EAAc,GAAA,CAAI,CAAC;AA6DhE,CAAC","file":"xmb.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {decimalDigest} from '../digest';\nimport * as i18n from '../i18n_ast';\n\nimport {PlaceholderMapper, Serializer, SimplePlaceholderMapper} from './serializer';\nimport * as xml from './xml_helper';\n\nconst /** @type {?} */ _MESSAGES_TAG = 'messagebundle';\nconst /** @type {?} */ _MESSAGE_TAG = 'msg';\nconst /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nconst /** @type {?} */ _EXEMPLE_TAG = 'ex';\n\nconst /** @type {?} */ _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\nexport class Xmb extends Serializer {\n/**\n * @param {?} messages\n * @return {?}\n */\nwrite(messages: i18n.Message[]): string {\n    const /** @type {?} */ exampleVisitor = new ExampleVisitor();\n    const /** @type {?} */ visitor = new _Visitor();\n    let /** @type {?} */ rootNode = new xml.Tag(_MESSAGES_TAG);\n\n    messages.forEach(message => {\n      const /** @type {?} */ attrs: {[k: string]: string} = {id: message.id};\n\n      if (message.description) {\n        attrs['desc'] = message.description;\n      }\n\n      if (message.meaning) {\n        attrs['meaning'] = message.meaning;\n      }\n\n      rootNode.children.push(\n          new xml.CR(2), new xml.Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));\n    });\n\n    rootNode.children.push(new xml.CR());\n\n    return xml.serialize([\n      new xml.Declaration({version: '1.0', encoding: 'UTF-8'}),\n      new xml.CR(),\n      new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n      new xml.CR(),\n      exampleVisitor.addDefaultExamples(rootNode),\n      new xml.CR(),\n    ]);\n  }\n/**\n * @param {?} content\n * @param {?} url\n * @return {?}\n */\nload(content: string, url: string): {[msgId: string]: i18n.Node[]} {\n    throw new Error('Unsupported');\n  }\n/**\n * @param {?} message\n * @return {?}\n */\ndigest(message: i18n.Message): string { return digest(message); }\n/**\n * @param {?} message\n * @return {?}\n */\ncreateNameMapper(message: i18n.Message): PlaceholderMapper {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n}\nclass _Visitor implements i18n.Visitor {\n/**\n * @param {?} text\n * @param {?=} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context?: any): xml.Node[] { return [new xml.Text(text.value)]; }\n/**\n * @param {?} container\n * @param {?} context\n * @return {?}\n */\nvisitContainer(container: i18n.Container, context: any): xml.Node[] {\n    const /** @type {?} */ nodes: xml.Node[] = [];\n    container.children.forEach((node: i18n.Node) => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n/**\n * @param {?} icu\n * @param {?=} context\n * @return {?}\n */\nvisitIcu(icu: i18n.Icu, context?: any): xml.Node[] {\n    const /** @type {?} */ nodes = [new xml.Text(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n\n    Object.keys(icu.cases).forEach((c: string) => {\n      nodes.push(new xml.Text(`${c} {`), ...icu.cases[c].visit(this), new xml.Text(`} `));\n    });\n\n    nodes.push(new xml.Text(`}`));\n\n    return nodes;\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): xml.Node[] {\n    const /** @type {?} */ startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`<${ph.tag}>`)]);\n    const /** @type {?} */ startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx]);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n\n    const /** @type {?} */ closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`</${ph.tag}>`)]);\n    const /** @type {?} */ closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx]);\n\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context?: any): xml.Node[] {\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name})];\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): xml.Node[] {\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name})];\n  }\n/**\n * @param {?} nodes\n * @return {?}\n */\nserialize(nodes: i18n.Node[]): xml.Node[] {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message: i18n.Message): string {\n  return decimalDigest(message);\n}\nclass ExampleVisitor implements xml.IVisitor {\n/**\n * @param {?} node\n * @return {?}\n */\naddDefaultExamples(node: xml.Node): xml.Node {\n    node.visit(this);\n    return node;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nvisitTag(tag: xml.Tag): void {\n    if (tag.name === _PLACEHOLDER_TAG) {\n      if (!tag.children || tag.children.length == 0) {\n        const /** @type {?} */ exText = new xml.Text(tag.attrs['name'] || '...');\n        tag.children = [new xml.Tag(_EXEMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n/**\n * @param {?} text\n * @return {?}\n */\nvisitText(text: xml.Text): void {}\n/**\n * @param {?} decl\n * @return {?}\n */\nvisitDeclaration(decl: xml.Declaration): void {}\n/**\n * @param {?} doctype\n * @return {?}\n */\nvisitDoctype(doctype: xml.Doctype): void {}\n}\n/**\n * @param {?} internalName\n * @return {?}\n */\nexport function toPublicName(internalName: string): string {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}"]}
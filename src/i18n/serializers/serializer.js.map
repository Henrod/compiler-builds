{"version":3,"sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,KAAK,IAAA,MAAA,aAAA,CAAA;AACZ;;GAEG;AACH;IAAA;IAyBA,CAAC;IAxBD;;;;OAIG;IACH,0BAJY,GAIZ,UAJY,QAAA,IAAA,CAAA;IAKZ;;;;;OAKG;IACH,yBATY,GASZ,UATY,OAAA,EAAA,GAAA,IAAA,CAAA;IAUZ;;;;OAIG;IACH,2BAbY,GAaZ,UAbY,OAAA,IAAA,CAAA;IAcZ;;;OAGG;IACH,qCAdG,GAcH,UAdG,OAAA,IAA4D,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAe5E,iBAAC;AAAD,CAzBA,AAyBC,IAAA;;AAaD;;GAEG;AACH;IAbC,2CAAA;IAiBD;;;OAGG;IACH,iCAfG,OAA0B,EAAgB,OAA2B;QAexE,YAEI,iBAAO,SAER;QAnB0C,aAAA,GAAA,OAAA,CAA2B;QAL9D,sBAAA,GAA0C,EAAA,CAAG;QAC7C,oBAAA,GAAwC,EAAA,CAAG;QAC3C,sBAAA,GAA0C,EAAA,CAAG;QAqBnD,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,EAAhB,CAAgB,CAAC,CAAC;;IAClD,CAAC;IACH;;;OAGG;IACH,8CAnBG,GAmBH,UAnBG,YAAA;QAoBC,MAAM,CAnBC,IAAA,CAAK,gBAAC,CAAgB,cAAC,CAAc,YAAC,CAAY;YAoBrD,IAAI,CAnBC,gBAAC,CAAgB,YAAC,CAAY;YAoBnC,IAAI,CAnBC;IAoBX,CAAC;IACH;;;OAGG;IACH,gDAtBG,GAsBH,UAtBG,UAAA;QAuBC,MAAM,CAtBC,IAAA,CAAK,gBAAC,CAAgB,cAAC,CAAc,UAAC,CAAU,GAAG,IAAA,CAAK,gBAAC,CAAgB,UAAC,CAAU;YAuBjC,IAAI,CAtBC;IAuBjE,CAAC;IACH;;;;OAIG;IACH,2CA1BG,GA0BH,UA1BG,IAAA,EAAA,OAAA,IAAgD,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA2BhE;;;;OAIG;IACH,qDA9BG,GA8BH,UA9BG,EAAA,EAAA,OAAA;QA+BC,IAAI,CA9BC,oBAAC,CAAoB,EAAC,CAAE,SAAC,CAAS,CAAC;QA+BxC,iBA9BM,mBAAC,YAAmB,EAAC,EAAG,OAAA,CAAQ,CAAC;QA+BvC,IAAI,CA9BC,oBAAC,CAAoB,EAAC,CAAE,SAAC,CAAS,CAAC;IA+B1C,CAAC;IACH;;;;OAIG;IACH,kDAlCG,GAkCH,UAlCG,EAAA,EAAA,OAAA,IAA4D,IAAA,CAAK,oBAAC,CAAoB,EAAC,CAAE,IAAC,CAAI,CAAC,CAAC,CAAA;IAmCnG;;;;OAIG;IACH,qDAtCG,GAsCH,UAtCG,EAAA,EAAA,OAAA;QAuCC,IAAI,CAtCC,oBAAC,CAAoB,EAAC,CAAE,IAAC,CAAI,CAAC;IAuCrC,CAAC;IACH;;;OAGG;IAvCA,sDAAA,GAwCH,UAxCG,YAAA;QAyCC,EAAE,CAAC,CAAC,CAxCC,YAAC,IAAe,IAAA,CAAK,gBAAC,CAAgB,cAAC,CAAc,YAAC,CAAY,CAAC,CAAC,CAAA;YAyCvE,MAAM,CAAC;QACT,CAAC;QAED,IAAI,gBAAgB,CAxChB,UAAA,GAAa,IAAA,CAAK,OAAC,CAAO,YAAC,CAAY,CAAC;QA0C5C,EAAE,CAAC,CAAC,IAxCC,CAAI,gBAAC,CAAgB,cAAC,CAAc,UAAC,CAAU,CAAC,CAAC,CAAA;YAyCpD,iDAAiD;YACjD,IAAM,gBAAgB,CAxChB,MAAA,GAAS,IAAA,CAAK,cAAC,CAAc,UAAC,CAAU,CAAC;YAyC/C,IAAI,CAxCC,cAAC,CAAc,UAAC,CAAU,GAAG,MAAA,GAAS,CAAA,CAAE;YAyC7C,UAAU,GAxCG,UAAI,SAAU,MAAU,CAAE;QAyCzC,CAAC;QAxCC,IAAA,CAAK,CAAA;YAyCL,IAAI,CAxCC,cAAC,CAAc,UAAC,CAAU,GAAG,CAAA,CAAE;QAyCtC,CAAC;QAED,IAAI,CAxCC,gBAAC,CAAgB,YAAC,CAAY,GAAG,UAAA,CAAW;QAyCjD,IAAI,CAxCC,gBAAC,CAAgB,UAAC,CAAU,GAAG,YAAA,CAAa;IAyCnD,CAAC;IACH,8BAAC;AAAD,CAnFA,AAmFC,CAhGA,IAAA,CAAA,cAAA,GAgGA;;AAED;IACA,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACnD,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,cAAc,CAAC;IACjD,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACnD,gBAAgB;IAChB,uBAAuB,CAAC,SAAS,CAAC,OAAO,CAAC;AAC1C,CAAC","file":"serializer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nexport abstract class Serializer {\n/**\n * @abstract\n * @param {?} messages\n * @return {?}\n */\nwrite(messages: i18n.Message[]) {}\n/**\n * @abstract\n * @param {?} content\n * @param {?} url\n * @return {?}\n */\nload(content: string, url: string) {}\n/**\n * @abstract\n * @param {?} message\n * @return {?}\n */\ndigest(message: i18n.Message) {}\n/**\n * @param {?} message\n * @return {?}\n */\ncreateNameMapper(message: i18n.Message): PlaceholderMapper { return null; }\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string;\n\n  toInternalName(publicName: string): string;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\nprivate internalToPublic: {[k: string]: string} = {};\nprivate publicToNextId: {[k: string]: number} = {};\nprivate publicToInternal: {[k: string]: string} = {};\n/**\n * @param {?} message\n * @param {?} mapName\n */\nconstructor(message: i18n.Message,\nprivate mapName: (name: string) => string) {\n    super();\n    message.nodes.forEach(node => node.visit(this));\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\ntoPublicName(internalName: string): string {\n    return this.internalToPublic.hasOwnProperty(internalName) ?\n        this.internalToPublic[internalName] :\n        null;\n  }\n/**\n * @param {?} publicName\n * @return {?}\n */\ntoInternalName(publicName: string): string {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n                                                              null;\n  }\n/**\n * @param {?} text\n * @param {?=} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context?: any): any { return null; }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context?: any): any { this.visitPlaceholderName(ph.name); }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\nprivate visitPlaceholderName(internalName: string): void {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let /** @type {?} */ publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const /** @type {?} */ nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\n\nfunction SimplePlaceholderMapper_tsickle_Closure_declarations() {\n/** @type {?} */\nSimplePlaceholderMapper.prototype.internalToPublic;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToNextId;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToInternal;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.mapName;\n}\n\n"]}
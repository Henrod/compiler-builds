{"version":3,"sources":["../../../../../modules/@angular/compiler/src/ml_parser/parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAA,OAAE,EAAQ,SAAA,EAAU,MAAA,gBAAA;OACpB,EAAA,UAAE,EAAW,eAAA,EAAgB,MAAA,eAAA;OAE7B,KAAK,IAAA,MAAA,OAAA;OACL,EAAA,4BAAE,EAAiD,MAAA,wBAAA;OACnD,KAAK,GAAA,MAAA,SAAA;OACL,EAAgB,WAAA,EAAa,cAAA,EAAe,MAAA,QAAA;AACnD;IACC,6BAAA;IASD;;;;OAIG;IACH,mBATqB,WAAa,EAAQ,IAAM,EAAiB,GAAK;QAAO,kBAAA,IAAA,EAAA,GAAA,CAAA,CAAA;QAAxD,gBAAA,GAAA,WAAA,CAAa;IAA2C,CAAA;IAL7E;;;;;OAKG;IAJA,gBAAA,GAKH,UALG,WAAA,EAAA,IAAA,EAAA,GAAA;QAMC,MAAM,CALC,IAAI,SAAA,CAAU,WAAC,EAAY,IAAA,EAAM,GAAA,CAAI,CAAC;IAM/C,CAAC;IAOH,gBAAC;AAAD,CAhBA,AAgBC,CAfA,UAAA,GAeA;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC;AAChC,CAAC;AAED;IACA;;;OAGG;IACH,yBAlBqB,SAAqB,EAAU,MAAmB;QAAlD,cAAA,GAAA,SAAA,CAAqB;QAAU,WAAA,GAAA,MAAA,CAAmB;IAAE,CAAA;IAoBzE,sBAAC;AAAD,CAPA,AAOC,IAAA;AAED;IACA,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IACpC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AACjC,CAAC;AAED;IACA;;OAEG;IACH,gBA7BqB,gBAAuC;QAAvC,qBAAA,GAAA,gBAAA,CAAuC;IAAc,CAAA;IA8B1E;;;;;;OAMG;IACH,sBAnCG,GAmCH,UACM,MAAc,EAAE,GAAW,EAAE,mBAAoC,EACjE,mBAAuE;QAD1C,mCAAoC,GAApC,2BAAoC;QACjE,mCAAuE,GAAvE,kDAAuE;QACzE,IAAM,gBAAgB,CAnChB,eAAA,GAoCF,GAAG,CAnCC,QAAC,CAAQ,MAAC,EAAO,GAAA,EAAK,IAAA,CAAK,gBAAC,EAAiB,mBAAA,EAAqB,mBAAA,CAAoB,CAAC;QAqC/F,IAAM,gBAAgB,CAnChB,aAAA,GAAgB,IAAI,YAAA,CAAa,eAAC,CAAe,MAAC,EAAO,IAAA,CAAK,gBAAC,CAAgB,CAAC,KAAC,EAAK,CAAE;QAqC9F,MAAM,CAnCC,IAAI,eAAA,CAoCP,aAAa,CAnCC,SAAC,EAoCf,CAAkB,CAnCH,eAAC,CAAe,MAAC,CAAA,CAAM,CAAC,MAAC,CAAM,aAAC,CAAa,MAAC,CAAM,CAAC,CAAC;IAoC3E,CAAC;IACH,aAAC;AAAD,CAxBA,AAwBC,IAAA;AAED;IACA,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC;AAClC,CAAC;AAED;IAMA;;;OAGG;IACH,sBAxCc,MAAkB,EAAW,gBAAuC;QAApE,WAAA,GAAA,MAAA,CAAkB;QAAW,qBAAA,GAAA,gBAAA,CAAuC;QATxE,WAAA,GAAiB,CAAA,CAAE,CAAC;QAGpB,eAAA,GAA0B,EAAA,CAAG;QAC7B,YAAA,GAAuB,EAAA,CAAG;QAE1B,kBAAA,GAAgC,EAAA,CAAG;QA8CzC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IACH;;OAEG;IACH,4BA5CG,GA4CH;QACI,OAAO,IA5CC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,GAAC,EAAI,CAAA;YA6C5C,EAAE,CAAC,CAAC,IA5CC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,cAAC,CAAc,CAAC,CAAA;gBA6CpD,IAAI,CA5CC,gBAAC,CAAgB,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6CzC,CAAC;YA5CC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,SAAC,CAAS,CAAC,CAAA;gBA6CtD,IAAI,CA5CC,cAAC,CAAc,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6CvC,CAAC;YA5CC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,WAAC,CAAW,CAAC,CAAA;gBA6CxD,IAAI,CA5CC,iBAAC,EAAiB,CAAE;gBA6CzB,IAAI,CA5CC,aAAC,CAAa,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6CtC,CAAC;YA5CC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,aAAC,CAAa,CAAC,CAAA;gBA6C1D,IAAI,CA5CC,iBAAC,EAAiB,CAAE;gBA6CzB,IAAI,CA5CC,eAAC,CAAe,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6CxC,CAAC;YA5CC,IAAA,CAAK,EAAA,CAAA,CA6CH,IAAI,CA5CC,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,IAAC,IAAO,IAAA,CAAK,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,QAAC;gBA6C7E,IAAI,CA5CC,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,kBAAC,CAAkB,CAAC,CAAA;gBA6CxD,IAAI,CA5CC,iBAAC,EAAiB,CAAE;gBA6CzB,IAAI,CA5CC,YAAC,CAAY,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6CrC,CAAC;YA5CC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,oBAAC,CAAoB,CAAC,CAAA;gBA6CjE,IAAI,CA5CC,iBAAC,CAAiB,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;YA6C1C,CAAC;YA5CC,IAAA,CAAK,CAAA;gBA6CL,2BAA2B;gBAC3B,IAAI,CA5CC,QAAC,EAAQ,CAAE;YA6ClB,CAAC;QACH,CAAC;QACD,MAAM,CA5CC,IAAI,eAAA,CAAgB,IAAC,CAAI,UAAC,EAAW,IAAA,CAAK,OAAC,CAAO,CAAC;IA6C5D,CAAC;IACH;;OAEG;IA7CA,+BAAA,GA8CH;QACI,IAAM,gBAAgB,CA9ChB,IAAA,GAAO,IAAA,CAAK,KAAC,CAAK;QA+CxB,EAAE,CAAC,CAAC,IA9CC,CAAI,MAAC,GAAQ,IAAA,CAAK,MAAC,CAAM,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA+CxC,gDAAgD;YAChD,IAAI,CA9CC,MAAC,EAAM,CAAE;QA+ChB,CAAC;QACD,IAAI,CA9CC,KAAC,GAAO,IAAA,CAAK,MAAC,CAAM,IAAC,CAAI,MAAC,CAAM,CAAC;QA+CtC,MAAM,CA9CC,IAAA,CAAK;IA+Cd,CAAC;IACH;;;OAGG;IAhDA,iCAAA,GAiDH,UAjDG,IAAA;QAkDC,EAAE,CAAC,CAAC,IAjDC,CAAI,KAAC,CAAK,IAAC,KAAQ,IAAA,CAAK,CAAC,CAAA;YAkD5B,MAAM,CAjDC,IAAA,CAAK,QAAC,EAAQ,CAAE;QAkDzB,CAAC;QACD,MAAM,CAjDC,IAAA,CAAK;IAkDd,CAAC;IACH;;;OAGG;IAnDA,oCAAA,GAoDH,UApDG,UAAA;QAqDC,IAAI,CApDC,YAAC,CAAY,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;QAqDnC,IAAI,CApDC,UAAC,CAAU,GAAC,CAAG,SAAC,CAAS,SAAC,CAAS,CAAC;IAqD3C,CAAC;IACH;;;OAGG;IAtDA,sCAAA,GAuDH,UAvDG,KAAA;QAwDC,IAAM,gBAAgB,CAvDhB,IAAA,GAAO,IAAA,CAAK,UAAC,CAAU,GAAC,CAAG,SAAC,CAAS,QAAC,CAAQ,CAAC;QAwDrD,IAAI,CAvDC,UAAC,CAAU,GAAC,CAAG,SAAC,CAAS,WAAC,CAAW,CAAC;QAwD3C,IAAM,gBAAgB,CAvDhB,KAAA,GAAQ,SAAA,CAAU,IAAC,CAAI,GAAG,IAAA,CAAK,KAAC,CAAK,CAAC,CAAC,CAAC,IAAC,EAAI,GAAI,IAAA,CAAK;QAwD5D,IAAI,CAvDC,YAAC,CAAY,IAAI,IAAA,CAAK,OAAC,CAAO,KAAC,EAAM,KAAA,CAAM,UAAC,CAAU,CAAC,CAAC;IAwD/D,CAAC;IACH;;;OAGG;IAzDA,wCAAA,GA0DH,UA1DG,KAAA;QA2DC,IAAM,gBAAgB,CA1DhB,WAAA,GAAc,IAAA,CAAK,QAAC,EAAQ,CAAE;QA4DpC,IAAM,gBAAgB,CA1DhB,IAAA,GAAO,IAAA,CAAK,QAAC,EAAQ,CAAE;QA2D7B,IAAM,gBAAgB,CA1DhB,KAAA,GAA8B,EAAA,CAAG;QA4DvC,SAAS;QACT,OAAO,IA1DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,oBAAC,EAAqB,CAAA;YA2D7D,IAAM,gBAAgB,CA1DhB,OAAA,GAAU,IAAA,CAAK,mBAAC,EAAmB,CAAE;YA2D3C,EAAE,CAAC,CAAC,CA1DC,OAAC,CAAO;gBAAC,MAAA,CAAA,CAAQ,QAAA;YA2DtB,KAAK,CA1DC,IAAC,CAAI,OAAC,CAAO,CAAC;QA2DtB,CAAC;QAED,mBAAmB;QACnB,EAAE,CAAC,CAAC,IA1DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,kBAAC,CAAkB,CAAC,CAAA;YA2DxD,IAAI,CA1DC,OAAC,CAAO,IAAC,CA2DV,SAAS,CA1DC,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,KAAC,CAAK,UAAC,EAAW,mCAAA,CAAoC,CAAC,CAAC;YA2DxF,MAAM,CAAC;QACT,CAAC;QACD,IAAM,gBAAgB,CA1DhB,UAAA,GAAa,IAAI,eAAA,CAAgB,KAAC,CAAK,UAAC,CAAU,KAAC,EAAM,IAAA,CAAK,KAAC,CAAK,UAAC,CAAU,GAAC,CAAG,CAAC;QA2D1F,IAAI,CA1DC,YAAC,CAAY,IAAI,IAAA,CAAK,SAAC,CA2DxB,WAAW,CA1DC,KAAC,CAAK,CAAC,CAAC,EAAE,IAAA,CAAK,KAAC,CAAK,CAAC,CAAC,EAAE,KAAA,EAAO,UAAA,EAAY,WAAA,CAAY,UAAC,CAAU,CAAC,CAAC;QA4DrF,IAAI,CA1DC,QAAC,EAAQ,CAAE;IA2DlB,CAAC;IACH;;OAEG;IA3DA,0CAAA,GA4DH;QACI,IAAM,gBAAgB,CA5DhB,KAAA,GAAQ,IAAA,CAAK,QAAC,EAAQ,CAAE;QA8D9B,SAAS;QACT,EAAE,CAAC,CAAC,IA5DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,wBAAC,CAAwB,CAAC,CAAA;YA6D9D,IAAI,CA5DC,OAAC,CAAO,IAAC,CA6DV,SAAS,CA5DC,MAAC,CAAM,IAAC,EAAK,IAAA,CAAK,KAAC,CAAK,UAAC,EAAW,mCAAA,CAAoC,CAAC,CAAC;YA6DxF,MAAM,CA5DC,IAAA,CAAK;QA6Dd,CAAC;QAED,eAAe;QACf,IAAM,gBAAgB,CA5DhB,KAAA,GAAQ,IAAA,CAAK,QAAC,EAAQ,CAAE;QA8D9B,IAAM,gBAAgB,CA5DhB,GAAA,GAAM,IAAA,CAAK,0BAAC,CAA0B,KAAC,CAAK,CAAC;QA6DnD,EAAE,CAAC,CAAC,CA5DC,GAAC,CAAG;YAAC,MAAA,CAAO,IAAA,CAAK;QA8DtB,IAAM,gBAAgB,CA5DhB,GAAA,GAAM,IAAA,CAAK,QAAC,EAAQ,CAAE;QA6D5B,GAAG,CA5DC,IAAC,CAAI,IAAI,GAAA,CAAI,KAAC,CAAK,GAAC,CAAG,SAAC,CAAS,GAAC,EAAI,EAAA,EAAI,GAAA,CAAI,UAAC,CAAU,CAAC,CAAC;QA8D/D,sCAAsC;QACtC,IAAM,gBAAgB,CA5DhB,SAAA,GAAY,IAAI,YAAA,CAAa,GAAC,EAAI,IAAA,CAAK,gBAAC,CAAgB,CAAC,KAAC,EAAK,CAAE;QA6DvE,EAAE,CAAC,CAAC,SA5DC,CAAS,MAAC,CAAM,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA6D/B,IAAI,CA5DC,OAAC,GAAS,IAAA,CAAK,OAAC,CAAO,MAAC,CAAM,gBAAA,CAAA,CAAa,SAAC,CAAS,MAAC,CAAA,CAAM,CAAC;YA6DlE,MAAM,CA5DC,IAAA,CAAK;QA6Dd,CAAC;QAED,IAAM,gBAAgB,CA5DhB,UAAA,GAAa,IAAI,eAAA,CAAgB,KAAC,CAAK,UAAC,CAAU,KAAC,EAAM,GAAA,CAAI,UAAC,CAAU,GAAC,CAAG,CAAC;QA6DnF,IAAM,gBAAgB,CA5DhB,aAAA,GAAgB,IAAI,eAAA,CAAgB,KAAC,CAAK,UAAC,CAAU,KAAC,EAAM,GAAA,CAAI,UAAC,CAAU,GAAC,CAAG,CAAC;QA6DtF,MAAM,CA5DC,IAAI,IAAA,CAAK,aAAC,CA6Db,KAAK,CA5DC,KAAC,CAAK,CAAC,CAAC,EAAE,SAAA,CAAU,SAAC,EAAU,UAAA,EAAY,KAAA,CAAM,UAAC,EAAW,aAAA,CAAc,CAAC;IA6DxF,CAAC;IACH;;;OAGG;IA9DA,iDAAA,GA+DH,UA/DG,KAAA;QAgEC,IAAM,gBAAgB,CA/DhB,GAAA,GAAmB,EAAA,CAAG;QAgE5B,IAAM,gBAAgB,CA/DhB,kBAAA,GAAqB,CAAA,GAAE,CAAG,SAAC,CAAS,wBAAC,CAAwB,CAAC;QAiEpE,OAAO,IA/DC,EAAK,CAAA;YAgEX,EAAE,CAAC,CAAC,IA/DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,oBAAC;gBAgEnC,IAAI,CA/DC,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,wBAAC,CAAwB,CAAC,CAAA;gBAgE9D,kBAAkB,CA/DC,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,IAAC,CAAI,CAAC;YAgE3C,CAAC;YAED,EAAE,CAAC,CAAC,IA/DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,sBAAC,CAAsB,CAAC,CAAA;gBAgE5D,EAAE,CAAC,CAAC,WA/DC,CAAW,kBAAC,EAAmB,GAAA,CAAI,SAAC,CAAS,wBAAC,CAAwB,CAAC,CAAC,CAAA;oBAgE3E,kBAAkB,CA/DC,GAAC,EAAG,CAAE;oBAgEzB,EAAE,CAAC,CAAC,kBA/DC,CAAkB,MAAC,IAAS,CAAA,CAAE;wBAAC,MAAA,CAAO,GAAA,CAAI;gBAiEjD,CAAC;gBA/DC,IAAA,CAAK,CAAA;oBAgEL,IAAI,CA/DC,OAAC,CAAO,IAAC,CAgEV,SAAS,CA/DC,MAAC,CAAM,IAAC,EAAK,KAAA,CAAM,UAAC,EAAW,mCAAA,CAAoC,CAAC,CAAC;oBAgEnF,MAAM,CA/DC,IAAA,CAAK;gBAgEd,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,IA/DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,kBAAC,CAAkB,CAAC,CAAA;gBAgExD,EAAE,CAAC,CAAC,WA/DC,CAAW,kBAAC,EAAmB,GAAA,CAAI,SAAC,CAAS,oBAAC,CAAoB,CAAC,CAAC,CAAA;oBAgEvE,kBAAkB,CA/DC,GAAC,EAAG,CAAE;gBAgE3B,CAAC;gBA/DC,IAAA,CAAK,CAAA;oBAgEL,IAAI,CA/DC,OAAC,CAAO,IAAC,CAgEV,SAAS,CA/DC,MAAC,CAAM,IAAC,EAAK,KAAA,CAAM,UAAC,EAAW,mCAAA,CAAoC,CAAC,CAAC;oBAgEnF,MAAM,CA/DC,IAAA,CAAK;gBAgEd,CAAC;YACH,CAAC;YAED,EAAE,CAAC,CAAC,IA/DC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,GAAC,CAAG,CAAC,CAAA;gBAgEzC,IAAI,CA/DC,OAAC,CAAO,IAAC,CAgEV,SAAS,CA/DC,MAAC,CAAM,IAAC,EAAK,KAAA,CAAM,UAAC,EAAW,mCAAA,CAAoC,CAAC,CAAC;gBAgEnF,MAAM,CA/DC,IAAA,CAAK;YAgEd,CAAC;YAED,GAAG,CA/DC,IAAC,CAAI,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC;QAgE5B,CAAC;IACH,CAAC;IACH;;;OAGG;IAjEA,mCAAA,GAkEH,UAlEG,KAAA;QAmEC,IAAI,gBAAgB,CAlEhB,IAAA,GAAO,KAAA,CAAM,KAAC,CAAK,CAAC,CAAC,CAAC;QAmE1B,EAAE,CAAC,CAAC,IAlEC,CAAI,MAAC,GAAQ,CAAA,IAAK,IAAA,CAAK,CAAC,CAAC,IAAI,IAAA,CAAK,CAAC,CAAA;YAmEtC,IAAM,gBAAgB,CAlEhB,QAAA,GAAS,IAAA,CAAK,iBAAC,EAAiB,CAAE;YAmExC,EAAE,CAAC,CAAC,SAlEC,CAAS,QAAC,CAAM,IAAI,QAAA,CAAO,QAAC,CAAQ,MAAC,IAAS,CAAA;gBAmE/C,IAAI,CAlEC,gBAAC,CAAgB,QAAC,CAAM,IAAC,CAAI,CAAC,aAAC,CAAa,CAAC,CAAA;gBAmEpD,IAAI,GAlEG,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC;YAmE3B,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,IAlEC,CAAI,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAmEnB,IAAI,CAlEC,YAAC,CAAY,IAAI,IAAA,CAAK,IAAC,CAAI,IAAC,EAAK,KAAA,CAAM,UAAC,CAAU,CAAC,CAAC;QAmE3D,CAAC;IACH,CAAC;IACH;;OAEG;IAnEA,wCAAA,GAoEH;QACI,EAAE,CAAC,CAAC,IApEC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAqEjC,IAAM,gBAAgB,CApEhB,EAAA,GAAK,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,CAAC;YAsE7D,EAAE,CAAC,CAAC,IApEC,CAAI,gBAAC,CAAgB,EAAC,CAAE,IAAC,CAAI,CAAC,MAAC,CAAM,CAAC,CAAA;gBAqEzC,IAAI,CApEC,aAAC,CAAa,GAAC,EAAG,CAAE;YAqE3B,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;OAGG;IAtEA,uCAAA,GAuEH,UAvEG,aAAA;QAwEC,IAAM,gBAAgB,CAvEhB,MAAA,GAAS,aAAA,CAAc,KAAC,CAAK,CAAC,CAAC,CAAC;QAwEtC,IAAM,gBAAgB,CAvEhB,IAAA,GAAO,aAAA,CAAc,KAAC,CAAK,CAAC,CAAC,CAAC;QAwEpC,IAAM,gBAAgB,CAvEhB,KAAA,GAA0B,EAAA,CAAG;QAwEnC,OAAO,IAvEC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,SAAC,EAAU,CAAA;YAwElD,KAAK,CAvEC,IAAC,CAAI,IAAC,CAAI,YAAC,CAAY,IAAC,CAAI,QAAC,EAAQ,CAAE,CAAC,CAAC;QAwEjD,CAAC;QACD,IAAM,gBAAgB,CAvEhB,QAAA,GAAW,IAAA,CAAK,mBAAC,CAAmB,MAAC,EAAO,IAAA,EAAM,IAAA,CAAK,iBAAC,EAAiB,CAAE,CAAC;QAwElF,IAAI,gBAAgB,CAvEhB,WAAA,GAAc,KAAA,CAAM;QAwExB,gDAAgD;QAChD,kDAAkD;QAClD,EAAE,CAAC,CAAC,IAvEC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,iBAAC,CAAiB,CAAC,CAAA;YAwEvD,IAAI,CAvEC,QAAC,EAAQ,CAAE;YAwEhB,WAAW,GAvEG,IAAA,CAAK;YAwEnB,IAAM,gBAAgB,CAvEhB,MAAA,GAAS,IAAA,CAAK,gBAAC,CAAgB,QAAC,CAAQ,CAAC;YAwE/C,EAAE,CAAC,CAAC,CAvEC,CAAC,MAAC,CAAM,YAAC,IAAe,WAAA,CAAY,QAAC,CAAQ,KAAK,IAAA,IAAQ,MAAA,CAAO,MAAC,CAAM,CAAC,CAAC,CAAA;gBAwE7E,IAAI,CAvEC,OAAC,CAAO,IAAC,CAAI,SAAC,CAAS,MAAC,CAwEzB,QAAQ,EAvEE,aAAA,CAAc,UAAC,EAwEzB,yDAAsD,aAvEC,CAAa,KAAC,CAAK,CAAC,CAAC,OAAC,CAAG,CAAC,CAAC;YAwExF,CAAC;QACH,CAAC;QAvEC,IAAA,CAAK,EAAA,CAAA,CAAA,IAAK,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,YAAC,CAAY,CAAC,CAAA;YAwEzD,IAAI,CAvEC,QAAC,EAAQ,CAAE;YAwEhB,WAAW,GAvEG,KAAA,CAAM;QAwEtB,CAAC;QACD,IAAM,gBAAgB,CAvEhB,GAAA,GAAM,IAAA,CAAK,KAAC,CAAK,UAAC,CAAU,KAAC,CAAK;QAwExC,IAAM,gBAAgB,CAvEhB,IAAA,GAAO,IAAI,eAAA,CAAgB,aAAC,CAAa,UAAC,CAAU,KAAC,EAAM,GAAA,CAAI,CAAC;QAwEtE,IAAM,gBAAgB,CAvEhB,EAAA,GAAK,IAAI,IAAA,CAAK,OAAC,CAAO,QAAC,EAAS,KAAA,EAAO,EAAA,EAAI,IAAA,EAAM,IAAA,EAAM,IAAA,CAAK,CAAC;QAwEnE,IAAI,CAvEC,YAAC,CAAY,EAAC,CAAE,CAAC;QAwEtB,EAAE,CAAC,CAAC,WAvEC,CAAW,CAAC,CAAA;YAwEf,IAAI,CAvEC,WAAC,CAAW,QAAC,CAAQ,CAAC;YAwE3B,EAAE,CAvEC,aAAC,GAAe,IAAA,CAAK;QAwE1B,CAAC;IACH,CAAC;IACH;;;OAGG;IAzEA,mCAAA,GA0EH,UA1EG,EAAA;QA2EC,EAAE,CAAC,CAAC,IA1EC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA2EjC,IAAM,gBAAgB,CA1EhB,QAAA,GAAW,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,CAAC;YA2EnE,EAAE,CAAC,CAAC,IA1EC,CAAI,gBAAC,CAAgB,QAAC,CAAQ,IAAC,CAAI,CAAC,eAAC,CAAe,EAAC,CAAE,IAAC,CAAI,CAAC,CAAC,CAAA;gBA2EjE,IAAI,CA1EC,aAAC,CAAa,GAAC,EAAG,CAAE;YA2E3B,CAAC;QACH,CAAC;QAED,IAAM,gBAAgB,CA1EhB,MAAA,GAAS,IAAA,CAAK,gBAAC,CAAgB,EAAC,CAAE,IAAC,CAAI,CAAC;QA2E9C,IAAA,+CA1EqE,EAA/D,kBAAE,EAAO,wBAAA,CAAwD;QA4EvE,EAAE,CAAC,CAAC,MA1EC,IAAS,MAAA,CAAO,kBAAC,CAAkB,MAAC,CAAM,IAAC,CAAI,CAAC,CAAC,CAAA;YA2EpD,IAAM,gBAAgB,CA1EhB,SAAA,GAAY,IAAI,IAAA,CAAK,OAAC,CA2ExB,MAAM,CA1EC,WAAC,EAAY,EAAA,EAAI,EAAA,EAAI,EAAA,CAAG,UAAC,EAAW,EAAA,CAAG,eAAC,EAAgB,EAAA,CAAG,aAAC,CAAa,CAAC;YA2ErF,IAAI,CA1EC,sBAAC,CAAsB,MAAC,EAAO,SAAA,EAAW,SAAA,CAAU,CAAC;QA2E5D,CAAC;QAED,IAAI,CA1EC,YAAC,CAAY,EAAC,CAAE,CAAC;QA2EtB,IAAI,CA1EC,aAAC,CAAa,IAAC,CAAI,EAAC,CAAE,CAAC;IA2E9B,CAAC;IACH;;;OAGG;IA5EA,qCAAA,GA6EH,UA7EG,WAAA;QA8EC,IAAM,gBAAgB,CA7EhB,QAAA,GAAW,IAAA,CAAK,mBAAC,CA8EnB,WAAW,CA7EC,KAAC,CAAK,CAAC,CAAC,EAAE,WAAA,CAAY,KAAC,CAAK,CAAC,CAAC,EAAE,IAAA,CAAK,iBAAC,EAAiB,CAAE,CAAC;QA+E1E,EAAE,CAAC,CAAC,IA7EC,CAAI,iBAAC,EAAiB,CAAE,CAAC,CAAA;YA8E5B,IAAI,CA7EC,iBAAC,EAAiB,CAAE,aAAC,GAAe,WAAA,CAAY,UAAC,CAAU;QA8ElE,CAAC;QAED,EAAE,CAAC,CAAC,IA7EC,CAAI,gBAAC,CAAgB,QAAC,CAAQ,CAAC,MAAC,CAAM,CAAC,CAAA;YA8E1C,IAAI,CA7EC,OAAC,CAAO,IAAC,CAAI,SAAC,CAAS,MAAC,CA8EzB,QAAQ,EA7EE,WAAA,CAAY,UAAC,EA8EvB,0CAAuC,WA7EC,CAAW,KAAC,CAAK,CAAC,CAAC,OAAC,CAAG,CAAC,CAAC;QA8EvE,CAAC;QA7EC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,IAAC,CAAI,WAAC,CAAW,QAAC,CAAQ,CAAC,CAAC,CAAA;YA8EtC,IAAI,CA7EC,OAAC,CAAO,IAAC,CAAI,SAAC,CAAS,MAAC,CA8EzB,QAAQ,EA7EE,WAAA,CAAY,UAAC,EAAW,8BAAA,WAA4B,CAAW,KAAC,CAAK,CAAC,CAAC,OAAC,CAAG,CAAC,CAAC;QA8E7F,CAAC;IACH,CAAC;IACH;;;OAGG;IA/EA,kCAAA,GAgFH,UAhFG,QAAA;QAiFC,GAAG,CAAC,CAAC,IAhFC,gBAAA,CAAG,UAAA,GAAa,IAAA,CAAK,aAAC,CAAa,MAAC,GAAQ,CAAA,EAAG,UAAA,IAAc,CAAA,EAAG,UAAA,EAAW,EAAG,CAAA;YAiFlF,IAAM,gBAAgB,CAhFhB,EAAA,GAAK,IAAA,CAAK,aAAC,CAAa,UAAC,CAAU,CAAC;YAiF1C,EAAE,CAAC,CAAC,EAhFC,CAAE,IAAC,IAAO,QAAA,CAAS,CAAC,CAAA;gBAiFvB,IAAI,CAhFC,aAAC,CAAa,MAAC,CAAM,UAAC,EAAW,IAAA,CAAK,aAAC,CAAa,MAAC,GAAQ,UAAA,CAAW,CAAC;gBAiF9E,MAAM,CAhFC,IAAA,CAAK;YAiFd,CAAC;YAED,EAAE,CAAC,CAAC,CAhFC,IAAC,CAAI,gBAAC,CAAgB,EAAC,CAAE,IAAC,CAAI,CAAC,cAAC,CAAc,CAAC,CAAA;gBAiFlD,MAAM,CAhFC,KAAA,CAAM;YAiFf,CAAC;QACH,CAAC;QACD,MAAM,CAhFC,KAAA,CAAM;IAiFf,CAAC;IACH;;;OAGG;IAlFA,mCAAA,GAmFH,UAnFG,QAAA;QAoFC,IAAM,gBAAgB,CAnFhB,QAAA,GAAW,cAAA,CAAe,QAAC,CAAQ,KAAC,CAAK,CAAC,CAAC,EAAE,QAAA,CAAS,KAAC,CAAK,CAAC,CAAC,CAAC,CAAC;QAoFtE,IAAI,gBAAgB,CAnFhB,GAAA,GAAM,QAAA,CAAS,UAAC,CAAU,GAAC,CAAG;QAoFlC,IAAI,gBAAgB,CAnFhB,KAAA,GAAQ,EAAA,CAAG;QAoFf,IAAI,gBAAgB,CAnFhB,SAAW,CAAgB;QAoF/B,EAAE,CAAC,CAAC,IAnFC,CAAI,KAAC,CAAK,IAAC,KAAQ,GAAA,CAAI,SAAC,CAAS,UAAC,CAAU,CAAC,CAAA;YAoFhD,IAAM,gBAAgB,CAnFhB,UAAA,GAAa,IAAA,CAAK,QAAC,EAAQ,CAAE;YAoFnC,KAAK,GAnFG,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC,CAAC;YAoF5B,GAAG,GAnFG,UAAA,CAAW,UAAC,CAAU,GAAC,CAAG;YAoFhC,SAAS,GAnFG,UAAA,CAAW,UAAC,CAAU;QAoFpC,CAAC;QACD,MAAM,CAnFC,IAAI,IAAA,CAAK,SAAC,CAoFb,QAAQ,EAnFE,KAAA,EAAO,IAAI,eAAA,CAAgB,QAAC,CAAQ,UAAC,CAAU,KAAC,EAAM,GAAA,CAAI,EAAE,SAAA,CAAU,CAAC;IAoFvF,CAAC;IACH;;OAEG;IApFA,wCAAA,GAqFH;QACI,MAAM,CArFC,IAAA,CAAK,aAAC,CAAa,MAAC,GAAQ,CAAA,GAAI,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,GAAG,IAAA,CAAK;IAsFlG,CAAC;IACH;;;;;OAKG;IApFA,0DAAA,GAqFH;QACI,IAAI,gBAAgB,CArFhB,SAAA,GAA0B,IAAA,CAAK;QAuFnC,GAAG,CAAC,CAAC,IArFC,gBAAA,CAAG,CAAA,GAAI,IAAA,CAAK,aAAC,CAAa,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAE,EAAG,CAAA;YAsFvD,EAAE,CAAC,CAAC,IArFC,CAAI,aAAC,CAAa,CAAC,CAAC,CAAC,IAAC,KAAQ,cAAA,CAAe,CAAC,CAAA;gBAsFjD,MAAM,CArFC,EAAA,MAAE,EAAO,IAAA,CAAK,aAAC,CAAa,CAAC,CAAC,EAAE,oBAAA,EAAU,CAAC;YAsFpD,CAAC;YACD,SAAS,GArFG,IAAA,CAAK,aAAC,CAAa,CAAC,CAAC,CAAC;QAsFpC,CAAC;QAED,MAAM,CArFC,EAAA,MAAE,EAAO,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,aAAC,CAAa,MAAC,GAAQ,CAAA,CAAE,EAAE,oBAAA,EAAU,CAAC;IAsFhF,CAAC;IACH;;;OAGG;IAvFA,mCAAA,GAwFH,UAxFG,IAAA;QAyFC,IAAM,gBAAgB,CAxFhB,MAAA,GAAS,IAAA,CAAK,iBAAC,EAAiB,CAAE;QAyFxC,EAAE,CAAC,CAAC,SAxFC,CAAS,MAAC,CAAM,CAAC,CAAC,CAAA;YAyFrB,MAAM,CAxFC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,CAAC;QAyF7B,CAAC;QAxFC,IAAA,CAAK,CAAA;YAyFL,IAAI,CAxFC,UAAC,CAAU,IAAC,CAAI,IAAC,CAAI,CAAC;QAyF7B,CAAC;IACH,CAAC;IACH;;;;;;;;;;OAUG;IA1FA,6CAAA,GA2FH,UACM,MAAoB,EAAE,SAAuB,EAAE,IAAkB;QACnE,EAAE,CAAC,CAAC,CA3FC,SAAC,CAAS,CAAC,CAAA;YA4Fd,IAAI,CA3FC,YAAC,CAAY,IAAC,CAAI,CAAC;YA4FxB,IAAI,CA3FC,aAAC,CAAa,IAAC,CAAI,IAAC,CAAI,CAAC;QA4FhC,CAAC;QA3FC,IAAA,CAAK,CAAA;YA4FL,EAAE,CAAC,CAAC,MA3FC,CAAM,CAAC,CAAA;gBA4FV,0DAA0D;gBAC1D,IAAM,gBAAgB,CA3FhB,KAAA,GAAQ,MAAA,CAAO,QAAC,CAAQ,OAAC,CAAO,SAAC,CAAS,CAAC;gBA4FjD,MAAM,CA3FC,QAAC,CAAQ,KAAC,CAAK,GAAG,IAAA,CAAK;YA4FhC,CAAC;YA3FC,IAAA,CAAK,CAAA;gBA4FL,IAAI,CA3FC,UAAC,CAAU,IAAC,CAAI,IAAC,CAAI,CAAC;YA4F7B,CAAC;YACD,IAAI,CA3FC,QAAC,CAAQ,IAAC,CAAI,SAAC,CAAS,CAAC;YA4F9B,IAAI,CA3FC,aAAC,CAAa,MAAC,CAAM,IAAC,CAAI,aAAC,CAAa,OAAC,CAAO,SAAC,CAAS,EAAE,CAAA,EAAG,IAAA,CAAK,CAAC;QA4F5E,CAAC;IACH,CAAC;IACH;;;;;OAKG;IA/FA,0CAAA,GAgGH,UAhGG,MAAA,EAAA,SAAA,EAAA,aAAA;QAkGC,EAAE,CAAC,CAAC,OAhGC,CAAO,MAAC,CAAM,CAAC,CAAC,CAAA;YAiGnB,MAAM,GAhGG,IAAA,CAAK,gBAAC,CAAgB,SAAC,CAAS,CAAC,uBAAC,CAAuB;YAiGlE,EAAE,CAAC,CAAC,OAhGC,CAAO,MAAC,CAAM,IAAI,SAAA,CAAU,aAAC,CAAa,CAAC,CAAC,CAAA;gBAiG/C,MAAM,GAhGG,WAAA,CAAY,aAAC,CAAa,IAAC,CAAI,CAAC;YAiG3C,CAAC;QACH,CAAC;QAED,MAAM,CAhGC,cAAA,CAAe,MAAC,EAAO,SAAA,CAAU,CAAC;IAiG3C,CAAC;IACH,mBAAC;AAAD,CAraA,AAqaC,IAAA;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC;IAC7B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;IAClC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;IAC/B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;IACrC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC;AACxC,CAAC;AAED;;;;GAIG;AACH,qBAtHC,KAAA,EAAA,OAAA;IAuHC,MAAM,CAtHC,KAAA,CAAM,MAAC,GAAQ,CAAA,IAAK,KAAA,CAAM,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,KAAK,OAAA,CAAQ;AAuHjE,CAAC","file":"parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isBlank, isPresent} from '../facade/lang';\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport * as html from './ast';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation_config';\nimport * as lex from './lexer';\nimport {TagDefinition, getNsPrefix, mergeNsAndName} from './tags';\nexport class TreeError extends ParseError {\n/**\n * @param {?} elementName\n * @param {?} span\n * @param {?} msg\n * @return {?}\n */\nstatic create(elementName: string, span: ParseSourceSpan, msg: string): TreeError {\n    return new TreeError(elementName, span, msg);\n  }\n/**\n * @param {?} elementName\n * @param {?} span\n * @param {?} msg\n */\nconstructor(public elementName: string, span: ParseSourceSpan, msg: string) { super(span, msg); }\n}\n\nfunction TreeError_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeError.prototype.elementName;\n}\n\nexport class ParseTreeResult {\n/**\n * @param {?} rootNodes\n * @param {?} errors\n */\nconstructor(public rootNodes: html.Node[],\npublic errors: ParseError[]) {}\n}\n\nfunction ParseTreeResult_tsickle_Closure_declarations() {\n/** @type {?} */\nParseTreeResult.prototype.rootNodes;\n/** @type {?} */\nParseTreeResult.prototype.errors;\n}\n\nexport class Parser {\n/**\n * @param {?} getTagDefinition\n */\nconstructor(public getTagDefinition: (tagName: string) => TagDefinition) {}\n/**\n * @param {?} source\n * @param {?} url\n * @param {?=} parseExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nparse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    const /** @type {?} */ tokensAndErrors =\n        lex.tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n\n    const /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n\n    return new ParseTreeResult(\n        treeAndErrors.rootNodes,\n        ( /** @type {?} */((<ParseError[]>tokensAndErrors.errors))).concat(treeAndErrors.errors));\n  }\n}\n\nfunction Parser_tsickle_Closure_declarations() {\n/** @type {?} */\nParser.prototype.getTagDefinition;\n}\n\nclass _TreeBuilder {\nprivate _index: number = -1;\nprivate _peek: lex.Token;\nprivate _rootNodes: html.Node[] = [];\nprivate _errors: TreeError[] = [];\nprivate _elementStack: html.Element[] = [];\n/**\n * @param {?} tokens\n * @param {?} getTagDefinition\n */\nconstructor(\nprivate tokens: lex.Token[],\nprivate getTagDefinition: (tagName: string) => TagDefinition) {\n    this._advance();\n  }\n/**\n * @return {?}\n */\nbuild(): ParseTreeResult {\n    while (this._peek.type !== lex.TokenType.EOF) {\n      if (this._peek.type === lex.TokenType.TAG_OPEN_START) {\n        this._consumeStartTag(this._advance());\n      } else if (this._peek.type === lex.TokenType.TAG_CLOSE) {\n        this._consumeEndTag(this._advance());\n      } else if (this._peek.type === lex.TokenType.CDATA_START) {\n        this._closeVoidElement();\n        this._consumeCdata(this._advance());\n      } else if (this._peek.type === lex.TokenType.COMMENT_START) {\n        this._closeVoidElement();\n        this._consumeComment(this._advance());\n      } else if (\n          this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT ||\n          this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {\n        this._closeVoidElement();\n        this._consumeText(this._advance());\n      } else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {\n        this._consumeExpansion(this._advance());\n      } else {\n        // Skip all other tokens...\n        this._advance();\n      }\n    }\n    return new ParseTreeResult(this._rootNodes, this._errors);\n  }\n/**\n * @return {?}\n */\nprivate _advance(): lex.Token {\n    const /** @type {?} */ prev = this._peek;\n    if (this._index < this.tokens.length - 1) {\n      // Note: there is always an EOF token at the end\n      this._index++;\n    }\n    this._peek = this.tokens[this._index];\n    return prev;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nprivate _advanceIf(type: lex.TokenType): lex.Token {\n    if (this._peek.type === type) {\n      return this._advance();\n    }\n    return null;\n  }\n/**\n * @param {?} startToken\n * @return {?}\n */\nprivate _consumeCdata(startToken: lex.Token) {\n    this._consumeText(this._advance());\n    this._advanceIf(lex.TokenType.CDATA_END);\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nprivate _consumeComment(token: lex.Token) {\n    const /** @type {?} */ text = this._advanceIf(lex.TokenType.RAW_TEXT);\n    this._advanceIf(lex.TokenType.COMMENT_END);\n    const /** @type {?} */ value = isPresent(text) ? text.parts[0].trim() : null;\n    this._addToParent(new html.Comment(value, token.sourceSpan));\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nprivate _consumeExpansion(token: lex.Token) {\n    const /** @type {?} */ switchValue = this._advance();\n\n    const /** @type {?} */ type = this._advance();\n    const /** @type {?} */ cases: html.ExpansionCase[] = [];\n\n    // read =\n    while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {\n      const /** @type {?} */ expCase = this._parseExpansionCase();\n      if (!expCase) return;  // error\n      cases.push(expCase);\n    }\n\n    // read the final }\n    if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {\n      this._errors.push(\n          TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n      return;\n    }\n    const /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n    this._addToParent(new html.Expansion(\n        switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n\n    this._advance();\n  }\n/**\n * @return {?}\n */\nprivate _parseExpansionCase(): html.ExpansionCase {\n    const /** @type {?} */ value = this._advance();\n\n    // read {\n    if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {\n      this._errors.push(\n          TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n      return null;\n    }\n\n    // read until }\n    const /** @type {?} */ start = this._advance();\n\n    const /** @type {?} */ exp = this._collectExpansionExpTokens(start);\n    if (!exp) return null;\n\n    const /** @type {?} */ end = this._advance();\n    exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));\n\n    // parse everything in between { and }\n    const /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n    if (parsedExp.errors.length > 0) {\n      this._errors = this._errors.concat( /** @type {?} */((<TreeError[]>parsedExp.errors)));\n      return null;\n    }\n\n    const /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n    const /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n    return new html.ExpansionCase(\n        value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n  }\n/**\n * @param {?} start\n * @return {?}\n */\nprivate _collectExpansionExpTokens(start: lex.Token): lex.Token[] {\n    const /** @type {?} */ exp: lex.Token[] = [];\n    const /** @type {?} */ expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];\n\n    while (true) {\n      if (this._peek.type === lex.TokenType.EXPANSION_FORM_START ||\n          this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {\n        expansionFormStack.push(this._peek.type);\n      }\n\n      if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {\n        if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {\n          expansionFormStack.pop();\n          if (expansionFormStack.length == 0) return exp;\n\n        } else {\n          this._errors.push(\n              TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {\n        if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {\n          expansionFormStack.pop();\n        } else {\n          this._errors.push(\n              TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === lex.TokenType.EOF) {\n        this._errors.push(\n            TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n        return null;\n      }\n\n      exp.push(this._advance());\n    }\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nprivate _consumeText(token: lex.Token) {\n    let /** @type {?} */ text = token.parts[0];\n    if (text.length > 0 && text[0] == '\\n') {\n      const /** @type {?} */ parent = this._getParentElement();\n      if (isPresent(parent) && parent.children.length == 0 &&\n          this.getTagDefinition(parent.name).ignoreFirstLf) {\n        text = text.substring(1);\n      }\n    }\n\n    if (text.length > 0) {\n      this._addToParent(new html.Text(text, token.sourceSpan));\n    }\n  }\n/**\n * @return {?}\n */\nprivate _closeVoidElement(): void {\n    if (this._elementStack.length > 0) {\n      const /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];\n\n      if (this.getTagDefinition(el.name).isVoid) {\n        this._elementStack.pop();\n      }\n    }\n  }\n/**\n * @param {?} startTagToken\n * @return {?}\n */\nprivate _consumeStartTag(startTagToken: lex.Token) {\n    const /** @type {?} */ prefix = startTagToken.parts[0];\n    const /** @type {?} */ name = startTagToken.parts[1];\n    const /** @type {?} */ attrs: html.Attribute[] = [];\n    while (this._peek.type === lex.TokenType.ATTR_NAME) {\n      attrs.push(this._consumeAttr(this._advance()));\n    }\n    const /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());\n    let /** @type {?} */ selfClosing = false;\n    // Note: There could have been a tokenizer error\n    // so that we don't get a token for the end tag...\n    if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {\n      this._advance();\n      selfClosing = true;\n      const /** @type {?} */ tagDef = this.getTagDefinition(fullName);\n      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n        this._errors.push(TreeError.create(\n            fullName, startTagToken.sourceSpan,\n            `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n      }\n    } else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {\n      this._advance();\n      selfClosing = false;\n    }\n    const /** @type {?} */ end = this._peek.sourceSpan.start;\n    const /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n    const /** @type {?} */ el = new html.Element(fullName, attrs, [], span, span, null);\n    this._pushElement(el);\n    if (selfClosing) {\n      this._popElement(fullName);\n      el.endSourceSpan = span;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nprivate _pushElement(el: html.Element) {\n    if (this._elementStack.length > 0) {\n      const /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];\n      if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n        this._elementStack.pop();\n      }\n    }\n\n    const /** @type {?} */ tagDef = this.getTagDefinition(el.name);\n    const {parent, container} = this._getParentElementSkippingContainers();\n\n    if (parent && tagDef.requireExtraParent(parent.name)) {\n      const /** @type {?} */ newParent = new html.Element(\n          tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n      this._insertBeforeContainer(parent, container, newParent);\n    }\n\n    this._addToParent(el);\n    this._elementStack.push(el);\n  }\n/**\n * @param {?} endTagToken\n * @return {?}\n */\nprivate _consumeEndTag(endTagToken: lex.Token) {\n    const /** @type {?} */ fullName = this._getElementFullName(\n        endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n\n    if (this._getParentElement()) {\n      this._getParentElement().endSourceSpan = endTagToken.sourceSpan;\n    }\n\n    if (this.getTagDefinition(fullName).isVoid) {\n      this._errors.push(TreeError.create(\n          fullName, endTagToken.sourceSpan,\n          `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n    } else if (!this._popElement(fullName)) {\n      this._errors.push(TreeError.create(\n          fullName, endTagToken.sourceSpan, `Unexpected closing tag \"${endTagToken.parts[1]}\"`));\n    }\n  }\n/**\n * @param {?} fullName\n * @return {?}\n */\nprivate _popElement(fullName: string): boolean {\n    for (let /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n      const /** @type {?} */ el = this._elementStack[stackIndex];\n      if (el.name == fullName) {\n        this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n        return true;\n      }\n\n      if (!this.getTagDefinition(el.name).closedByParent) {\n        return false;\n      }\n    }\n    return false;\n  }\n/**\n * @param {?} attrName\n * @return {?}\n */\nprivate _consumeAttr(attrName: lex.Token): html.Attribute {\n    const /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n    let /** @type {?} */ end = attrName.sourceSpan.end;\n    let /** @type {?} */ value = '';\n    let /** @type {?} */ valueSpan: ParseSourceSpan;\n    if (this._peek.type === lex.TokenType.ATTR_VALUE) {\n      const /** @type {?} */ valueToken = this._advance();\n      value = valueToken.parts[0];\n      end = valueToken.sourceSpan.end;\n      valueSpan = valueToken.sourceSpan;\n    }\n    return new html.Attribute(\n        fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n  }\n/**\n * @return {?}\n */\nprivate _getParentElement(): html.Element {\n    return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n  }\n/**\n * Returns the parent in the DOM and the container.\n * \n * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n * @return {?}\n */\nprivate _getParentElementSkippingContainers(): {parent: html.Element, container: html.Element} {\n    let /** @type {?} */ container: html.Element = null;\n\n    for (let /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {\n      if (this._elementStack[i].name !== 'ng-container') {\n        return {parent: this._elementStack[i], container};\n      }\n      container = this._elementStack[i];\n    }\n\n    return {parent: this._elementStack[this._elementStack.length - 1], container};\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate _addToParent(node: html.Node) {\n    const /** @type {?} */ parent = this._getParentElement();\n    if (isPresent(parent)) {\n      parent.children.push(node);\n    } else {\n      this._rootNodes.push(node);\n    }\n  }\n/**\n * Insert a node between the parent and the container.\n * When no container is given, the node is appended as a child of the parent.\n * Also updates the element stack accordingly.\n * \n * \\@internal\n * @param {?} parent\n * @param {?} container\n * @param {?} node\n * @return {?}\n */\nprivate _insertBeforeContainer(\n      parent: html.Element, container: html.Element, node: html.Element) {\n    if (!container) {\n      this._addToParent(node);\n      this._elementStack.push(node);\n    } else {\n      if (parent) {\n        // replace the container with the new node in the children\n        const /** @type {?} */ index = parent.children.indexOf(container);\n        parent.children[index] = node;\n      } else {\n        this._rootNodes.push(node);\n      }\n      node.children.push(container);\n      this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n    }\n  }\n/**\n * @param {?} prefix\n * @param {?} localName\n * @param {?} parentElement\n * @return {?}\n */\nprivate _getElementFullName(prefix: string, localName: string, parentElement: html.Element):\n      string {\n    if (isBlank(prefix)) {\n      prefix = this.getTagDefinition(localName).implicitNamespacePrefix;\n      if (isBlank(prefix) && isPresent(parentElement)) {\n        prefix = getNsPrefix(parentElement.name);\n      }\n    }\n\n    return mergeNsAndName(prefix, localName);\n  }\n}\n\nfunction _TreeBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\n_TreeBuilder.prototype._index;\n/** @type {?} */\n_TreeBuilder.prototype._peek;\n/** @type {?} */\n_TreeBuilder.prototype._rootNodes;\n/** @type {?} */\n_TreeBuilder.prototype._errors;\n/** @type {?} */\n_TreeBuilder.prototype._elementStack;\n/** @type {?} */\n_TreeBuilder.prototype.tokens;\n/** @type {?} */\n_TreeBuilder.prototype.getTagDefinition;\n}\n\n/**\n * @param {?} stack\n * @param {?} element\n * @return {?}\n */\nfunction lastOnStack(stack: any[], element: any): boolean {\n  return stack.length > 0 && stack[stack.length - 1] === element;\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/ml_parser/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ParseSourceSpan} from '../parse_util';\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\nexport class Text implements Node {\n/**\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nfunction Text_tsickle_Closure_declarations() {\n/** @type {?} */\nText.prototype.value;\n/** @type {?} */\nText.prototype.sourceSpan;\n}\n\nexport class Expansion implements Node {\n/**\n * @param {?} switchValue\n * @param {?} type\n * @param {?} cases\n * @param {?} sourceSpan\n * @param {?} switchValueSourceSpan\n */\nconstructor(\npublic switchValue: string,\npublic type: string,\npublic cases: ExpansionCase[],\npublic sourceSpan: ParseSourceSpan,\npublic switchValueSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitExpansion(this, context); }\n}\n\nfunction Expansion_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansion.prototype.switchValue;\n/** @type {?} */\nExpansion.prototype.type;\n/** @type {?} */\nExpansion.prototype.cases;\n/** @type {?} */\nExpansion.prototype.sourceSpan;\n/** @type {?} */\nExpansion.prototype.switchValueSourceSpan;\n}\n\nexport class ExpansionCase implements Node {\n/**\n * @param {?} value\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} valueSourceSpan\n * @param {?} expSourceSpan\n */\nconstructor(\npublic value: string,\npublic expression: Node[],\npublic sourceSpan: ParseSourceSpan,\npublic valueSourceSpan: ParseSourceSpan,\npublic expSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitExpansionCase(this, context); }\n}\n\nfunction ExpansionCase_tsickle_Closure_declarations() {\n/** @type {?} */\nExpansionCase.prototype.value;\n/** @type {?} */\nExpansionCase.prototype.expression;\n/** @type {?} */\nExpansionCase.prototype.sourceSpan;\n/** @type {?} */\nExpansionCase.prototype.valueSourceSpan;\n/** @type {?} */\nExpansionCase.prototype.expSourceSpan;\n}\n\nexport class Attribute implements Node {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?=} valueSpan\n */\nconstructor(\npublic name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan,\npublic valueSpan?: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitAttribute(this, context); }\n}\n\nfunction Attribute_tsickle_Closure_declarations() {\n/** @type {?} */\nAttribute.prototype.name;\n/** @type {?} */\nAttribute.prototype.value;\n/** @type {?} */\nAttribute.prototype.sourceSpan;\n/** @type {?} */\nAttribute.prototype.valueSpan;\n}\n\nexport class Element implements Node {\n/**\n * @param {?} name\n * @param {?} attrs\n * @param {?} children\n * @param {?} sourceSpan\n * @param {?} startSourceSpan\n * @param {?} endSourceSpan\n */\nconstructor(\npublic name: string,\npublic attrs: Attribute[],\npublic children: Node[],\npublic sourceSpan: ParseSourceSpan,\npublic startSourceSpan: ParseSourceSpan,\npublic endSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nfunction Element_tsickle_Closure_declarations() {\n/** @type {?} */\nElement.prototype.name;\n/** @type {?} */\nElement.prototype.attrs;\n/** @type {?} */\nElement.prototype.children;\n/** @type {?} */\nElement.prototype.sourceSpan;\n/** @type {?} */\nElement.prototype.startSourceSpan;\n/** @type {?} */\nElement.prototype.endSourceSpan;\n}\n\nexport class Comment implements Node {\n/**\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: Visitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nfunction Comment_tsickle_Closure_declarations() {\n/** @type {?} */\nComment.prototype.value;\n/** @type {?} */\nComment.prototype.sourceSpan;\n}\n\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n/**\n * @param {?} visitor\n * @param {?} nodes\n * @param {?=} context\n * @return {?}\n */\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const /** @type {?} */ result: any[] = [];\n\n  const /** @type {?} */ visit = visitor.visit ?\n      (ast: Node) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n      (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const /** @type {?} */ astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"]}
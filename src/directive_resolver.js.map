{"version":3,"sources":["../../../../modules/@angular/compiler/src/directive_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;AAEH,OAAO,EAAA,SAAE,EAAU,SAAA,EAAW,WAAA,EAAa,YAAA,EAAc,KAAA,EAAO,MAAA,EAAQ,KAAA,EAAa,iBAAA,EAAkB,MAAA,eAAA,CAAA;AAEvG,OAAO,EAAA,WAAE,EAAY,gBAAA,EAAiB,MAAA,qBAAA,CAAA;AACtC,OAAO,EAAA,SAAE,EAAS,MAAA,eAAA,CAAA;AAClB,OAAO,EAAA,kBAAE,EAAkB,MAAA,cAAA,CAAA;AAC3B,OAAO,EAAA,eAAE,EAAgB,SAAA,EAAU,MAAA,uBAAA,CAAA;AACnC,OAAO,EAAA,YAAE,EAAY,MAAA,QAAA,CAAA;AAErB,IAAa,iBAAiB;IAC9B;;OAEG;IACH,2BAKsB,UAA8B;QAA9B,2BAAA,EAAA,sBAA8B;QAA9B,eAAA,GAAA,UAAA,CAA8B;IAAU,CAAA;IAJ9D;;;OAGG;IACH,uCAEG,GAFH,UAEG,IAAA;QADC,IAAM,gBAAgB,CAEhB,YAAA,GAAe,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAD1E,MAAM,CAEC,YAAA,IAAgB,YAAA,CAAa,IAAC,CAAI,mBAAC,CAAmB,CAAC;IADhE,CAAC;IACH;;;;;OAKG;IACH,mCAAG,GAAH,UAAG,IAAA,EAAA,eAAA;QAAA,gCAAA,EAAA,sBAAA;QACC,IAAM,gBAAgB,CAAhB,YAAA,GAAe,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,YAAC,CAAY,CAAC,CAAA;YAChB,IAAM,gBAAgB,CAAhB,QAAA,GAAW,WAAA,CAAY,QAAC,CAAQ,YAAC,EAAa,mBAAA,CAAoB,CAAC;YACzE,EAAE,CAAC,CAAC,QAAC,CAAQ,CAAC,CAAA;gBACZ,IAAM,gBAAgB,CAAhB,gBAAA,GAAmB,IAAA,CAAK,UAAC,CAAU,YAAC,CAAY,IAAC,CAAI,CAAC;gBAC5D,MAAM,CAAC,IAAA,CAAK,0BAAC,CAA0B,QAAC,EAAS,gBAAA,EAAkB,IAAA,CAAK,CAAC;YAC3E,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,eAAC,CAAe,CAAC,CAAA;YACnB,MAAM,IAAI,KAAA,CAAM,sCAAC,SAAoC,CAAS,IAAC,CAAK,CAAE,CAAC;QACzE,CAAC;QAED,MAAM,CAAC,IAAA,CAAK;IACd,CAAC;IACH;;;;;OAKG;IAJA,sDAAA,GAKH,UACM,EAAa,EAAE,gBAAwC,EACvD,aAAwB;QAC1B,IAAM,gBAAgB,CALhB,MAAA,GAAmB,EAAA,CAAG;QAM5B,IAAM,gBAAgB,CALhB,OAAA,GAAoB,EAAA,CAAG;QAM7B,IAAM,gBAAgB,CALhB,IAAA,GAAgC,EAAA,CAAG;QAMzC,IAAM,gBAAgB,CALhB,OAAA,GAAgC,EAAA,CAAG;QAOzC,MAAM,CALC,IAAC,CAAI,gBAAC,CAAgB,CAAC,OAAC,CAAO,UAAC,QAAU;YAM/C,IAAM,gBAAgB,CALhB,KAAA,GAAQ,WAAA,CAAY,QAAC,CAAQ,gBAAC,CAAgB,QAAC,CAAQ,EAAE,UAAA,CAAE,IAAK,OAAA,CAAA,YAAa,KAAA,EAAb,CAAa,CAAM,CAAC;YAM1F,EAAE,CAAC,CAAC,KALC,CAAK,CAAC,CAAA;gBAMT,EAAE,CAAC,CAAC,KALC,CAAK,mBAAC,CAAmB,CAAC,CAAA;oBAM7B,MAAM,CALC,IAAC,CAAK,QAAG,UAAQ,KAAK,CAAK,mBAAoB,CAAE,CAAC;gBAM3D,CAAC;gBALC,IAAA,CAAK,CAAA;oBAML,MAAM,CALC,IAAC,CAAI,QAAC,CAAQ,CAAC;gBAMxB,CAAC;YACH,CAAC;YACD,IAAM,gBAAgB,CALhB,MAAA,GAAS,WAAA,CAAY,QAAC,CAAQ,gBAAC,CAAgB,QAAC,CAAQ,EAAE,UAAA,CAAE,IAAK,OAAA,CAAA,YAAa,MAAA,EAAb,CAAa,CAAO,CAAC;YAM5F,EAAE,CAAC,CAAC,MALC,CAAM,CAAC,CAAA;gBAMV,EAAE,CAAC,CAAC,MALC,CAAM,mBAAC,CAAmB,CAAC,CAAA;oBAM9B,OAAO,CALC,IAAC,CAAK,QAAG,UAAQ,MAAK,CAAM,mBAAoB,CAAE,CAAC;gBAM7D,CAAC;gBALC,IAAA,CAAK,CAAA;oBAML,OAAO,CALC,IAAC,CAAI,QAAC,CAAQ,CAAC;gBAMzB,CAAC;YACH,CAAC;YACD,IAAM,gBAAgB,CALhB,YAAA,GAAe,gBAAA,CAAiB,QAAC,CAAQ,CAAC,MAAC,CAAM,UAAA,CAAC,IAAI,OAAA,CAAA,IAAK,CAAA,YAAa,WAAA,EAAlB,CAAkB,CAAY,CAAC;YAM3F,YAAY,CALC,OAAC,CAAO,UAAA,WAAC;gBAMpB,EAAE,CAAC,CAAC,WALC,CAAW,gBAAC,CAAgB,CAAC,CAAA;oBAMhC,IAAM,gBAAgB,CALhB,SAAA,GAAY,WAAA,CAAY,gBAAC,CAAgB,CAAC,CAAC,CAAC;oBAMlD,EAAE,CAAC,CAAC,SALC,KAAa,GAAA,CAAI,CAAC,CAAA;wBAMrB,MALM,IAAI,KAAA,CAAM,iEAAC,CAAiE,CAAC;oBAMrF,CAAC;oBALC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,KAAa,GAAA,CAAI,CAAC,CAAA;wBAM5B,MALM,IAAI,KAAA,CAMN,qFAAqF,CALC,CAAC;oBAM7F,CAAC;oBACD,IAAI,CALC,MAAC,WAAI,CAAW,gBAAC,MAAgB,CAAG,GAAG,QAAA,CAAS;gBAMvD,CAAC;gBALC,IAAA,CAAK,CAAA;oBAML,IAAI,CALC,MAAC,QAAI,MAAQ,CAAG,GAAG,QAAA,CAAS;gBAMnC,CAAC;YACH,CAAC,CALC,CAAC;YAMH,IAAM,gBAAgB,CALhB,aAAA,GAAgB,gBAAA,CAAiB,QAAC,CAAQ,CAAC,MAAC,CAAM,UAAA,CAAC,IAAI,OAAA,CAAA,IAAK,CAAA,YAAa,YAAA,EAAlB,CAAkB,CAAa,CAAC;YAM7F,aAAa,CALC,OAAC,CAAO,UAAA,YAAC;gBAMrB,IAAM,gBAAgB,CALhB,IAAA,GAAO,YAAA,CAAa,IAAC,IAAO,EAAA,CAAG;gBAMrC,IAAI,CALC,MAAC,YAAI,CAAY,SAAC,MAAS,CAAG,GAAG,QAAI,SAAQ,IAAI,CAAI,IAAC,CAAI,GAAC,CAAG,MAAC,CAAG;YAMzE,CAAC,CALC,CAAC;YAMH,IAAM,gBAAgB,CALhB,KAAA,GAAQ,WAAA,CAAY,QAAC,CAAQ,gBAAC,CAAgB,QAAC,CAAQ,EAAE,UAAA,CAAE,IAAK,OAAA,CAAA,YAAa,KAAA,EAAb,CAAa,CAAM,CAAC;YAM1F,EAAE,CAAC,CAAC,KALC,CAAK,CAAC,CAAA;gBAMT,OAAO,CALC,QAAC,CAAQ,GAAG,KAAA,CAAM;YAM5B,CAAC;QACH,CAAC,CALC,CAAC;QAMH,MAAM,CALC,IAAA,CAAK,MAAC,CAAM,EAAC,EAAG,MAAA,EAAQ,OAAA,EAAS,IAAA,EAAM,OAAA,EAAS,aAAA,CAAc,CAAC;IAMxE,CAAC;IACH;;;OAGG;IAPA,8CAAA,GAQH,UARG,GAAA,IAAyC,MAAA,CAAO,YAAA,CAAa,GAAC,EAAI,CAAA,IAAE,EAAK,GAAA,CAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAC,EAAI,CAAE,CAAC,CAAA;IAS7F;;;OAGG;IAVA,2CAAA,GAWH,UAXG,QAAA;QAYC,IAAM,gBAAgB,CAXhB,KAAA,GAAQ,IAAI,GAAA,EAAW,CAAG;QAYhC,IAAM,gBAAgB,CAXhB,cAAA,GAA2B,EAAA,CAAG;QAYpC,wEAAwE;QACxE,GAAG,CAAC,CAAC,IAXC,gBAAA,CAAG,CAAA,GAAI,QAAA,CAAS,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAE,EAAG,CAAA;YAY7C,IAAM,gBAAgB,CAXhB,OAAA,GAAU,QAAA,CAAS,CAAC,CAAC,CAAC;YAY5B,IAAM,gBAAgB,CAXhB,MAAA,GAAO,IAAA,CAAK,kBAAC,CAAkB,OAAC,CAAO,CAAC;YAY9C,EAAE,CAAC,CAAC,CAXC,KAAC,CAAK,GAAC,CAAG,MAAC,CAAI,CAAC,CAAC,CAAA;gBAYpB,KAAK,CAXC,GAAC,CAAG,MAAC,CAAI,CAAC;gBAYhB,cAAc,CAXC,IAAC,CAAI,OAAC,CAAO,CAAC;YAY/B,CAAC;QACH,CAAC;QACD,MAAM,CAXC,cAAA,CAAe,OAAC,EAAO,CAAE;IAYlC,CAAC;IACH;;;;;;;;OAQG;IAlBA,kCAAA,GAmBH,UACM,SAAoB,EAAE,MAAgB,EAAE,OAAiB,EAAE,IAA6B,EACxF,OAA6B,EAAE,aAAwB;QACzD,IAAM,gBAAgB,CAnBhB,YAAA,GAoBF,IAAI,CAnBC,eAAC,CAAe,SAAC,CAAS,MAAC,GAAQ,SAAA,CAAU,MAAC,CAAM,MAAC,CAAM,MAAC,CAAM,GAAG,MAAA,CAAO,CAAC;QAoBtF,IAAM,gBAAgB,CAnBhB,aAAA,GAoBF,IAAI,CAnBC,eAAC,CAAe,SAAC,CAAS,OAAC,GAAS,SAAA,CAAU,OAAC,CAAO,MAAC,CAAM,OAAC,CAAO,GAAG,OAAA,CAAQ,CAAC;QAoB1F,IAAM,gBAAgB,CAnBhB,UAAA,GAAa,SAAA,CAAU,IAAC,GAAM,gBAAA,CAAiB,KAAC,CAAK,SAAC,CAAS,IAAC,EAAK,IAAA,CAAK,GAAG,IAAA,CAAK;QAoBxF,IAAM,gBAAgB,CAnBhB,aAAA,GAoBF,SAAS,CAnBC,OAAC,GAAS,gBAAA,CAAiB,KAAC,CAAK,SAAC,CAAS,OAAC,EAAQ,OAAA,CAAQ,GAAG,OAAA,CAAQ;QAqBrF,EAAE,CAAC,CAAC,SAnBC,YAAoB,SAAA,CAAU,CAAC,CAAA;YAoBlC,MAAM,CAnBC,IAAI,SAAA,CAAU;gBAoBnB,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,MAAM,EAnBE,YAAA;gBAoBR,OAAO,EAnBE,aAAA;gBAoBT,IAAI,EAnBE,UAAA;gBAoBN,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,OAAO,EAnBE,aAAA;gBAoBT,eAAe,EAnBE,SAAA,CAAU,eAAC;gBAoB5B,SAAS,EAnBE,SAAA,CAAU,SAAC;gBAoBtB,aAAa,EAnBE,SAAA,CAAU,aAAC;gBAoB1B,eAAe,EAnBE,SAAA,CAAU,eAAC;gBAoB5B,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,WAAW,EAnBE,SAAA,CAAU,WAAC;gBAoBxB,MAAM,EAnBE,SAAA,CAAU,MAAC;gBAoBnB,SAAS,EAnBE,SAAA,CAAU,SAAC;gBAoBtB,aAAa,EAnBE,SAAA,CAAU,aAAC;gBAoB1B,UAAU,EAnBE,SAAA,CAAU,UAAC;gBAoBvB,aAAa,EAnBE,SAAA,CAAU,aAAC;aAoB3B,CAnBC,CAAC;QAoBL,CAAC;QAnBC,IAAA,CAAK,CAAA;YAoBL,MAAM,CAnBC,IAAI,SAAA,CAAU;gBAoBnB,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,MAAM,EAnBE,YAAA;gBAoBR,OAAO,EAnBE,aAAA;gBAoBT,IAAI,EAnBE,UAAA;gBAoBN,QAAQ,EAnBE,SAAA,CAAU,QAAC;gBAoBrB,OAAO,EAnBE,aAAA;gBAoBT,SAAS,EAnBE,SAAA,CAAU,SAAC;aAoBvB,CAnBC,CAAC;QAoBL,CAAC;IACH,CAAC;IACH,wBAAC;AAAD,CAzKA,AAyKC,IAAA;AAzKY,iBAAiB;IAO7B,kBAAA,EAAA;qCAEiC,eAAA;GATrB,iBAAiB,CAyK7B;SAzKY,iBAAiB;AA2K9B;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;AACvC,CAAC;AAED;;;GAGG;AACH,6BA5BC,IAAA;IA6BC,MAAM,CA5BC,IAAA,YAAgB,SAAA,CAAU;AA6BnC,CAAC","file":"directive_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, HostBinding, HostListener, Input, Output, Query, Type, resolveForwardRef} from '@angular/core';\n\nimport {ListWrapper, StringMapWrapper} from './facade/collection';\nimport {stringify} from './facade/lang';\nimport {CompilerInjectable} from './injectable';\nimport {ReflectorReader, reflector} from './private_import_core';\nimport {splitAtColon} from './util';\n@CompilerInjectable()\nexport class DirectiveResolver {\n/**\n * @param {?=} _reflector\n */\nconstructor(private _reflector: ReflectorReader = reflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisDirective(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n  }\n/**\n * Return {\\@link Directive} for a given `Type`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Directive {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (typeMetadata) {\n      const /** @type {?} */ metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);\n      if (metadata) {\n        const /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n\n    if (throwIfNotFound) {\n      throw new Error(`No Directive annotation found on ${stringify(type)}`);\n    }\n\n    return null;\n  }\n/**\n * @param {?} dm\n * @param {?} propertyMetadata\n * @param {?} directiveType\n * @return {?}\n */\nprivate _mergeWithPropertyMetadata(\n      dm: Directive, propertyMetadata: {[key: string]: any[]},\n      directiveType: Type<any>): Directive {\n    const /** @type {?} */ inputs: string[] = [];\n    const /** @type {?} */ outputs: string[] = [];\n    const /** @type {?} */ host: {[key: string]: string} = {};\n    const /** @type {?} */ queries: {[key: string]: any} = {};\n\n    Object.keys(propertyMetadata).forEach((propName: string) => {\n      const /** @type {?} */ input = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Input);\n      if (input) {\n        if (input.bindingPropertyName) {\n          inputs.push(`${propName}: ${input.bindingPropertyName}`);\n        } else {\n          inputs.push(propName);\n        }\n      }\n      const /** @type {?} */ output = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Output);\n      if (output) {\n        if (output.bindingPropertyName) {\n          outputs.push(`${propName}: ${output.bindingPropertyName}`);\n        } else {\n          outputs.push(propName);\n        }\n      }\n      const /** @type {?} */ hostBindings = propertyMetadata[propName].filter(a => a && a instanceof HostBinding);\n      hostBindings.forEach(hostBinding => {\n        if (hostBinding.hostPropertyName) {\n          const /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\n          if (startWith === '(') {\n            throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\n          } else if (startWith === '[') {\n            throw new Error(\n                `@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\n          }\n          host[`[${hostBinding.hostPropertyName}]`] = propName;\n        } else {\n          host[`[${propName}]`] = propName;\n        }\n      });\n      const /** @type {?} */ hostListeners = propertyMetadata[propName].filter(a => a && a instanceof HostListener);\n      hostListeners.forEach(hostListener => {\n        const /** @type {?} */ args = hostListener.args || [];\n        host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n      });\n      const /** @type {?} */ query = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Query);\n      if (query) {\n        queries[propName] = query;\n      }\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n/**\n * @param {?} def\n * @return {?}\n */\nprivate _extractPublicName(def: string) { return splitAtColon(def, [null, def])[1].trim(); }\n/**\n * @param {?} bindings\n * @return {?}\n */\nprivate _dedupeBindings(bindings: string[]): string[] {\n    const /** @type {?} */ names = new Set<string>();\n    const /** @type {?} */ reversedResult: string[] = [];\n    // go last to first to allow later entries to overwrite previous entries\n    for (let /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\n      const /** @type {?} */ binding = bindings[i];\n      const /** @type {?} */ name = this._extractPublicName(binding);\n      if (!names.has(name)) {\n        names.add(name);\n        reversedResult.push(binding);\n      }\n    }\n    return reversedResult.reverse();\n  }\n/**\n * @param {?} directive\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} host\n * @param {?} queries\n * @param {?} directiveType\n * @return {?}\n */\nprivate _merge(\n      directive: Directive, inputs: string[], outputs: string[], host: {[key: string]: string},\n      queries: {[key: string]: any}, directiveType: Type<any>): Directive {\n    const /** @type {?} */ mergedInputs =\n        this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n    const /** @type {?} */ mergedOutputs =\n        this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n    const /** @type {?} */ mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;\n    const /** @type {?} */ mergedQueries =\n        directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;\n\n    if (directive instanceof Component) {\n      return new Component({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        moduleId: directive.moduleId,\n        queries: mergedQueries,\n        changeDetection: directive.changeDetection,\n        providers: directive.providers,\n        viewProviders: directive.viewProviders,\n        entryComponents: directive.entryComponents,\n        template: directive.template,\n        templateUrl: directive.templateUrl,\n        styles: directive.styles,\n        styleUrls: directive.styleUrls,\n        encapsulation: directive.encapsulation,\n        animations: directive.animations,\n        interpolation: directive.interpolation\n      });\n    } else {\n      return new Directive({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        queries: mergedQueries,\n        providers: directive.providers\n      });\n    }\n  }\n}\n\nfunction DirectiveResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectiveResolver.prototype._reflector;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isDirectiveMetadata(type: any): type is Directive {\n  return type instanceof Directive;\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/jit/compiler_factory.ts"],"names":[],"mappings":"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","file":"compiler_factory.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, Compiler, CompilerFactory, CompilerOptions, Inject, InjectionToken, MissingTranslationStrategy, Optional, PLATFORM_INITIALIZER, PlatformRef, Provider, ReflectiveInjector, TRANSLATIONS, TRANSLATIONS_FORMAT, Type, ViewEncapsulation, createPlatformFactory, isDevMode, platformCore} from '@angular/core/index';\n\nimport {AnimationParser} from '../animation/animation_parser';\nimport {CompilerConfig, USE_VIEW_ENGINE} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {DirectiveWrapperCompiler} from '../directive_wrapper_compiler';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport * as i18n from '../i18n/index';\nimport {CompilerInjectable} from '../injectable';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {PipeResolver} from '../pipe_resolver';\nimport {Console, ReflectionCapabilities, Reflector, ReflectorReader, reflector} from '../private_import_core';\nimport {ResourceLoader} from '../resource_loader';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {SummaryResolver} from '../summary_resolver';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {DEFAULT_PACKAGE_URL_PROVIDER, UrlResolver} from '../url_resolver';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\nimport {ViewCompilerNext} from '../view_compiler_next/view_compiler';\n\nimport {JitCompiler} from './compiler';\n\nconst /** @type {?} */ _NO_RESOURCE_LOADER: ResourceLoader = {\n/**\n * @param {?} url\n * @return {?}\n */\nget(url: string): Promise<string>{\n      throw new Error(\n          `No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);}\n};\n\nconst /** @type {?} */ baseHtmlParser = new InjectionToken('HtmlParser');\n/**\n * @param {?} cc\n * @param {?} sr\n * @return {?}\n */\nfunction viewCompilerFactory(cc: CompilerConfig, sr: ElementSchemaRegistry) {\n  return cc.useViewEngine ? new ViewCompilerNext(cc, sr) : new ViewCompiler(cc, sr);\n}\n\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nexport const /** @type {?} */ COMPILER_PROVIDERS: Array<any|Type<any>|{[k: string]: any}|any[]> = [\n  {provide: Reflector, useValue: reflector},\n  {provide: ReflectorReader, useExisting: Reflector},\n  {provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER},\n  SummaryResolver,\n  Console,\n  Lexer,\n  Parser,\n  {\n    provide: baseHtmlParser,\n    useClass: HtmlParser,\n  },\n  {\n    provide: i18n.I18NHtmlParser,\n    useFactory: (parser: HtmlParser, translations: string, format: string, config: CompilerConfig,\n                 console: Console) =>\n                    new i18n.I18NHtmlParser(\n                        parser, translations, format, config.missingTranslation, console),\n    deps: [\n      baseHtmlParser,\n      [new Optional(), new Inject(TRANSLATIONS)],\n      [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n      [CompilerConfig],\n      [Console],\n    ]\n  },\n  {\n    provide: HtmlParser,\n    useExisting: i18n.I18NHtmlParser,\n  },\n  TemplateParser,\n  DirectiveNormalizer,\n  CompileMetadataResolver,\n  DEFAULT_PACKAGE_URL_PROVIDER,\n  StyleCompiler,\n  {provide: USE_VIEW_ENGINE, useValue: false},\n  {\n    provide: ViewCompiler,\n    useFactory: viewCompilerFactory,\n    deps: [CompilerConfig, ElementSchemaRegistry]\n  },\n  NgModuleCompiler,\n  DirectiveWrapperCompiler,\n  {provide: CompilerConfig, useValue: new CompilerConfig()},\n  JitCompiler,\n  {provide: Compiler, useExisting: JitCompiler},\n  DomElementSchemaRegistry,\n  {provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry},\n  UrlResolver,\n  DirectiveResolver,\n  PipeResolver,\n  NgModuleResolver,\n  AnimationParser,\n];\n@CompilerInjectable()\nexport class JitCompilerFactory implements CompilerFactory {\nprivate _defaultOptions: CompilerOptions[];\n/**\n * @param {?} defaultOptions\n */\nconstructor( defaultOptions: CompilerOptions[]) {\n    this._defaultOptions = [<CompilerOptions>{\n                             useDebug: isDevMode(),\n                             useJit: true,\n                             defaultEncapsulation: ViewEncapsulation.Emulated,\n                             missingTranslation: MissingTranslationStrategy.Warning,\n                           }].concat(defaultOptions);\n  }\n/**\n * @param {?=} options\n * @return {?}\n */\ncreateCompiler(options: CompilerOptions[] = []): Compiler {\n    const /** @type {?} */ opts = _mergeOptions(this._defaultOptions.concat(options));\n    const /** @type {?} */ injector = ReflectiveInjector.resolveAndCreate([\n      COMPILER_PROVIDERS, {\n        provide: CompilerConfig,\n        useFactory: (useViewEngine: boolean) => {\n          return new CompilerConfig({\n            // let explicit values from the compiler options overwrite options\n            // from the app providers. E.g. important for the testing platform.\n            genDebugInfo: opts.useDebug,\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            useJit: opts.useJit,\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            defaultEncapsulation: opts.defaultEncapsulation,\n            logBindingUpdate: opts.useDebug,\n            missingTranslation: opts.missingTranslation, useViewEngine\n          });\n        },\n        deps: [USE_VIEW_ENGINE]\n      },\n      opts.providers\n    ]);\n    return injector.get(Compiler);\n  }\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [COMPILER_OPTIONS, ] }, ]},\n];\n}\n\nfunction JitCompilerFactory_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nJitCompilerFactory.ctorParameters;\n/** @type {?} */\nJitCompilerFactory.prototype._defaultOptions;\n}\n\n/**\n * @return {?}\n */\nfunction _initReflector() {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n}\n\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @experimental\n */\nexport const /** @type {?} */ platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n  {provide: COMPILER_OPTIONS, useValue: {}, multi: true},\n  {provide: CompilerFactory, useClass: JitCompilerFactory},\n  {provide: PLATFORM_INITIALIZER, useValue: _initReflector, multi: true},\n]);\n/**\n * @param {?} optionsArr\n * @return {?}\n */\nfunction _mergeOptions(optionsArr: CompilerOptions[]): CompilerOptions {\n  return {\n    useDebug: _lastDefined(optionsArr.map(options => options.useDebug)),\n    useJit: _lastDefined(optionsArr.map(options => options.useJit)),\n    defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),\n    providers: _mergeArrays(optionsArr.map(options => options.providers)),\n    missingTranslation: _lastDefined(optionsArr.map(options => options.missingTranslation)),\n  };\n}\n/**\n * @param {?} args\n * @return {?}\n */\nfunction _lastDefined<T>(args: T[]): T {\n  for (let /** @type {?} */ i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts: any[][]): any[] {\n  const /** @type {?} */ result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
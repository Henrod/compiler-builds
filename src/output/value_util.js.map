{"version":3,"sources":["../../../../../modules/@angular/compiler/src/output/value_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAmB,UAAA,EAAW,MAAA,SAAA,CAAA;AAErC,OAAO,KAAK,CAAA,MAAA,cAAA,CAAA;AAEZ,MAAM,CAAC,IAAA,gBAAA,CAAM,WAAA,GAAc,UAAA,CAAW;AACtC;;;;GAIG;AACH,MAJC,kCAAA,KAAA,EAAA,IAAA;IAAA,qBAAA,EAAA,WAAA;IAKC,MAAM,CAJC,UAAA,CAAW,KAAC,EAAM,IAAI,0BAAA,EAA2B,EAAG,IAAA,CAAK,CAAC;AAKnE,CAAC;AACD;IAAA;IAyCA,CAAC;IAxCD;;;;OAIG;IACH,+CARG,GAQH,UARG,GAAA,EAAA,IAAA;QAQH,iBAEG;QADC,MAAM,CARC,CAAA,CAAE,UAAC,CAAU,GAAC,CAAG,GAAC,CAAG,UAAA,KAAC,IAAQ,OAAA,UAAA,CAAW,KAAC,EAAM,KAAA,EAAM,IAAA,CAAK,EAA7B,CAA6B,CAAC,EAAE,IAAA,CAAK,CAAC;IAS7E,CAAC;IACH;;;;OAIG;IACH,mDAZG,GAYH,UAZG,GAAA,EAAA,IAAA;QAYH,iBAQG;QAPC,IAAM,gBAAgB,CAZhB,OAAA,GAA+B,EAAA,CAAG;QAaxC,IAAM,gBAAgB,CAZhB,SAAA,GAAY,IAAI,GAAA,CAAW,GAAE,IAAM,GAAA,CAAI,WAAC,CAAW,CAAC,CAAC;QAa3D,MAAM,CAZC,IAAC,CAAI,GAAC,CAAG,CAAC,OAAC,CAAO,UAAA,GAAC;YAaxB,OAAO,CAZC,IAAC,CAaL,IAZI,CAAA,CAAE,eAAC,CAAe,GAAC,EAAI,UAAA,CAAW,GAAC,CAAG,GAAC,CAAG,EAAE,KAAA,EAAM,IAAA,CAAK,EAAE,SAAA,CAAU,GAAC,CAAG,GAAC,CAAG,CAAC,CAAC,CAAC;QAaxF,CAAC,CAZC,CAAC;QAaH,MAAM,CAZC,IAAI,CAAA,CAAE,cAAC,CAAc,OAAC,EAAQ,IAAA,CAAK,CAAC;IAa7C,CAAC;IACH;;;;OAIG;IACH,mDAhBG,GAgBH,UAhBG,KAAA,EAAA,IAAA,IAAwD,MAAA,CAAO,CAAA,CAAE,OAAC,CAAO,KAAC,EAAM,IAAA,CAAK,CAAC,CAAC,CAAA;IAiB1F;;;;OAIG;IACH,+CApBG,GAoBH,UApBG,KAAA,EAAA,IAAA;QAqBC,EAAE,CAAC,CAAC,KApBC,YAAgB,CAAA,CAAE,UAAC,CAAU,CAAC,CAAA;YAqBjC,MAAM,CApBC,KAAA,CAAM;QAqBf,CAAC;QApBC,IAAA,CAAK,CAAA;YAqBL,MAAM,CApBC,CAAA,CAAE,UAAC,CAAU,EAAC,SAAC,EAAU,KAAA,EAAM,CAAC,CAAC;QAqB1C,CAAC;IACH,CAAC;IACH,iCAAC;AAAD,CAzCA,AAyCC,IAAA","file":"value_util.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ValueTransformer, visitValue} from '../util';\n\nimport * as o from './output_ast';\n\nexport const /** @type {?} */ QUOTED_KEYS = '$quoted$';\n/**\n * @param {?} value\n * @param {?=} type\n * @return {?}\n */\nexport function convertValueToOutputAst(value: any, type: o.Type = null): o.Expression {\n  return visitValue(value, new _ValueOutputAstTransformer(), type);\n}\nclass _ValueOutputAstTransformer implements ValueTransformer {\n/**\n * @param {?} arr\n * @param {?} type\n * @return {?}\n */\nvisitArray(arr: any[], type: o.Type): o.Expression {\n    return o.literalArr(arr.map(value => visitValue(value, this, null)), type);\n  }\n/**\n * @param {?} map\n * @param {?} type\n * @return {?}\n */\nvisitStringMap(map: {[key: string]: any}, type: o.MapType): o.Expression {\n    const /** @type {?} */ entries: o.LiteralMapEntry[] = [];\n    const /** @type {?} */ quotedSet = new Set<string>(map && map[QUOTED_KEYS]);\n    Object.keys(map).forEach(key => {\n      entries.push(\n          new o.LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\n    });\n    return new o.LiteralMapExpr(entries, type);\n  }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nvisitPrimitive(value: any, type: o.Type): o.Expression { return o.literal(value, type); }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nvisitOther(value: any, type: o.Type): o.Expression {\n    if (value instanceof o.Expression) {\n      return value;\n    } else {\n      return o.importExpr({reference: value});\n    }\n  }\n}\n"]}
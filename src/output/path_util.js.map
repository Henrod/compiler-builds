{"version":3,"file":"path_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/path_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,gDAAgD;AAChD,IAAM,gBAAgB,CAAC,aAAa,GAAG,gCAAgC,CAAC;AACxE;;;GAGG;AACH;IAAA;IAaA,CAAC;IAZD;;;OAGG;IACI,6BAAa,GAApB,UAAqB,GAAW,IAAc,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3E;;;;;OAKG;IACH,uCAAa,GAAb,UAAc,YAAoB,EAAE,cAAsB,IAAG,CAAC;IAC9D,sBAAC;AAAD,CAAC,AAbD,IAaC;AAED;IAgBA;;;;OAIG;IACH,kBAAmB,WAAmB,EAC/B,aAAqB,EACrB,UAAkB;QAFN,gBAAW,GAAX,WAAW,CAAQ;QAC/B,kBAAa,GAAb,aAAa,CAAQ;QACrB,eAAU,GAAV,UAAU,CAAQ;IACvB,CAAC;IAvBH;;;;OAIG;IACI,cAAK,GAAZ,UAAa,GAAW,EAAE,gBAAgC;QAAhC,gCAAgC,GAAhC,uBAAgC;QACtD,IAAM,gBAAgB,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,SAAO,GAAG,+BAA4B,CAAC,CAAC;IAC1D,CAAC;IAUH,eAAC;AAAD,CAAC,AAzBD,IAyBC;AAED;IACC,gBAAgB;IACjB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;IAC9B,gBAAgB;IACjB,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IAChC,gBAAgB;IACjB,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;AAC9B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// asset:<package-name>/<realm>/<path-to-module>\nconst /** @type {?} */ _ASSET_URL_RE = /asset:([^\\/]+)\\/([^\\/]+)\\/(.+)/;\n/**\n *  Interface that defines how import statements should be generated.\n * @abstract\n */\nexport abstract class ImportGenerator {\n/**\n * @param {?} url\n * @return {?}\n */\nstatic parseAssetUrl(url: string): AssetUrl { return AssetUrl.parse(url); }\n/**\n * @abstract\n * @param {?} moduleUrlStr\n * @param {?} importedUrlStr\n * @return {?}\n */\ngetImportPath(moduleUrlStr: string, importedUrlStr: string) {}\n}\n\nexport class AssetUrl {\n/**\n * @param {?} url\n * @param {?=} allowNonMatching\n * @return {?}\n */\nstatic parse(url: string, allowNonMatching: boolean = true): AssetUrl {\n    const /** @type {?} */ match = url.match(_ASSET_URL_RE);\n    if (match !== null) {\n      return new AssetUrl(match[1], match[2], match[3]);\n    }\n    if (allowNonMatching) {\n      return null;\n    }\n    throw new Error(`Url ${url} is not a valid asset: url`);\n  }\n/**\n * @param {?} packageName\n * @param {?} firstLevelDir\n * @param {?} modulePath\n */\nconstructor(public packageName: string,\npublic firstLevelDir: string,\npublic modulePath: string) {\n  }\n}\n\nfunction AssetUrl_tsickle_Closure_declarations() {\n /** @type {?} */\nAssetUrl.prototype.packageName;\n /** @type {?} */\nAssetUrl.prototype.firstLevelDir;\n /** @type {?} */\nAssetUrl.prototype.modulePath;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/output/output_interpreter.ts"],"names":[],"mappings":"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","file":"output_interpreter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isPresent} from '../facade/lang';\n\nimport * as o from './output_ast';\nimport {debugOutputAstAsTypeScript} from './ts_emitter';\n/**\n * @param {?} statements\n * @param {?} resultVar\n * @return {?}\n */\nexport function interpretStatements(statements: o.Statement[], resultVar: string): any {\n  const /** @type {?} */ stmtsWithReturn = statements.concat([new o.ReturnStatement(o.variable(resultVar))]);\n  const /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map<string, any>());\n  const /** @type {?} */ visitor = new StatementInterpreter();\n  const /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);\n  return isPresent(result) ? result.value : null;\n}\n/**\n * @param {?} varNames\n * @param {?} varValues\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _executeFunctionStatements(\n    varNames: string[], varValues: any[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): any {\n  const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n  for (let /** @type {?} */ i = 0; i < varNames.length; i++) {\n    childCtx.vars.set(varNames[i], varValues[i]);\n  }\n  const /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);\n  return isPresent(result) ? result.value : null;\n}\nclass _ExecutionContext {\n/**\n * @param {?} parent\n * @param {?} instance\n * @param {?} className\n * @param {?} vars\n */\nconstructor(\npublic parent: _ExecutionContext,\npublic instance: any,\npublic className: string,\npublic vars: Map<string, any>) {}\n/**\n * @return {?}\n */\ncreateChildWihtLocalVars(): _ExecutionContext {\n    return new _ExecutionContext(this, this.instance, this.className, new Map<string, any>());\n  }\n}\n\nfunction _ExecutionContext_tsickle_Closure_declarations() {\n/** @type {?} */\n_ExecutionContext.prototype.parent;\n/** @type {?} */\n_ExecutionContext.prototype.instance;\n/** @type {?} */\n_ExecutionContext.prototype.className;\n/** @type {?} */\n_ExecutionContext.prototype.vars;\n}\n\nclass ReturnValue {\n/**\n * @param {?} value\n */\nconstructor(public value: any) {}\n}\n\nfunction ReturnValue_tsickle_Closure_declarations() {\n/** @type {?} */\nReturnValue.prototype.value;\n}\n\n/**\n * @param {?} _classStmt\n * @param {?} _ctx\n * @param {?} _visitor\n * @return {?}\n */\nfunction createDynamicClass(\n    _classStmt: o.ClassStmt, _ctx: _ExecutionContext, _visitor: StatementInterpreter): Function {\n  const /** @type {?} */ propertyDescriptors: {[key: string]: any} = {};\n\n  _classStmt.getters.forEach((getter: o.ClassGetter) => {\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[getter.name] = {\n      configurable: false,\n      get: function() {\n        const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n      }\n    };\n  });\n  _classStmt.methods.forEach(function(method: o.ClassMethod) {\n    const /** @type {?} */ paramNames = method.params.map(param => param.name);\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[method.name] = {\n      writable: false,\n      configurable: false,\n      value: function(...args: any[]) {\n        const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  const /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\n  // Note: use `function` instead of arrow function to capture `this`\n  const /** @type {?} */ ctor = function(...args: any[]) {\n    const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n    _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\n    _executeFunctionStatements(\n        ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n  };\n  const /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n  ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n  return ctor;\n}\nclass StatementInterpreter implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} ast\n * @return {?}\n */\ndebugAst(ast: o.Expression|o.Statement|o.Type): string { return debugOutputAstAsTypeScript(ast); }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: _ExecutionContext): any {\n    ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    let /** @type {?} */ currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(expr.name)) {\n        currCtx.vars.set(expr.name, value);\n        return value;\n      }\n      currCtx = currCtx.parent;\n    }\n    throw new Error(`Not declared variable ${expr.name}`);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: _ExecutionContext): any {\n    let /** @type {?} */ varName = ast.name;\n    if (isPresent(ast.builtin)) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          return ctx.instance.__proto__;\n        case o.BuiltinVar.This:\n          return ctx.instance;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    let /** @type {?} */ currCtx = ctx;\n    while (currCtx != null) {\n      if (currCtx.vars.has(varName)) {\n        return currCtx.vars.get(varName);\n      }\n      currCtx = currCtx.parent;\n    }\n    throw new Error(`Not declared variable ${varName}`);\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ index = expr.index.visitExpression(this, ctx);\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    receiver[index] = value;\n    return value;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n    receiver[expr.name] = value;\n    return value;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);\n    let /** @type {?} */ result: any;\n    if (isPresent(expr.builtin)) {\n      switch (expr.builtin) {\n        case o.BuiltinMethod.ConcatArray:\n          result = receiver.concat(...args);\n          break;\n        case o.BuiltinMethod.SubscribeObservable:\n          result = receiver.subscribe({next: args[0]});\n          break;\n        case o.BuiltinMethod.Bind:\n          result = receiver.bind(...args);\n          break;\n        default:\n          throw new Error(`Unknown builtin method ${expr.builtin}`);\n      }\n    } else {\n      result = receiver[expr.name].apply(receiver, args);\n    }\n    return result;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(stmt: o.InvokeFunctionExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);\n    const /** @type {?} */ fnExpr = stmt.fn;\n    if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n      ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n      return null;\n    } else {\n      const /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);\n      return fn.apply(null, args);\n    }\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: _ExecutionContext): any {\n    return new ReturnValue(stmt.value.visitExpression(this, ctx));\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: o.ClassStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);\n    ctx.vars.set(stmt.name, clazz);\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: _ExecutionContext): any {\n    return stmt.expr.visitExpression(this, ctx);\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);\n    if (condition) {\n      return this.visitAllStatements(stmt.trueCase, ctx);\n    } else if (isPresent(stmt.falseCase)) {\n      return this.visitAllStatements(stmt.falseCase, ctx);\n    }\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitTryCatchStmt(stmt: o.TryCatchStmt, ctx: _ExecutionContext): any {\n    try {\n      return this.visitAllStatements(stmt.bodyStmts, ctx);\n    } catch ( /** @type {?} */e) {\n      const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n      childCtx.vars.set(CATCH_ERROR_VAR, e);\n      childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n      return this.visitAllStatements(stmt.catchStmts, childCtx);\n    }\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: _ExecutionContext): any {\n    throw stmt.error.visitExpression(this, ctx);\n  }\n/**\n * @param {?} stmt\n * @param {?=} context\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, context?: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);\n    const /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);\n    return new clazz(...args);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: _ExecutionContext): any { return ast.value; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitExternalExpr(ast: o.ExternalExpr, ctx: _ExecutionContext): any {\n    return ast.value.reference;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: _ExecutionContext): any {\n    if (ast.condition.visitExpression(this, ctx)) {\n      return ast.trueCase.visitExpression(this, ctx);\n    } else if (isPresent(ast.falseCase)) {\n      return ast.falseCase.visitExpression(this, ctx);\n    }\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: _ExecutionContext): any {\n    return !ast.condition.visitExpression(this, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitCastExpr(ast: o.CastExpr, ctx: _ExecutionContext): any {\n    return ast.value.visitExpression(this, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitFunctionExpr(ast: o.FunctionExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ paramNames = ast.params.map((param) => param.name);\n    return _declareFn(paramNames, ast.statements, ctx, this);\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: _ExecutionContext): any {\n    const /** @type {?} */ paramNames = stmt.params.map((param) => param.name);\n    ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ lhs = () => ast.lhs.visitExpression(this, ctx);\n    const /** @type {?} */ rhs = () => ast.rhs.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        return lhs() == rhs();\n      case o.BinaryOperator.Identical:\n        return lhs() === rhs();\n      case o.BinaryOperator.NotEquals:\n        return lhs() != rhs();\n      case o.BinaryOperator.NotIdentical:\n        return lhs() !== rhs();\n      case o.BinaryOperator.And:\n        return lhs() && rhs();\n      case o.BinaryOperator.Or:\n        return lhs() || rhs();\n      case o.BinaryOperator.Plus:\n        return lhs() + rhs();\n      case o.BinaryOperator.Minus:\n        return lhs() - rhs();\n      case o.BinaryOperator.Divide:\n        return lhs() / rhs();\n      case o.BinaryOperator.Multiply:\n        return lhs() * rhs();\n      case o.BinaryOperator.Modulo:\n        return lhs() % rhs();\n      case o.BinaryOperator.Lower:\n        return lhs() < rhs();\n      case o.BinaryOperator.LowerEquals:\n        return lhs() <= rhs();\n      case o.BinaryOperator.Bigger:\n        return lhs() > rhs();\n      case o.BinaryOperator.BiggerEquals:\n        return lhs() >= rhs();\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: _ExecutionContext): any {\n    let /** @type {?} */ result: any;\n    const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n    result = receiver[ast.name];\n    return result;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n    const /** @type {?} */ prop = ast.index.visitExpression(this, ctx);\n    return receiver[prop];\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: _ExecutionContext): any {\n    return this.visitAllExpressions(ast.entries, ctx);\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: _ExecutionContext): any {\n    const /** @type {?} */ result = {};\n    ast.entries.forEach(\n        (entry) => ( /** @type {?} */((result as any)))[entry.key] = entry.value.visitExpression(this, ctx));\n    return result;\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @return {?}\n */\nvisitAllExpressions(expressions: o.Expression[], ctx: _ExecutionContext): any {\n    return expressions.map((expr) => expr.visitExpression(this, ctx));\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: _ExecutionContext): ReturnValue {\n    for (let /** @type {?} */ i = 0; i < statements.length; i++) {\n      const /** @type {?} */ stmt = statements[i];\n      const /** @type {?} */ val = stmt.visitStatement(this, ctx);\n      if (val instanceof ReturnValue) {\n        return val;\n      }\n    }\n    return null;\n  }\n}\n/**\n * @param {?} varNames\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _declareFn(\n    varNames: string[], statements: o.Statement[], ctx: _ExecutionContext,\n    visitor: StatementInterpreter): Function {\n  return (...args: any[]) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\n\nconst /** @type {?} */ CATCH_ERROR_VAR = 'error';\nconst /** @type {?} */ CATCH_STACK_VAR = 'stack';\n"]}
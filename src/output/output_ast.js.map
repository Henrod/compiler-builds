{"version":3,"sources":["../../../../../modules/@angular/compiler/src/output/output_ast.ts"],"names":[],"mappings":"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","file":"output_ast.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileIdentifierMetadata} from '../compile_metadata';\nimport {isPresent} from '../facade/lang';\nexport type TypeModifier = number;\nexport let TypeModifier: any = {};\nTypeModifier.Const = 0;\nTypeModifier[TypeModifier.Const] = \"Const\";\n\n/**\n * @abstract\n */\nexport abstract class Type {\n/**\n * @param {?=} modifiers\n */\nconstructor(public modifiers: TypeModifier[] = null) {\n    if (!modifiers) {\n      this.modifiers = [];\n    }\n  }\n/**\n * @abstract\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any) {}\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: TypeModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\nfunction Type_tsickle_Closure_declarations() {\n/** @type {?} */\nType.prototype.modifiers;\n}\n\nexport type BuiltinTypeName = number;\nexport let BuiltinTypeName: any = {};\nBuiltinTypeName.Dynamic = 0;\nBuiltinTypeName.Bool = 1;\nBuiltinTypeName.String = 2;\nBuiltinTypeName.Int = 3;\nBuiltinTypeName.Number = 4;\nBuiltinTypeName.Function = 5;\nBuiltinTypeName.Null = 6;\nBuiltinTypeName[BuiltinTypeName.Dynamic] = \"Dynamic\";\nBuiltinTypeName[BuiltinTypeName.Bool] = \"Bool\";\nBuiltinTypeName[BuiltinTypeName.String] = \"String\";\nBuiltinTypeName[BuiltinTypeName.Int] = \"Int\";\nBuiltinTypeName[BuiltinTypeName.Number] = \"Number\";\nBuiltinTypeName[BuiltinTypeName.Function] = \"Function\";\nBuiltinTypeName[BuiltinTypeName.Null] = \"Null\";\n\nexport class BuiltinType extends Type {\n/**\n * @param {?} name\n * @param {?=} modifiers\n */\nconstructor(public name: BuiltinTypeName, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitBuiltintType(this, context);\n  }\n}\n\nfunction BuiltinType_tsickle_Closure_declarations() {\n/** @type {?} */\nBuiltinType.prototype.name;\n}\n\nexport class ExpressionType extends Type {\n/**\n * @param {?} value\n * @param {?=} modifiers\n */\nconstructor(public value: Expression, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitExpressionType(this, context);\n  }\n}\n\nfunction ExpressionType_tsickle_Closure_declarations() {\n/** @type {?} */\nExpressionType.prototype.value;\n}\n\nexport class ArrayType extends Type {\n/**\n * @param {?} of\n * @param {?=} modifiers\n */\nconstructor(public of : Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitArrayType(this, context);\n  }\n}\n\nfunction ArrayType_tsickle_Closure_declarations() {\n/** @type {?} */\nArrayType.prototype.of;\n}\n\nexport class MapType extends Type {\n/**\n * @param {?} valueType\n * @param {?=} modifiers\n */\nconstructor(public valueType: Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any { return visitor.visitMapType(this, context); }\n}\n\nfunction MapType_tsickle_Closure_declarations() {\n/** @type {?} */\nMapType.prototype.valueType;\n}\n\n\nexport const /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport const /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport const /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport const /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport const /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport const /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nexport const /** @type {?} */ NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);\n\nexport interface TypeVisitor {\n  visitBuiltintType(type: BuiltinType, context: any): any;\n  visitExpressionType(type: ExpressionType, context: any): any;\n  visitArrayType(type: ArrayType, context: any): any;\n  visitMapType(type: MapType, context: any): any;\n}\nexport type BinaryOperator = number;\nexport let BinaryOperator: any = {};\nBinaryOperator.Equals = 0;\nBinaryOperator.NotEquals = 1;\nBinaryOperator.Identical = 2;\nBinaryOperator.NotIdentical = 3;\nBinaryOperator.Minus = 4;\nBinaryOperator.Plus = 5;\nBinaryOperator.Divide = 6;\nBinaryOperator.Multiply = 7;\nBinaryOperator.Modulo = 8;\nBinaryOperator.And = 9;\nBinaryOperator.Or = 10;\nBinaryOperator.Lower = 11;\nBinaryOperator.LowerEquals = 12;\nBinaryOperator.Bigger = 13;\nBinaryOperator.BiggerEquals = 14;\nBinaryOperator[BinaryOperator.Equals] = \"Equals\";\nBinaryOperator[BinaryOperator.NotEquals] = \"NotEquals\";\nBinaryOperator[BinaryOperator.Identical] = \"Identical\";\nBinaryOperator[BinaryOperator.NotIdentical] = \"NotIdentical\";\nBinaryOperator[BinaryOperator.Minus] = \"Minus\";\nBinaryOperator[BinaryOperator.Plus] = \"Plus\";\nBinaryOperator[BinaryOperator.Divide] = \"Divide\";\nBinaryOperator[BinaryOperator.Multiply] = \"Multiply\";\nBinaryOperator[BinaryOperator.Modulo] = \"Modulo\";\nBinaryOperator[BinaryOperator.And] = \"And\";\nBinaryOperator[BinaryOperator.Or] = \"Or\";\nBinaryOperator[BinaryOperator.Lower] = \"Lower\";\nBinaryOperator[BinaryOperator.LowerEquals] = \"LowerEquals\";\nBinaryOperator[BinaryOperator.Bigger] = \"Bigger\";\nBinaryOperator[BinaryOperator.BiggerEquals] = \"BiggerEquals\";\n\n/**\n * @abstract\n */\nexport abstract class Expression {\n/**\n * @param {?} type\n */\nconstructor(public type: Type) {}\n/**\n * @abstract\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any) {}\n/**\n * @param {?} name\n * @return {?}\n */\nprop(name: string): ReadPropExpr { return new ReadPropExpr(this, name); }\n/**\n * @param {?} index\n * @param {?=} type\n * @return {?}\n */\nkey(index: Expression, type: Type = null): ReadKeyExpr {\n    return new ReadKeyExpr(this, index, type);\n  }\n/**\n * @param {?} name\n * @param {?} params\n * @return {?}\n */\ncallMethod(name: string|BuiltinMethod, params: Expression[]): InvokeMethodExpr {\n    return new InvokeMethodExpr(this, name, params);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\ncallFn(params: Expression[]): InvokeFunctionExpr { return new InvokeFunctionExpr(this, params); }\n/**\n * @param {?} params\n * @param {?=} type\n * @return {?}\n */\ninstantiate(params: Expression[], type: Type = null): InstantiateExpr {\n    return new InstantiateExpr(this, params, type);\n  }\n/**\n * @param {?} trueCase\n * @param {?=} falseCase\n * @return {?}\n */\nconditional(trueCase: Expression, falseCase: Expression = null): ConditionalExpr {\n    return new ConditionalExpr(this, trueCase, falseCase);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nequals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nnotEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nidentical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nnotIdentical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nminus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nplus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\ndivide(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nmultiply(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nmodulo(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nand(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nor(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nlower(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nlowerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nbigger(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nbiggerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);\n  }\n/**\n * @return {?}\n */\nisBlank(): Expression {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    // We use the typed null to allow strictNullChecks to narrow types.\n    return this.equals(TYPED_NULL_EXPR);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\ncast(type: Type): Expression { return new CastExpr(this, type); }\n/**\n * @return {?}\n */\ntoStmt(): Statement { return new ExpressionStatement(this); }\n}\n\nfunction Expression_tsickle_Closure_declarations() {\n/** @type {?} */\nExpression.prototype.type;\n}\n\nexport type BuiltinVar = number;\nexport let BuiltinVar: any = {};\nBuiltinVar.This = 0;\nBuiltinVar.Super = 1;\nBuiltinVar.CatchError = 2;\nBuiltinVar.CatchStack = 3;\nBuiltinVar[BuiltinVar.This] = \"This\";\nBuiltinVar[BuiltinVar.Super] = \"Super\";\nBuiltinVar[BuiltinVar.CatchError] = \"CatchError\";\nBuiltinVar[BuiltinVar.CatchStack] = \"CatchStack\";\n\nexport class ReadVarExpr extends Expression {\npublic name: string;\npublic builtin: BuiltinVar;\n/**\n * @param {?} name\n * @param {?=} type\n */\nconstructor(name: string|BuiltinVar, type: Type = null) {\n    super(type);\n    if (typeof name === 'string') {\n      this.name = name;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinVar>name;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadVarExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WriteVarExpr { return new WriteVarExpr(this.name, value); }\n}\n\nfunction ReadVarExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nReadVarExpr.prototype.name;\n/** @type {?} */\nReadVarExpr.prototype.builtin;\n}\n\nexport class WriteVarExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public name: string, value: Expression, type: Type = null) {\n    super(type || value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n/**\n * @param {?=} type\n * @param {?=} modifiers\n * @return {?}\n */\ntoDeclStmt(type: Type = null, modifiers: StmtModifier[] = null): DeclareVarStmt {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers);\n  }\n}\n\nfunction WriteVarExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nWriteVarExpr.prototype.value;\n/** @type {?} */\nWriteVarExpr.prototype.name;\n}\n\nexport class WriteKeyExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} receiver\n * @param {?} index\n * @param {?} value\n * @param {?=} type\n */\nconstructor(\npublic receiver: Expression,\npublic index: Expression, value: Expression, type: Type = null) {\n    super(type || value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n}\n\nfunction WriteKeyExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nWriteKeyExpr.prototype.value;\n/** @type {?} */\nWriteKeyExpr.prototype.receiver;\n/** @type {?} */\nWriteKeyExpr.prototype.index;\n}\n\nexport class WritePropExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} receiver\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n */\nconstructor(\npublic receiver: Expression,\npublic name: string, value: Expression, type: Type = null) {\n    super(type || value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWritePropExpr(this, context);\n  }\n}\n\nfunction WritePropExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nWritePropExpr.prototype.value;\n/** @type {?} */\nWritePropExpr.prototype.receiver;\n/** @type {?} */\nWritePropExpr.prototype.name;\n}\n\nexport type BuiltinMethod = number;\nexport let BuiltinMethod: any = {};\nBuiltinMethod.ConcatArray = 0;\nBuiltinMethod.SubscribeObservable = 1;\nBuiltinMethod.Bind = 2;\nBuiltinMethod[BuiltinMethod.ConcatArray] = \"ConcatArray\";\nBuiltinMethod[BuiltinMethod.SubscribeObservable] = \"SubscribeObservable\";\nBuiltinMethod[BuiltinMethod.Bind] = \"Bind\";\n\nexport class InvokeMethodExpr extends Expression {\npublic name: string;\npublic builtin: BuiltinMethod;\n/**\n * @param {?} receiver\n * @param {?} method\n * @param {?} args\n * @param {?=} type\n */\nconstructor(\npublic receiver: Expression, method: string|BuiltinMethod,\npublic args: Expression[],\n      type: Type = null) {\n    super(type);\n    if (typeof method === 'string') {\n      this.name = method;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinMethod>method;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeMethodExpr(this, context);\n  }\n}\n\nfunction InvokeMethodExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nInvokeMethodExpr.prototype.name;\n/** @type {?} */\nInvokeMethodExpr.prototype.builtin;\n/** @type {?} */\nInvokeMethodExpr.prototype.receiver;\n/** @type {?} */\nInvokeMethodExpr.prototype.args;\n}\n\nexport class InvokeFunctionExpr extends Expression {\n/**\n * @param {?} fn\n * @param {?} args\n * @param {?=} type\n */\nconstructor(public fn: Expression,\npublic args: Expression[], type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n}\n\nfunction InvokeFunctionExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nInvokeFunctionExpr.prototype.fn;\n/** @type {?} */\nInvokeFunctionExpr.prototype.args;\n}\n\nexport class InstantiateExpr extends Expression {\n/**\n * @param {?} classExpr\n * @param {?} args\n * @param {?=} type\n */\nconstructor(public classExpr: Expression,\npublic args: Expression[], type?: Type) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n}\n\nfunction InstantiateExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nInstantiateExpr.prototype.classExpr;\n/** @type {?} */\nInstantiateExpr.prototype.args;\n}\n\nexport class LiteralExpr extends Expression {\n/**\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public value: any, type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralExpr(this, context);\n  }\n}\n\nfunction LiteralExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralExpr.prototype.value;\n}\n\nexport class ExternalExpr extends Expression {\n/**\n * @param {?} value\n * @param {?=} type\n * @param {?=} typeParams\n */\nconstructor(\npublic value: CompileIdentifierMetadata, type: Type = null,\npublic typeParams: Type[] = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitExternalExpr(this, context);\n  }\n}\n\nfunction ExternalExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nExternalExpr.prototype.value;\n/** @type {?} */\nExternalExpr.prototype.typeParams;\n}\n\nexport class ConditionalExpr extends Expression {\npublic trueCase: Expression;\n/**\n * @param {?} condition\n * @param {?} trueCase\n * @param {?=} falseCase\n * @param {?=} type\n */\nconstructor(\npublic condition: Expression, trueCase: Expression,\npublic falseCase: Expression = null,\n      type: Type = null) {\n    super(type || trueCase.type);\n    this.trueCase = trueCase;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitConditionalExpr(this, context);\n  }\n}\n\nfunction ConditionalExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nConditionalExpr.prototype.trueCase;\n/** @type {?} */\nConditionalExpr.prototype.condition;\n/** @type {?} */\nConditionalExpr.prototype.falseCase;\n}\n\nexport class NotExpr extends Expression {\n/**\n * @param {?} condition\n */\nconstructor(public condition: Expression) { super(BOOL_TYPE); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitNotExpr(this, context);\n  }\n}\n\nfunction NotExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nNotExpr.prototype.condition;\n}\n\nexport class CastExpr extends Expression {\n/**\n * @param {?} value\n * @param {?} type\n */\nconstructor(public value: Expression, type: Type) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitCastExpr(this, context);\n  }\n}\n\nfunction CastExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nCastExpr.prototype.value;\n}\n\nexport class FnParam {\n/**\n * @param {?} name\n * @param {?=} type\n */\nconstructor(public name: string,\npublic type: Type = null) {}\n}\n\nfunction FnParam_tsickle_Closure_declarations() {\n/** @type {?} */\nFnParam.prototype.name;\n/** @type {?} */\nFnParam.prototype.type;\n}\n\nexport class FunctionExpr extends Expression {\n/**\n * @param {?} params\n * @param {?} statements\n * @param {?=} type\n */\nconstructor(public params: FnParam[],\npublic statements: Statement[], type: Type = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitFunctionExpr(this, context);\n  }\n/**\n * @param {?} name\n * @param {?=} modifiers\n * @return {?}\n */\ntoDeclStmt(name: string, modifiers: StmtModifier[] = null): DeclareFunctionStmt {\n    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);\n  }\n}\n\nfunction FunctionExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nFunctionExpr.prototype.params;\n/** @type {?} */\nFunctionExpr.prototype.statements;\n}\n\nexport class BinaryOperatorExpr extends Expression {\npublic lhs: Expression;\n/**\n * @param {?} operator\n * @param {?} lhs\n * @param {?} rhs\n * @param {?=} type\n */\nconstructor(\npublic operator: BinaryOperator, lhs: Expression,\npublic rhs: Expression, type: Type = null) {\n    super(type || lhs.type);\n    this.lhs = lhs;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n}\n\nfunction BinaryOperatorExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nBinaryOperatorExpr.prototype.lhs;\n/** @type {?} */\nBinaryOperatorExpr.prototype.operator;\n/** @type {?} */\nBinaryOperatorExpr.prototype.rhs;\n}\n\nexport class ReadPropExpr extends Expression {\n/**\n * @param {?} receiver\n * @param {?} name\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic name: string, type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadPropExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WritePropExpr {\n    return new WritePropExpr(this.receiver, this.name, value);\n  }\n}\n\nfunction ReadPropExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nReadPropExpr.prototype.receiver;\n/** @type {?} */\nReadPropExpr.prototype.name;\n}\n\nexport class ReadKeyExpr extends Expression {\n/**\n * @param {?} receiver\n * @param {?} index\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic index: Expression, type: Type = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WriteKeyExpr {\n    return new WriteKeyExpr(this.receiver, this.index, value);\n  }\n}\n\nfunction ReadKeyExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nReadKeyExpr.prototype.receiver;\n/** @type {?} */\nReadKeyExpr.prototype.index;\n}\n\nexport class LiteralArrayExpr extends Expression {\npublic entries: Expression[];\n/**\n * @param {?} entries\n * @param {?=} type\n */\nconstructor(entries: Expression[], type: Type = null) {\n    super(type);\n    this.entries = entries;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n}\n\nfunction LiteralArrayExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralArrayExpr.prototype.entries;\n}\n\nexport class LiteralMapEntry {\n/**\n * @param {?} key\n * @param {?} value\n * @param {?=} quoted\n */\nconstructor(public key: string,\npublic value: Expression,\npublic quoted: boolean = false) {}\n}\n\nfunction LiteralMapEntry_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralMapEntry.prototype.key;\n/** @type {?} */\nLiteralMapEntry.prototype.value;\n/** @type {?} */\nLiteralMapEntry.prototype.quoted;\n}\n\nexport class LiteralMapExpr extends Expression {\npublic valueType: Type = null;\n/**\n * @param {?} entries\n * @param {?=} type\n */\nconstructor(public entries: LiteralMapEntry[], type: MapType = null) {\n    super(type);\n    if (isPresent(type)) {\n      this.valueType = type.valueType;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n}\n\nfunction LiteralMapExpr_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralMapExpr.prototype.valueType;\n/** @type {?} */\nLiteralMapExpr.prototype.entries;\n}\n\n\nexport interface ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n  visitWritePropExpr(expr: WritePropExpr, context: any): any;\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n  visitLiteralExpr(ast: LiteralExpr, context: any): any;\n  visitExternalExpr(ast: ExternalExpr, context: any): any;\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n  visitNotExpr(ast: NotExpr, context: any): any;\n  visitCastExpr(ast: CastExpr, context: any): any;\n  visitFunctionExpr(ast: FunctionExpr, context: any): any;\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n}\n\nexport const /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This);\nexport const /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);\nexport const /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);\nexport const /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);\nexport const /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null);\nexport const /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);\nexport type StmtModifier = number;\nexport let StmtModifier: any = {};\nStmtModifier.Final = 0;\nStmtModifier.Private = 1;\nStmtModifier[StmtModifier.Final] = \"Final\";\nStmtModifier[StmtModifier.Private] = \"Private\";\n\n/**\n * @abstract\n */\nexport abstract class Statement {\n/**\n * @param {?=} modifiers\n */\nconstructor(public modifiers: StmtModifier[] = null) {\n    if (!modifiers) {\n      this.modifiers = [];\n    }\n  }\n/**\n * @abstract\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any) {}\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\nfunction Statement_tsickle_Closure_declarations() {\n/** @type {?} */\nStatement.prototype.modifiers;\n}\n\nexport class DeclareVarStmt extends Statement {\npublic type: Type;\n/**\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(\npublic name: string,\npublic value: Expression, type: Type = null,\n      modifiers: StmtModifier[] = null) {\n    super(modifiers);\n    this.type = type || value.type;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n}\n\nfunction DeclareVarStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nDeclareVarStmt.prototype.type;\n/** @type {?} */\nDeclareVarStmt.prototype.name;\n/** @type {?} */\nDeclareVarStmt.prototype.value;\n}\n\nexport class DeclareFunctionStmt extends Statement {\n/**\n * @param {?} name\n * @param {?} params\n * @param {?} statements\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(\npublic name: string,\npublic params: FnParam[],\npublic statements: Statement[],\npublic type: Type = null, modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n}\n\nfunction DeclareFunctionStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nDeclareFunctionStmt.prototype.name;\n/** @type {?} */\nDeclareFunctionStmt.prototype.params;\n/** @type {?} */\nDeclareFunctionStmt.prototype.statements;\n/** @type {?} */\nDeclareFunctionStmt.prototype.type;\n}\n\nexport class ExpressionStatement extends Statement {\n/**\n * @param {?} expr\n */\nconstructor(public expr: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitExpressionStmt(this, context);\n  }\n}\n\nfunction ExpressionStatement_tsickle_Closure_declarations() {\n/** @type {?} */\nExpressionStatement.prototype.expr;\n}\n\nexport class ReturnStatement extends Statement {\n/**\n * @param {?} value\n */\nconstructor(public value: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitReturnStmt(this, context);\n  }\n}\n\nfunction ReturnStatement_tsickle_Closure_declarations() {\n/** @type {?} */\nReturnStatement.prototype.value;\n}\n\nexport class AbstractClassPart {\n/**\n * @param {?=} type\n * @param {?} modifiers\n */\nconstructor(public type: Type = null,\npublic modifiers: StmtModifier[]) {\n    if (!modifiers) {\n      this.modifiers = [];\n    }\n  }\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\nfunction AbstractClassPart_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractClassPart.prototype.type;\n/** @type {?} */\nAbstractClassPart.prototype.modifiers;\n}\n\nexport class ClassField extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string, type: Type = null, modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\nfunction ClassField_tsickle_Closure_declarations() {\n/** @type {?} */\nClassField.prototype.name;\n}\n\nexport class ClassMethod extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(\npublic name: string,\npublic params: FnParam[],\npublic body: Statement[], type: Type = null,\n      modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\nfunction ClassMethod_tsickle_Closure_declarations() {\n/** @type {?} */\nClassMethod.prototype.name;\n/** @type {?} */\nClassMethod.prototype.params;\n/** @type {?} */\nClassMethod.prototype.body;\n}\n\nexport class ClassGetter extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?} body\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(\npublic name: string,\npublic body: Statement[], type: Type = null,\n      modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\nfunction ClassGetter_tsickle_Closure_declarations() {\n/** @type {?} */\nClassGetter.prototype.name;\n/** @type {?} */\nClassGetter.prototype.body;\n}\n\nexport class ClassStmt extends Statement {\n/**\n * @param {?} name\n * @param {?} parent\n * @param {?} fields\n * @param {?} getters\n * @param {?} constructorMethod\n * @param {?} methods\n * @param {?=} modifiers\n */\nconstructor(\npublic name: string,\npublic parent: Expression,\npublic fields: ClassField[],\npublic getters: ClassGetter[],\npublic constructorMethod: ClassMethod,\npublic methods: ClassMethod[], modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareClassStmt(this, context);\n  }\n}\n\nfunction ClassStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nClassStmt.prototype.name;\n/** @type {?} */\nClassStmt.prototype.parent;\n/** @type {?} */\nClassStmt.prototype.fields;\n/** @type {?} */\nClassStmt.prototype.getters;\n/** @type {?} */\nClassStmt.prototype.constructorMethod;\n/** @type {?} */\nClassStmt.prototype.methods;\n}\n\nexport class IfStmt extends Statement {\n/**\n * @param {?} condition\n * @param {?} trueCase\n * @param {?=} falseCase\n */\nconstructor(\npublic condition: Expression,\npublic trueCase: Statement[],\npublic falseCase: Statement[] = []) {\n    super();\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitIfStmt(this, context);\n  }\n}\n\nfunction IfStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nIfStmt.prototype.condition;\n/** @type {?} */\nIfStmt.prototype.trueCase;\n/** @type {?} */\nIfStmt.prototype.falseCase;\n}\n\nexport class CommentStmt extends Statement {\n/**\n * @param {?} comment\n */\nconstructor(public comment: string) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitCommentStmt(this, context);\n  }\n}\n\nfunction CommentStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nCommentStmt.prototype.comment;\n}\n\nexport class TryCatchStmt extends Statement {\n/**\n * @param {?} bodyStmts\n * @param {?} catchStmts\n */\nconstructor(public bodyStmts: Statement[],\npublic catchStmts: Statement[]) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitTryCatchStmt(this, context);\n  }\n}\n\nfunction TryCatchStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nTryCatchStmt.prototype.bodyStmts;\n/** @type {?} */\nTryCatchStmt.prototype.catchStmts;\n}\n\nexport class ThrowStmt extends Statement {\n/**\n * @param {?} error\n */\nconstructor(public error: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitThrowStmt(this, context);\n  }\n}\n\nfunction ThrowStmt_tsickle_Closure_declarations() {\n/** @type {?} */\nThrowStmt.prototype.error;\n}\n\n\nexport interface StatementVisitor {\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n  visitReturnStmt(stmt: ReturnStatement, context: any): any;\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n  visitIfStmt(stmt: IfStmt, context: any): any;\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n  visitThrowStmt(stmt: ThrowStmt, context: any): any;\n  visitCommentStmt(stmt: CommentStmt, context: any): any;\n}\nexport class ExpressionTransformer implements StatementVisitor, ExpressionVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    return new WriteKeyExpr(\n        expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context),\n        expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWritePropExpr(expr: WritePropExpr, context: any): any {\n    return new WritePropExpr(\n        expr.receiver.visitExpression(this, context), expr.name,\n        expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    const /** @type {?} */ method = ast.builtin || ast.name;\n    return new InvokeMethodExpr(\n        ast.receiver.visitExpression(this, context), method,\n        this.visitAllExpressions(ast.args, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    return new InvokeFunctionExpr(\n        ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context),\n        ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    return new InstantiateExpr(\n        ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context),\n        ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    return new ConditionalExpr(\n        ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context),\n        ast.falseCase.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNotExpr(ast: NotExpr, context: any): any {\n    return new NotExpr(ast.condition.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: CastExpr, context: any): any {\n    return new CastExpr(ast.value.visitExpression(this, context), context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionExpr(ast: FunctionExpr, context: any): any {\n    // Don't descend into nested functions\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    return new BinaryOperatorExpr(\n        ast.operator, ast.lhs.visitExpression(this, context),\n        ast.rhs.visitExpression(this, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    return new ReadKeyExpr(\n        ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context),\n        ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    const /** @type {?} */ entries = ast.entries.map(\n        (entry): LiteralMapEntry => new LiteralMapEntry(\n            entry.key, entry.value.visitExpression(this, context), entry.quoted));\n    return new LiteralMapExpr(entries);\n  }\n/**\n * @param {?} exprs\n * @param {?} context\n * @return {?}\n */\nvisitAllExpressions(exprs: Expression[], context: any): Expression[] {\n    return exprs.map(expr => expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    return new DeclareVarStmt(\n        stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    return new ExpressionStatement(stmt.expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitReturnStmt(stmt: ReturnStatement, context: any): any {\n    return new ReturnStatement(stmt.value.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitIfStmt(stmt: IfStmt, context: any): any {\n    return new IfStmt(\n        stmt.condition.visitExpression(this, context),\n        this.visitAllStatements(stmt.trueCase, context),\n        this.visitAllStatements(stmt.falseCase, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    return new TryCatchStmt(\n        this.visitAllStatements(stmt.bodyStmts, context),\n        this.visitAllStatements(stmt.catchStmts, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitThrowStmt(stmt: ThrowStmt, context: any): any {\n    return new ThrowStmt(stmt.error.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n/**\n * @param {?} stmts\n * @param {?} context\n * @return {?}\n */\nvisitAllStatements(stmts: Statement[], context: any): Statement[] {\n    return stmts.map(stmt => stmt.visitStatement(this, context));\n  }\n}\nexport class RecursiveExpressionVisitor implements StatementVisitor, ExpressionVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.index.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWritePropExpr(expr: WritePropExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNotExpr(ast: NotExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: CastExpr, context: any): any {\n    ast.value.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionExpr(ast: FunctionExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    this.visitAllExpressions(ast.entries, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\n    return ast;\n  }\n/**\n * @param {?} exprs\n * @param {?} context\n * @return {?}\n */\nvisitAllExpressions(exprs: Expression[], context: any): void {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitReturnStmt(stmt: ReturnStatement, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitIfStmt(stmt: IfStmt, context: any): any {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    this.visitAllStatements(stmt.bodyStmts, context);\n    this.visitAllStatements(stmt.catchStmts, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitThrowStmt(stmt: ThrowStmt, context: any): any {\n    stmt.error.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n/**\n * @param {?} stmts\n * @param {?} context\n * @return {?}\n */\nvisitAllStatements(stmts: Statement[], context: any): void {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n}\n/**\n * @param {?} varName\n * @param {?} newValue\n * @param {?} expression\n * @return {?}\n */\nexport function replaceVarInExpression(\n    varName: string, newValue: Expression, expression: Expression): Expression {\n  const /** @type {?} */ transformer = new _ReplaceVariableTransformer(varName, newValue);\n  return expression.visitExpression(transformer, null);\n}\nclass _ReplaceVariableTransformer extends ExpressionTransformer {\n/**\n * @param {?} _varName\n * @param {?} _newValue\n */\nconstructor(private _varName: string,\nprivate _newValue: Expression) { super(); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    return ast.name == this._varName ? this._newValue : ast;\n  }\n}\n\nfunction _ReplaceVariableTransformer_tsickle_Closure_declarations() {\n/** @type {?} */\n_ReplaceVariableTransformer.prototype._varName;\n/** @type {?} */\n_ReplaceVariableTransformer.prototype._newValue;\n}\n\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function findReadVarNames(stmts: Statement[]): Set<string> {\n  const /** @type {?} */ finder = new _VariableFinder();\n  finder.visitAllStatements(stmts, null);\n  return finder.varNames;\n}\nclass _VariableFinder extends RecursiveExpressionVisitor {\n  varNames = new Set<string>();\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    this.varNames.add(ast.name);\n    return null;\n  }\n}\n\nfunction _VariableFinder_tsickle_Closure_declarations() {\n/** @type {?} */\n_VariableFinder.prototype.varNames;\n}\n\n/**\n * @param {?} name\n * @param {?=} type\n * @return {?}\n */\nexport function variable(name: string, type: Type = null): ReadVarExpr {\n  return new ReadVarExpr(name, type);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @return {?}\n */\nexport function importExpr(id: CompileIdentifierMetadata, typeParams: Type[] = null): ExternalExpr {\n  return new ExternalExpr(id, null, typeParams);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function importType(\n    id: CompileIdentifierMetadata, typeParams: Type[] = null,\n    typeModifiers: TypeModifier[] = null): ExpressionType {\n  return isPresent(id) ? expressionType(importExpr(id, typeParams), typeModifiers) : null;\n}\n/**\n * @param {?} expr\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function expressionType(\n    expr: Expression, typeModifiers: TypeModifier[] = null): ExpressionType {\n  return isPresent(expr) ? new ExpressionType(expr, typeModifiers) : null;\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @return {?}\n */\nexport function literalArr(values: Expression[], type: Type = null): LiteralArrayExpr {\n  return new LiteralArrayExpr(values, type);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @param {?=} quoted\n * @return {?}\n */\nexport function literalMap(\n    values: [string, Expression][], type: MapType = null, quoted: boolean = false): LiteralMapExpr {\n  return new LiteralMapExpr(\n      values.map(entry => new LiteralMapEntry(entry[0], entry[1], quoted)), type);\n}\n/**\n * @param {?} expr\n * @return {?}\n */\nexport function not(expr: Expression): NotExpr {\n  return new NotExpr(expr);\n}\n/**\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @return {?}\n */\nexport function fn(params: FnParam[], body: Statement[], type: Type = null): FunctionExpr {\n  return new FunctionExpr(params, body, type);\n}\n/**\n * @param {?} value\n * @param {?=} type\n * @return {?}\n */\nexport function literal(value: any, type: Type = null): LiteralExpr {\n  return new LiteralExpr(value, type);\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/output/abstract_emitter.ts"],"names":[],"mappings":"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","file":"abstract_emitter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isBlank, isPresent} from '../facade/lang';\n\nimport * as o from './output_ast';\n\nconst /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nexport const /** @type {?} */ CATCH_ERROR_VAR = o.variable('error');\nexport const /** @type {?} */ CATCH_STACK_VAR = o.variable('stack');\n/**\n * @abstract\n */\nexport abstract class OutputEmitter {\n/**\n * @abstract\n * @param {?} moduleUrl\n * @param {?} stmts\n * @param {?} exportedVars\n * @return {?}\n */\nemitStatements(moduleUrl: string, stmts: o.Statement[], exportedVars: string[]) {}\n}\nclass _EmittedLine {\n  parts: string[] = [];\n/**\n * @param {?} indent\n */\nconstructor(public indent: number) {}\n}\n\nfunction _EmittedLine_tsickle_Closure_declarations() {\n/** @type {?} */\n_EmittedLine.prototype.parts;\n/** @type {?} */\n_EmittedLine.prototype.indent;\n}\n\nexport class EmitterVisitorContext {\n/**\n * @param {?} exportedVars\n * @return {?}\n */\nstatic createRoot(exportedVars: string[]): EmitterVisitorContext {\n    return new EmitterVisitorContext(exportedVars, 0);\n  }\nprivate _lines: _EmittedLine[];\nprivate _classes: o.ClassStmt[] = [];\n/**\n * @param {?} _exportedVars\n * @param {?} _indent\n */\nconstructor(private _exportedVars: string[],\nprivate _indent: number) {\n    this._lines = [new _EmittedLine(_indent)];\n  }\n/**\n * @return {?}\n */\nprivate get _currentLine(): _EmittedLine { return this._lines[this._lines.length - 1]; }\n/**\n * @param {?} varName\n * @return {?}\n */\nisExportedVar(varName: string): boolean { return this._exportedVars.indexOf(varName) !== -1; }\n/**\n * @param {?=} lastPart\n * @return {?}\n */\nprintln(lastPart: string = ''): void { this.print(lastPart, true); }\n/**\n * @return {?}\n */\nlineIsEmpty(): boolean { return this._currentLine.parts.length === 0; }\n/**\n * @param {?} part\n * @param {?=} newLine\n * @return {?}\n */\nprint(part: string, newLine: boolean = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n/**\n * @return {?}\n */\nremoveEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n/**\n * @return {?}\n */\nincIndent() {\n    this._indent++;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @return {?}\n */\ndecIndent() {\n    this._indent--;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @param {?} clazz\n * @return {?}\n */\npushClass(clazz: o.ClassStmt) { this._classes.push(clazz); }\n/**\n * @return {?}\n */\npopClass(): o.ClassStmt { return this._classes.pop(); }\n/**\n * @return {?}\n */\nget currentClass(): o.ClassStmt {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n/**\n * @return {?}\n */\ntoSource(): any {\n    let /** @type {?} */ lines = this._lines;\n    if (lines[lines.length - 1].parts.length === 0) {\n      lines = lines.slice(0, lines.length - 1);\n    }\n    return lines\n        .map((line) => {\n          if (line.parts.length > 0) {\n            return _createIndent(line.indent) + line.parts.join('');\n          } else {\n            return '';\n          }\n        })\n        .join('\\n');\n  }\n}\n\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nEmitterVisitorContext.prototype._lines;\n/** @type {?} */\nEmitterVisitorContext.prototype._classes;\n/** @type {?} */\nEmitterVisitorContext.prototype._exportedVars;\n/** @type {?} */\nEmitterVisitorContext.prototype._indent;\n}\n\n/**\n * @abstract\n */\nexport abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} _escapeDollarInStrings\n */\nconstructor(private _escapeDollarInStrings: boolean) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any {\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any {\n    ctx.print(`return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: o.CastExpr, context: any) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(`) {`);\n    const /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(`} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(`}`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(`;`);\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lines = stmt.comment.split('\\n');\n    lines.forEach((line) => { ctx.println(`// ${line}`); });\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    ctx.print(`${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(`] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any {\n    expr.receiver.visitExpression(this, ctx);\n    let /** @type {?} */ name = expr.name;\n    if (isPresent(expr.builtin)) {\n      name = this.getBuiltinMethodName(expr.builtin);\n      if (isBlank(name)) {\n        // some builtins just mean to skip the call.\n        return null;\n      }\n    }\n    ctx.print(`.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} method\n * @return {?}\n */\ngetBuiltinMethodName(method: o.BuiltinMethod) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ varName = ast.name;\n    if (isPresent(ast.builtin)) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          varName = 'super';\n          break;\n        case o.BuiltinVar.This:\n          varName = 'this';\n          break;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR.name;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR.name;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    ctx.print(varName);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ value = ast.value;\n    if (typeof value === 'string') {\n      ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(`${value}`);\n    }\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print('? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any {\n    ctx.print('!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ opStr: string;\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case o.BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case o.BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case o.BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case o.BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case o.BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case o.BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case o.BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case o.BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case o.BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case o.BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case o.BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case o.BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case o.BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case o.BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    ctx.print(`(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`.`);\n    ctx.print(ast.name);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(`]`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(`[`, useNewLine);\n    ctx.incIndent();\n    this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`]`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(`{`, useNewLine);\n    ctx.incIndent();\n    this.visitAllObjects(entry => {\n      ctx.print(`${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}: `);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`}`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllExpressions(\n      expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    this.visitAllObjects(\n        expr => expr.visitExpression(this, ctx), expressions, ctx, separator, newLine);\n  }\n/**\n * @param {?} handler\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllObjects<T>(\n      handler: (t: T) => void, expressions: T[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    for (let /** @type {?} */ i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        ctx.print(separator, newLine);\n      }\n      handler(expressions[i]);\n    }\n    if (newLine) {\n      ctx.println();\n    }\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void {\n    statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n  }\n}\n\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractEmitterVisitor.prototype._escapeDollarInStrings;\n}\n\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(\n    input: string, escapeDollar: boolean, alwaysQuote: boolean = true): any {\n  if (isBlank(input)) {\n    return null;\n  }\n  const /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match: string[]) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count: number): string {\n  let /** @type {?} */ res = '';\n  for (let /** @type {?} */ i = 0; i < count; i++) {\n    res += '  ';\n  }\n  return res;\n}\n"]}
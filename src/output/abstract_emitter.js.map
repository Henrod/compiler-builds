{"version":3,"sources":["../../../../../modules/@angular/compiler/src/output/abstract_emitter.ts"],"names":[],"mappings":"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","file":"abstract_emitter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isBlank, isPresent} from '../facade/lang';\nimport {ParseSourceSpan} from '../parse_util';\n\nimport * as o from './output_ast';\nimport {SourceMapGenerator} from './source_map';\n\nconst /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst /** @type {?} */ _INDENT_WITH = '  ';\nexport const /** @type {?} */ CATCH_ERROR_VAR = o.variable('error');\nexport const /** @type {?} */ CATCH_STACK_VAR = o.variable('stack');\n/**\n * @abstract\n */\nexport abstract class OutputEmitter {\n/**\n * @abstract\n * @param {?} moduleUrl\n * @param {?} stmts\n * @param {?} exportedVars\n * @return {?}\n */\nemitStatements(moduleUrl: string, stmts: o.Statement[], exportedVars: string[]) {}\n}\nclass _EmittedLine {\n  parts: string[] = [];\n  srcSpans: ParseSourceSpan[] = [];\n/**\n * @param {?} indent\n */\nconstructor(public indent: number) {}\n}\n\nfunction _EmittedLine_tsickle_Closure_declarations() {\n/** @type {?} */\n_EmittedLine.prototype.parts;\n/** @type {?} */\n_EmittedLine.prototype.srcSpans;\n/** @type {?} */\n_EmittedLine.prototype.indent;\n}\n\nexport class EmitterVisitorContext {\n/**\n * @param {?} exportedVars\n * @return {?}\n */\nstatic createRoot(exportedVars: string[]): EmitterVisitorContext {\n    return new EmitterVisitorContext(exportedVars, 0);\n  }\nprivate _lines: _EmittedLine[];\nprivate _classes: o.ClassStmt[] = [];\n/**\n * @param {?} _exportedVars\n * @param {?} _indent\n */\nconstructor(private _exportedVars: string[],\nprivate _indent: number) {\n    this._lines = [new _EmittedLine(_indent)];\n  }\n/**\n * @return {?}\n */\nprivate get _currentLine(): _EmittedLine { return this._lines[this._lines.length - 1]; }\n/**\n * @param {?} varName\n * @return {?}\n */\nisExportedVar(varName: string): boolean { return this._exportedVars.indexOf(varName) !== -1; }\n/**\n * @param {?=} from\n * @param {?=} lastPart\n * @return {?}\n */\nprintln(from?: {sourceSpan?: ParseSourceSpan}|null, lastPart: string = ''): void {\n    this.print(from, lastPart, true);\n  }\n/**\n * @return {?}\n */\nlineIsEmpty(): boolean { return this._currentLine.parts.length === 0; }\n/**\n * @param {?} from\n * @param {?} part\n * @param {?=} newLine\n * @return {?}\n */\nprint(from: {sourceSpan?: ParseSourceSpan}|null, part: string, newLine: boolean = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n      this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n/**\n * @return {?}\n */\nremoveEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n/**\n * @return {?}\n */\nincIndent() {\n    this._indent++;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @return {?}\n */\ndecIndent() {\n    this._indent--;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @param {?} clazz\n * @return {?}\n */\npushClass(clazz: o.ClassStmt) { this._classes.push(clazz); }\n/**\n * @return {?}\n */\npopClass(): o.ClassStmt { return this._classes.pop(); }\n/**\n * @return {?}\n */\nget currentClass(): o.ClassStmt {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n/**\n * @return {?}\n */\ntoSource(): string {\n    return this.sourceLines\n        .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\n        .join('\\n');\n  }\n/**\n * @param {?=} file\n * @param {?=} startsAtLine\n * @return {?}\n */\ntoSourceMapGenerator(file: string|null = null, startsAtLine: number = 0): SourceMapGenerator {\n    const /** @type {?} */ map = new SourceMapGenerator(file);\n    for (let /** @type {?} */ i = 0; i < startsAtLine; i++) {\n      map.addLine();\n    }\n\n    this.sourceLines.forEach(line => {\n      map.addLine();\n\n      const /** @type {?} */ spans = line.srcSpans;\n      const /** @type {?} */ parts = line.parts;\n      let /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;\n      let /** @type {?} */ spanIdx = 0;\n      // skip leading parts without source spans\n      while (spanIdx < spans.length && !spans[spanIdx]) {\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n      }\n\n      while (spanIdx < spans.length) {\n        const /** @type {?} */ span = spans[spanIdx];\n        const /** @type {?} */ source = span.start.file;\n        const /** @type {?} */ sourceLine = span.start.line;\n        const /** @type {?} */ sourceCol = span.start.col;\n\n        map.addSource(source.url, source.content)\n            .addMapping(col0, source.url, sourceLine, sourceCol);\n\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n\n        // assign parts without span or the same span to the previous segment\n        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n          col0 += parts[spanIdx].length;\n          spanIdx++;\n        }\n      }\n    });\n\n    return map;\n  }\n/**\n * @return {?}\n */\nprivate get sourceLines(): _EmittedLine[] {\n    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n      return this._lines.slice(0, -1);\n    }\n    return this._lines;\n  }\n}\n\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nEmitterVisitorContext.prototype._lines;\n/** @type {?} */\nEmitterVisitorContext.prototype._classes;\n/** @type {?} */\nEmitterVisitorContext.prototype._exportedVars;\n/** @type {?} */\nEmitterVisitorContext.prototype._indent;\n}\n\n/**\n * @abstract\n */\nexport abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} _escapeDollarInStrings\n */\nconstructor(private _escapeDollarInStrings: boolean) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any {\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: o.CastExpr, context: any) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(stmt, `) {`);\n    const /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(stmt, ` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(stmt, ` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(stmt, `} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(stmt, `}`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(stmt, `throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(stmt, `;`);\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lines = stmt.comment.split('\\n');\n    lines.forEach((line) => { ctx.println(stmt, `// ${line}`); });\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    ctx.print(expr, `${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(expr, `] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any {\n    expr.receiver.visitExpression(this, ctx);\n    let /** @type {?} */ name = expr.name;\n    if (isPresent(expr.builtin)) {\n      name = this.getBuiltinMethodName(expr.builtin);\n      if (isBlank(name)) {\n        // some builtins just mean to skip the call.\n        return null;\n      }\n    }\n    ctx.print(expr, `.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(expr, `)`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} method\n * @return {?}\n */\ngetBuiltinMethodName(method: o.BuiltinMethod) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(expr, `(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(expr, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ varName = ast.name;\n    if (isPresent(ast.builtin)) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          varName = 'super';\n          break;\n        case o.BuiltinVar.This:\n          varName = 'this';\n          break;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR.name;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR.name;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    ctx.print(ast, varName);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(ast, `(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ value = ast.value;\n    if (typeof value === 'string') {\n      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(ast, `${value}`);\n    }\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, `(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print(ast, '? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(ast, ': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(ast, '!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ opStr: string;\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case o.BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case o.BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case o.BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case o.BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case o.BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case o.BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case o.BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case o.BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case o.BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case o.BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case o.BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case o.BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case o.BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case o.BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    ctx.print(ast, `(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(ast, ` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `.`);\n    ctx.print(ast, ast.name);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(ast, `]`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(ast, `[`, useNewLine);\n    ctx.incIndent();\n    this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(ast, `]`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(ast, `{`, useNewLine);\n    ctx.incIndent();\n    this.visitAllObjects(entry => {\n      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}: `);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(ast, `}`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllExpressions(\n      expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    this.visitAllObjects(\n        expr => expr.visitExpression(this, ctx), expressions, ctx, separator, newLine);\n  }\n/**\n * @param {?} handler\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllObjects<T>(\n      handler: (t: T) => void, expressions: T[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    for (let /** @type {?} */ i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        ctx.print(null, separator, newLine);\n      }\n      handler(expressions[i]);\n    }\n    if (newLine) {\n      ctx.println();\n    }\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void {\n    statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n  }\n}\n\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractEmitterVisitor.prototype._escapeDollarInStrings;\n}\n\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(\n    input: string, escapeDollar: boolean, alwaysQuote: boolean = true): any {\n  if (isBlank(input)) {\n    return null;\n  }\n  const /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match: string[]) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count: number): string {\n  let /** @type {?} */ res = '';\n  for (let /** @type {?} */ i = 0; i < count; i++) {\n    res += _INDENT_WITH;\n  }\n  return res;\n}\n"]}
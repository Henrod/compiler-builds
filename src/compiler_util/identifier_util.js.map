{"version":3,"file":"identifier_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/identifier_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,SAAS,EAAC,MAAM,gBAAgB;OACjC,EAAC,WAAW,EAAE,iBAAiB,EAAC,MAAM,gBAAgB;OACtD,KAAK,CAAC,MAAM,sBAAsB;AAEzC,wCAAwC,KAA2B;IACjE,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC;aAChC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnF,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;AACH,CAAC;AAED,kCAAkC,MAAsB;IACtD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzE,CAAC;IACD,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAM,cAAc,GAAG,KAAK,GAAG,WAAW,CAAC,YAAY,CAAC,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC;QAC/B,WAAW,CAAC,kBAAkB,CAAC;IAChG,IAAM,UAAU,GAAG,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACrD,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;QAC5B,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;KACvC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AACpB,CAAC;AAED,gCACI,EAAgB,EAAE,QAAgB,EAAE,aAA6B,EACjE,OAAiF;IACnF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAChE,IAAI,WAAW,GACX,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACzF,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,wDAAsD,QAAU,CAAC,CAAC;IACpF,CAAC;IACD,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;SAC/B,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC9D,MAAM,EAAE,CAAC,CAAC;AACxC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileTokenMetadata} from '../compile_metadata';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\n\nexport function createDiTokenExpression(token: CompileTokenMetadata): o.Expression {\n  if (isPresent(token.value)) {\n    return o.literal(token.value);\n  } else if (token.identifierIsInstance) {\n    return o.importExpr(token.identifier)\n        .instantiate([], o.importType(token.identifier, [], [o.TypeModifier.Const]));\n  } else {\n    return o.importExpr(token.identifier);\n  }\n}\n\nexport function createInlineArray(values: o.Expression[]): o.Expression {\n  if (values.length === 0) {\n    return o.importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));\n  }\n  const log2 = Math.log(values.length) / Math.log(2);\n  const index = Math.ceil(log2);\n  const identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :\n                                                                   Identifiers.InlineArrayDynamic;\n  const identifier = resolveIdentifier(identifierSpec);\n  return o.importExpr(identifier).instantiate([\n    <o.Expression>o.literal(values.length)\n  ].concat(values));\n}\n\nexport function createPureProxy(\n    fn: o.Expression, argCount: number, pureProxyProp: o.ReadPropExpr,\n    builder: {fields: o.ClassField[], ctorStmts: {push: (stmt: o.Statement) => void}}) {\n  builder.fields.push(new o.ClassField(pureProxyProp.name, null));\n  var pureProxyId =\n      argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;\n  if (!pureProxyId) {\n    throw new Error(`Unsupported number of argument for pure functions: ${argCount}`);\n  }\n  builder.ctorStmts.push(o.THIS_EXPR.prop(pureProxyProp.name)\n                             .set(o.importExpr(resolveIdentifier(pureProxyId)).callFn([fn]))\n                             .toStmt());\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
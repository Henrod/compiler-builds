{"version":3,"file":"render_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/render_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SecurityContext} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {BoundElementPropertyAst, PropertyBindingType} from '../template_parser/template_ast';\n\nexport function writeToRenderer(\n    view: o.Expression, boundProp: BoundElementPropertyAst, renderNode: o.Expression,\n    renderValue: o.Expression, logBindingUpdate: boolean): o.Statement[] {\n  const updateStmts: o.Statement[] = [];\n  const renderer = view.prop('renderer');\n  renderValue = sanitizedValue(view, boundProp, renderValue);\n  switch (boundProp.type) {\n    case PropertyBindingType.Property:\n      if (logBindingUpdate) {\n        updateStmts.push(o.importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo))\n                             .callFn([renderer, renderNode, o.literal(boundProp.name), renderValue])\n                             .toStmt());\n      }\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementProperty', [renderNode, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Attribute:\n      renderValue =\n          renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementAttribute', [renderNode, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Class:\n      updateStmts.push(\n          renderer\n              .callMethod('setElementClass', [renderNode, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Style:\n      var strValue: o.Expression = renderValue.callMethod('toString', []);\n      if (isPresent(boundProp.unit)) {\n        strValue = strValue.plus(o.literal(boundProp.unit));\n      }\n\n      renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);\n      updateStmts.push(\n          renderer\n              .callMethod('setElementStyle', [renderNode, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Animation:\n      throw new Error('Illegal state: Should not come here!');\n  }\n  return updateStmts;\n}\n\nfunction sanitizedValue(\n    view: o.Expression, boundProp: BoundElementPropertyAst,\n    renderValue: o.Expression): o.Expression {\n  let enumValue: string;\n  switch (boundProp.securityContext) {\n    case SecurityContext.NONE:\n      return renderValue;  // No sanitization needed.\n    case SecurityContext.HTML:\n      enumValue = 'HTML';\n      break;\n    case SecurityContext.STYLE:\n      enumValue = 'STYLE';\n      break;\n    case SecurityContext.SCRIPT:\n      enumValue = 'SCRIPT';\n      break;\n    case SecurityContext.URL:\n      enumValue = 'URL';\n      break;\n    case SecurityContext.RESOURCE_URL:\n      enumValue = 'RESOURCE_URL';\n      break;\n    default:\n      throw new Error(`internal error, unexpected SecurityContext ${boundProp.securityContext}.`);\n  }\n  let ctx = view.prop('viewUtils').prop('sanitizer');\n  let args =\n      [o.importExpr(resolveIdentifier(Identifiers.SecurityContext)).prop(enumValue), renderValue];\n  return ctx.callMethod('sanitize', args);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
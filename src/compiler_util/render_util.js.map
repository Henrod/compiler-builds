{"version":3,"sources":["../../../../../modules/@angular/compiler/src/compiler_util/render_util.ts"],"names":[],"mappings":"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","file":"render_util.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SecurityContext} from '@angular/core/index';\n\nimport {Identifiers, createIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {EMPTY_STATE as EMPTY_ANIMATION_STATE} from '../private_import_core';\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType} from '../template_parser/template_ast';\n\nimport {isFirstViewCheck} from './binding_util';\nimport {ConvertPropertyBindingResult} from './expression_converter';\nimport {createEnumExpression} from './identifier_util';\n/**\n * @param {?} view\n * @param {?} renderElement\n * @param {?} boundProp\n * @param {?} oldValue\n * @param {?} evalResult\n * @param {?=} securityContextExpression\n * @return {?}\n */\nexport function createCheckRenderBindingStmt(\n    view: o.Expression, renderElement: o.Expression, boundProp: BoundElementPropertyAst,\n    oldValue: o.ReadPropExpr, evalResult: ConvertPropertyBindingResult,\n    securityContextExpression?: o.Expression): o.Statement[] {\n  const /** @type {?} */ checkStmts: o.Statement[] = [...evalResult.stmts];\n  const /** @type {?} */ securityContext = calcSecurityContext(boundProp, securityContextExpression);\n  switch (boundProp.type) {\n    case PropertyBindingType.Property:\n      checkStmts.push(o.importExpr(createIdentifier(Identifiers.checkRenderProperty))\n                          .callFn([\n                            view, renderElement, o.literal(boundProp.name), oldValue,\n                            oldValue.set(evalResult.currValExpr),\n                            evalResult.forceUpdate || o.literal(false), securityContext\n                          ])\n                          .toStmt());\n      break;\n    case PropertyBindingType.Attribute:\n      checkStmts.push(o.importExpr(createIdentifier(Identifiers.checkRenderAttribute))\n                          .callFn([\n                            view, renderElement, o.literal(boundProp.name), oldValue,\n                            oldValue.set(evalResult.currValExpr),\n                            evalResult.forceUpdate || o.literal(false), securityContext\n                          ])\n                          .toStmt());\n      break;\n    case PropertyBindingType.Class:\n      checkStmts.push(\n          o.importExpr(createIdentifier(Identifiers.checkRenderClass))\n              .callFn([\n                view, renderElement, o.literal(boundProp.name), oldValue,\n                oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || o.literal(false)\n              ])\n              .toStmt());\n      break;\n    case PropertyBindingType.Style:\n      checkStmts.push(\n          o.importExpr(createIdentifier(Identifiers.checkRenderStyle))\n              .callFn([\n                view, renderElement, o.literal(boundProp.name), o.literal(boundProp.unit), oldValue,\n                oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || o.literal(false),\n                securityContext\n              ])\n              .toStmt());\n      break;\n    case PropertyBindingType.Animation:\n      throw new Error('Illegal state: Should not come here!');\n  }\n  return checkStmts;\n}\n/**\n * @param {?} boundProp\n * @param {?=} securityContextExpression\n * @return {?}\n */\nfunction calcSecurityContext(\n    boundProp: BoundElementPropertyAst, securityContextExpression?: o.Expression): o.Expression {\n  if (boundProp.securityContext === SecurityContext.NONE) {\n    return o.NULL_EXPR;  // No sanitization needed.\n  }\n  if (!boundProp.needsRuntimeSecurityContext) {\n    securityContextExpression =\n        createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);\n  }\n  if (!securityContextExpression) {\n    throw new Error(`internal error, no SecurityContext given ${boundProp.name}`);\n  }\n  return securityContextExpression;\n}\n/**\n * @param {?} view\n * @param {?} componentView\n * @param {?} boundProp\n * @param {?} boundOutputs\n * @param {?} eventListener\n * @param {?} renderElement\n * @param {?} oldValue\n * @param {?} evalResult\n * @return {?}\n */\nexport function createCheckAnimationBindingStmts(\n    view: o.Expression, componentView: o.Expression, boundProp: BoundElementPropertyAst,\n    boundOutputs: BoundEventAst[], eventListener: o.Expression, renderElement: o.Expression,\n    oldValue: o.ReadPropExpr, evalResult: ConvertPropertyBindingResult) {\n  const /** @type {?} */ detachStmts: o.Statement[] = [];\n  const /** @type {?} */ updateStmts: o.Statement[] = [];\n\n  const /** @type {?} */ animationName = boundProp.name;\n\n  const /** @type {?} */ animationFnExpr =\n      componentView.prop('componentType').prop('animations').key(o.literal(animationName));\n\n  // it's important to normalize the void value as `void` explicitly\n  // so that the styles data can be obtained from the stringmap\n  const /** @type {?} */ emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);\n  const /** @type {?} */ animationTransitionVar = o.variable('animationTransition_' + animationName);\n\n  updateStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([\n            view, renderElement, isFirstViewCheck(view).conditional(emptyStateValue, oldValue),\n            evalResult.currValExpr\n          ]))\n          .toDeclStmt());\n  updateStmts.push(oldValue.set(evalResult.currValExpr).toStmt());\n\n  detachStmts.push(animationTransitionVar\n                       .set(animationFnExpr.callFn(\n                           [view, renderElement, evalResult.currValExpr, emptyStateValue]))\n                       .toDeclStmt());\n\n  const /** @type {?} */ registerStmts: o.Statement[] = [];\n  const /** @type {?} */ animationStartMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'start');\n  if (animationStartMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onStart',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])\n            .toStmt());\n  }\n\n  const /** @type {?} */ animationDoneMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'done');\n  if (animationDoneMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onDone',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])\n            .toStmt());\n  }\n\n  updateStmts.push(...registerStmts);\n  detachStmts.push(...registerStmts);\n\n  const /** @type {?} */ checkUpdateStmts: o.Statement[] = [\n    ...evalResult.stmts,\n    new o.IfStmt(\n        o.importExpr(createIdentifier(Identifiers.checkBinding)).callFn([\n          view, oldValue, evalResult.currValExpr, evalResult.forceUpdate || o.literal(false)\n        ]),\n        updateStmts)\n  ];\n  const /** @type {?} */ checkDetachStmts: o.Statement[] = [...evalResult.stmts, ...detachStmts];\n  return {checkUpdateStmts, checkDetachStmts};\n}\n"]}
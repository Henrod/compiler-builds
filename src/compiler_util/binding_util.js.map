{"version":3,"sources":["../../../../../modules/@angular/compiler/src/compiler_util/binding_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,CAAA,MAAA,sBAAA,CAAA;AACZ;IACA;;;OAGG;IACH,2BAHqB,UAAe,EAAoB,SAAW;QAA9C,eAAA,GAAA,UAAA,CAAe;QAAoB,cAAA,GAAA,SAAA,CAAW;IAAO,CAAA;IAK1E,wBAAC;AAAD,CAPA,AAOC,IAAA;;AAED;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;IACvC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,SAAS,CAAC;AACtC,CAAC;AAED;;;GAGG;AACH,MAfC,kCAAA,OAAA;IAgBC,IAAM,gBAAgB,CAfhB,SAAA,GAAY,KAAA,OAAI,CAAO,MAAC,CAAM,MAAO,CAAE;IAgB7C,IAAM,gBAAgB,CAfhB,SAAA,GAAY,mBAAA,CAAoB,SAAC,CAAS,CAAC;IAgBjD,2EAA2E;IAC3E,OAAO,CAfC,MAAC,CAAM,IAAC,CAAI,IAAI,CAAA,CAAE,UAAC,CAAU,SAAC,CAAS,IAAC,EAAK,IAAA,EAAM,CAAA,CAAE,CAAC,YAAC,CAAY,OAAC,CAAO,CAAC,CAAC,CAAC;IAgBtF,OAAO,CAfC,SAAC,CAAS,IAAC,CAAI,CAAC,CAAC,SAAC,CAAS,IAAC,CAAI,SAAC,CAAS,IAAC,CAAI,CAAC,GAAC,CAAG,CAAC,CAAC,OAAC,CAAO,SAAC,CAAS,CAAC,CAAC,MAAC,EAAM,CAAE,CAAC;IAgB5F,MAAM,CAfC,IAAI,iBAAA,CAAkB,SAAC,EAAU,SAAA,CAAU,CAAC;AAgBrD,CAAC;AACD;;;GAGG;AACH,6BAlBC,SAAA;IAmBC,MAAM,CAlBC,CAAA,CAAE,SAAC,CAAS,IAAC,CAAI,WAAC,SAAkB,CAAE,CAAC;AAmBhD,CAAC;AACD;;;GAGG;AACH,MArBC,2BAAA,IAAA;IAsBC,MAAM,CArBC,CAAA,CAAE,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,gBAAC,CAAgB,CAAC,CAAC;AAsB5C,CAAC","file":"binding_util.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ClassBuilder} from '../output/class_builder';\nimport * as o from '../output/output_ast';\nexport class CheckBindingField {\n/**\n * @param {?} expression\n * @param {?} bindingId\n */\nconstructor(public expression: o.ReadPropExpr,\npublic bindingId: string) {}\n}\n\nfunction CheckBindingField_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBindingField.prototype.expression;\n/** @type {?} */\nCheckBindingField.prototype.bindingId;\n}\n\n/**\n * @param {?} builder\n * @return {?}\n */\nexport function createCheckBindingField(builder: ClassBuilder): CheckBindingField {\n  const /** @type {?} */ bindingId = `${builder.fields.length}`;\n  const /** @type {?} */ fieldExpr = createBindFieldExpr(bindingId);\n  // private is fine here as no child view will reference the cached value...\n  builder.fields.push(new o.ClassField(fieldExpr.name, null, [o.StmtModifier.Private]));\n  builder.ctorStmts.push(o.THIS_EXPR.prop(fieldExpr.name).set(o.literal(undefined)).toStmt());\n  return new CheckBindingField(fieldExpr, bindingId);\n}\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createBindFieldExpr(bindingId: string): o.ReadPropExpr {\n  return o.THIS_EXPR.prop(`_expr_${bindingId}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isFirstViewCheck(view: o.Expression): o.Expression {\n  return o.not(view.prop('numberOfChecks'));\n}"]}
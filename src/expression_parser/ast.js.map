{"version":3,"sources":["../../../../../modules/@angular/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isBlank} from '../facade/lang';\nexport class ParserError {\npublic message: string;\n/**\n * @param {?} message\n * @param {?} input\n * @param {?} errLocation\n * @param {?=} ctxLocation\n */\nconstructor(\n      message: string,\npublic input: string,\npublic errLocation: string,\npublic ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nfunction ParserError_tsickle_Closure_declarations() {\n/** @type {?} */\nParserError.prototype.message;\n/** @type {?} */\nParserError.prototype.input;\n/** @type {?} */\nParserError.prototype.errLocation;\n/** @type {?} */\nParserError.prototype.ctxLocation;\n}\n\nexport class ParseSpan {\n/**\n * @param {?} start\n * @param {?} end\n */\nconstructor(public start: number,\npublic end: number) {}\n}\n\nfunction ParseSpan_tsickle_Closure_declarations() {\n/** @type {?} */\nParseSpan.prototype.start;\n/** @type {?} */\nParseSpan.prototype.end;\n}\n\nexport class AST {\n/**\n * @param {?} span\n */\nconstructor(public span: ParseSpan) {}\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return null; }\n/**\n * @return {?}\n */\ntoString(): string { return 'AST'; }\n}\n\nfunction AST_tsickle_Closure_declarations() {\n/** @type {?} */\nAST.prototype.span;\n}\n\n/**\n * Represents a quoted expression of the form:\n * \n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n * \n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n/**\n * @param {?} span\n * @param {?} prefix\n * @param {?} uninterpretedExpression\n * @param {?} location\n */\nconstructor(\n      span: ParseSpan,\npublic prefix: string,\npublic uninterpretedExpression: string,\npublic location: any) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n/**\n * @return {?}\n */\ntoString(): string { return 'Quote'; }\n}\n\nfunction Quote_tsickle_Closure_declarations() {\n/** @type {?} */\nQuote.prototype.prefix;\n/** @type {?} */\nQuote.prototype.uninterpretedExpression;\n/** @type {?} */\nQuote.prototype.location;\n}\n\nexport class EmptyExpr extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\nexport class ImplicitReceiver extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nfunction Chain_tsickle_Closure_declarations() {\n/** @type {?} */\nChain.prototype.expressions;\n}\n\nexport class Conditional extends AST {\n/**\n * @param {?} span\n * @param {?} condition\n * @param {?} trueExp\n * @param {?} falseExp\n */\nconstructor(span: ParseSpan,\npublic condition: AST,\npublic trueExp: AST,\npublic falseExp: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nfunction Conditional_tsickle_Closure_declarations() {\n/** @type {?} */\nConditional.prototype.condition;\n/** @type {?} */\nConditional.prototype.trueExp;\n/** @type {?} */\nConditional.prototype.falseExp;\n}\n\nexport class PropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nfunction PropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyRead.prototype.receiver;\n/** @type {?} */\nPropertyRead.prototype.name;\n}\n\nexport class PropertyWrite extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic value: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nfunction PropertyWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyWrite.prototype.receiver;\n/** @type {?} */\nPropertyWrite.prototype.name;\n/** @type {?} */\nPropertyWrite.prototype.value;\n}\n\nexport class SafePropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nfunction SafePropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nSafePropertyRead.prototype.receiver;\n/** @type {?} */\nSafePropertyRead.prototype.name;\n}\n\nexport class KeyedRead extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nfunction KeyedRead_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedRead.prototype.obj;\n/** @type {?} */\nKeyedRead.prototype.key;\n}\n\nexport class KeyedWrite extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST,\npublic value: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nfunction KeyedWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedWrite.prototype.obj;\n/** @type {?} */\nKeyedWrite.prototype.key;\n/** @type {?} */\nKeyedWrite.prototype.value;\n}\n\nexport class BindingPipe extends AST {\n/**\n * @param {?} span\n * @param {?} exp\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic exp: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nfunction BindingPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingPipe.prototype.exp;\n/** @type {?} */\nBindingPipe.prototype.name;\n/** @type {?} */\nBindingPipe.prototype.args;\n}\n\nexport class LiteralPrimitive extends AST {\n/**\n * @param {?} span\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic value: any) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nfunction LiteralPrimitive_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralPrimitive.prototype.value;\n}\n\nexport class LiteralArray extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nfunction LiteralArray_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralArray.prototype.expressions;\n}\n\nexport class LiteralMap extends AST {\n/**\n * @param {?} span\n * @param {?} keys\n * @param {?} values\n */\nconstructor(span: ParseSpan,\npublic keys: any[],\npublic values: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nfunction LiteralMap_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralMap.prototype.keys;\n/** @type {?} */\nLiteralMap.prototype.values;\n}\n\nexport class Interpolation extends AST {\n/**\n * @param {?} span\n * @param {?} strings\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic strings: any[],\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nfunction Interpolation_tsickle_Closure_declarations() {\n/** @type {?} */\nInterpolation.prototype.strings;\n/** @type {?} */\nInterpolation.prototype.expressions;\n}\n\nexport class Binary extends AST {\n/**\n * @param {?} span\n * @param {?} operation\n * @param {?} left\n * @param {?} right\n */\nconstructor(span: ParseSpan,\npublic operation: string,\npublic left: AST,\npublic right: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nfunction Binary_tsickle_Closure_declarations() {\n/** @type {?} */\nBinary.prototype.operation;\n/** @type {?} */\nBinary.prototype.left;\n/** @type {?} */\nBinary.prototype.right;\n}\n\nexport class PrefixNot extends AST {\n/**\n * @param {?} span\n * @param {?} expression\n */\nconstructor(span: ParseSpan,\npublic expression: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nfunction PrefixNot_tsickle_Closure_declarations() {\n/** @type {?} */\nPrefixNot.prototype.expression;\n}\n\nexport class MethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nfunction MethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nMethodCall.prototype.receiver;\n/** @type {?} */\nMethodCall.prototype.name;\n/** @type {?} */\nMethodCall.prototype.args;\n}\n\nexport class SafeMethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nfunction SafeMethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeMethodCall.prototype.receiver;\n/** @type {?} */\nSafeMethodCall.prototype.name;\n/** @type {?} */\nSafeMethodCall.prototype.args;\n}\n\nexport class FunctionCall extends AST {\n/**\n * @param {?} span\n * @param {?} target\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic target: AST,\npublic args: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nfunction FunctionCall_tsickle_Closure_declarations() {\n/** @type {?} */\nFunctionCall.prototype.target;\n/** @type {?} */\nFunctionCall.prototype.args;\n}\n\nexport class ASTWithSource extends AST {\n/**\n * @param {?} ast\n * @param {?} source\n * @param {?} location\n * @param {?} errors\n */\nconstructor(\npublic ast: AST,\npublic source: string,\npublic location: string,\npublic errors: ParserError[]) {\n    super(new ParseSpan(0, isBlank(source) ? 0 : source.length));\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n/**\n * @return {?}\n */\ntoString(): string { return `${this.source} in ${this.location}`; }\n}\n\nfunction ASTWithSource_tsickle_Closure_declarations() {\n/** @type {?} */\nASTWithSource.prototype.ast;\n/** @type {?} */\nASTWithSource.prototype.source;\n/** @type {?} */\nASTWithSource.prototype.location;\n/** @type {?} */\nASTWithSource.prototype.errors;\n}\n\nexport class TemplateBinding {\n/**\n * @param {?} span\n * @param {?} key\n * @param {?} keyIsVar\n * @param {?} name\n * @param {?} expression\n */\nconstructor(\npublic span: ParseSpan,\npublic key: string,\npublic keyIsVar: boolean,\npublic name: string,\npublic expression: ASTWithSource) {}\n}\n\nfunction TemplateBinding_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateBinding.prototype.span;\n/** @type {?} */\nTemplateBinding.prototype.key;\n/** @type {?} */\nTemplateBinding.prototype.keyIsVar;\n/** @type {?} */\nTemplateBinding.prototype.name;\n/** @type {?} */\nTemplateBinding.prototype.expression;\n}\n\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n}\nexport class RecursiveAstVisitor implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} asts\n * @param {?} context\n * @return {?}\n */\nvisitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): any { return null; }\n}\nexport class AstTransformer implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n/**\n * @param {?} asts\n * @return {?}\n */\nvisitAll(asts: any[]): any[] {\n    const /** @type {?} */ res = new Array(asts.length);\n    for (let /** @type {?} */ i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n"]}
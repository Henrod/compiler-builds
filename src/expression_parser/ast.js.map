{"version":3,"sources":["../../../../../modules/@angular/compiler/src/expression_parser/ast.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAA,OAAE,EAAO,MAAA,gBAAA,CAAA;AAChB,MACC;IACD;;;;;OAKG;IACH,YACM,OALS,EAAe,KAAO,EAAe,WAAa,EAAe,WAAc;QAAhE,UAAA,GAAA,KAAA,CAAO;QAAe,gBAAA,GAAA,WAAA,CAAa;QAAe,gBAAA,GAAA,WAAA,CAAc;QAS1F,IAAI,CAAC,OAAO,GAAG,iBAAiB,OAAO,IAAI,WAAW,KAAK,KAAK,QAAQ,WAAW,EAAE,CAAC;IACxF,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC;IAC5B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC;IAClC,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC;AAClC,CAAC;AAED,MAnBC;IAoBD;;;OAGG;IACH,YAvBqB,KAAO,EAAe,GAAK;QAA3B,UAAA,GAAA,KAAA,CAAO;QAAe,QAAA,GAAA,GAAA,CAAK;IAAO,CAAA;CAyBtD;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC;IAC1B,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;AACxB,CAAC;AAED,MA/BC;IAgCD;;OAEG;IACH,YAlCqB,IAAM;QAAN,SAAA,GAAA,IAAA,CAAM;IAAU,CAAA;IAmCrC;;;;OAIG;IACH,KAvCG,CAAA,OAAA,EAAA,UAAA,IAAA,IAAsD,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAwCtE;;OAEG;IACH,QA1CG,KAAoB,MAAA,CAAO,KAAA,CAAM,CAAC,CAAA;CA2CpC;AAED;IACA,gBAAgB;IAChB,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC;AACnB,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MA/CC,YAAA,SAAA,GAAA;IAgDD;;;;;OAKG;IACH,YACM,IArDM,EAAkB,MAAQ,EAAe,uBAAyB,EACjE,QAAU;QAwDnB,KAAK,CAAC,IAAI,CAAC,CAAC;QAzDc,WAAA,GAAA,MAAA,CAAQ;QAAe,4BAAA,GAAA,uBAAA,CAAyB;QACjE,aAAA,GAAA,QAAA,CAAU;IAyDrB,CAAC;IACH;;;;OAIG;IACH,KA5DG,CAAA,OAAA,EAAA,UAAA,IAAA,IAAsD,MAAA,CAAO,OAAA,CAAQ,UAAC,CAAU,IAAC,EAAK,OAAA,CAAQ,CAAC,CAAC,CAAA;IA6DnG;;OAEG;IACH,QA/DG,KAAoB,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAA;CAgEtC;AAED;IACA,gBAAgB;IAChB,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;IACvB,gBAAgB;IAChB,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC;IACxC,gBAAgB;IAChB,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;AACzB,CAAC;AAED,MAxEC,gBAAA,SAAA,GAAA;IAyED;;;;OAIG;IACH,KA7EG,CAAA,OAAA,EAAA,UAAA,IAAA;QA8EC,aAAa;IACf,CAAC;CACF;AACD,MA5EC,uBAAA,SAAA,GAAA;IA6ED;;;;OAIG;IACH,KAjFG,CAAA,OAAA,EAAA,UAAA,IAAA;QAkFC,MAAM,CAjFC,OAAA,CAAQ,qBAAC,CAAqB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAkFtD,CAAC;CACF;AACD;;GAEG;AACH,MAhFC,YAAA,SAAA,GAAA;IAiFD;;;OAGG;IACH,YApFG,IAAiB,EAAkB,WAAiB;QAAE,KAAA,CAAA,IAAA,CAAA,CAAA;QAAnB,gBAAA,GAAA,WAAA,CAAiB;IAAE,CAAA;IAsFzD;;;;OAIG;IACH,KA1FG,CAAA,OAAA,EAAA,UAAA,IAAA,IAAsD,MAAA,CAAO,OAAA,CAAQ,UAAC,CAAU,IAAC,EAAK,OAAA,CAAQ,CAAC,CAAC,CAAA;CA2FlG;AAED;IACA,gBAAgB;IAChB,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;AAC5B,CAAC;AAED,MA/FC,kBAAA,SAAA,GAAA;IAgGD;;;;;OAKG;IACH,YArGG,IAAiB,EAAkB,SAAW,EAAY,OAAS,EAAY,QAAU;QAyGxF,KAAK,CAAC,IAAI,CAAC,CAAC;QAzGsB,cAAA,GAAA,SAAA,CAAW;QAAY,YAAA,GAAA,OAAA,CAAS;QAAY,aAAA,GAAA,QAAA,CAAU;IA0G1F,CAAC;IACH;;;;OAIG;IACH,KA7GG,CAAA,OAAA,EAAA,UAAA,IAAA;QA8GC,MAAM,CA7GC,OAAA,CAAQ,gBAAC,CAAgB,IAAC,EAAK,OAAA,CAAQ,CAAC;IA8GjD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC;IAChC,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC/B,CAAC;AAED,MAtHC,mBAAA,SAAA,GAAA;IAuHD;;;;OAIG;IACH,YA3HG,IAAiB,EAAkB,QAAU,EAAY,IAAM;QAAO,KAAA,CAAA,IAAA,CAAA,CAAA;QAAnC,aAAA,GAAA,QAAA,CAAU;QAAY,SAAA,GAAA,IAAA,CAAM;IAAO,CAAA;IA8HzE;;;;OAIG;IACH,KAlIG,CAAA,OAAA,EAAA,UAAA,IAAA;QAmIC,MAAM,CAlIC,OAAA,CAAQ,iBAAC,CAAiB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAmIlD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;AAC5B,CAAC;AAED,MAzIC,oBAAA,SAAA,GAAA;IA0ID;;;;;OAKG;IACH,YA/IG,IAAiB,EAAkB,QAAU,EAAY,IAAM,EAAe,KAAO;QAmJpF,KAAK,CAAC,IAAI,CAAC,CAAC;QAnJsB,aAAA,GAAA,QAAA,CAAU;QAAY,SAAA,GAAA,IAAA,CAAM;QAAe,UAAA,GAAA,KAAA,CAAO;IAoJtF,CAAC;IACH;;;;OAIG;IACH,KAvJG,CAAA,OAAA,EAAA,UAAA,IAAA;QAwJC,MAAM,CAvJC,OAAA,CAAQ,kBAAC,CAAkB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAwJnD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC;AAED,MAhKC,uBAAA,SAAA,GAAA;IAiKD;;;;OAIG;IACH,YArKG,IAAiB,EAAkB,QAAU,EAAY,IAAM;QAAO,KAAA,CAAA,IAAA,CAAA,CAAA;QAAnC,aAAA,GAAA,QAAA,CAAU;QAAY,SAAA,GAAA,IAAA,CAAM;IAAO,CAAA;IAwKzE;;;;OAIG;IACH,KA5KG,CAAA,OAAA,EAAA,UAAA,IAAA;QA6KC,MAAM,CA5KC,OAAA,CAAQ,qBAAC,CAAqB,IAAC,EAAK,OAAA,CAAQ,CAAC;IA6KtD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACpC,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC;AAChC,CAAC;AAED,MAnLC,gBAAA,SAAA,GAAA;IAoLD;;;;OAIG;IACH,YAxLG,IAAiB,EAAkB,GAAK,EAAY,GAAK;QAAI,KAAA,CAAA,IAAA,CAAA,CAAA;QAA1B,QAAA,GAAA,GAAA,CAAK;QAAY,QAAA,GAAA,GAAA,CAAK;IAAI,CAAA;IA2LhE;;;;OAIG;IACH,KA/LG,CAAA,OAAA,EAAA,UAAA,IAAA;QAgMC,MAAM,CA/LC,OAAA,CAAQ,cAAC,CAAc,IAAC,EAAK,OAAA,CAAQ,CAAC;IAgM/C,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;IACxB,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC;AACxB,CAAC;AAED,MAtMC,iBAAA,SAAA,GAAA;IAuMD;;;;;OAKG;IACH,YA5MG,IAAiB,EAAkB,GAAK,EAAY,GAAK,EAAY,KAAO;QAAI,KAAA,CAAA,IAAA,CAAA,CAAA;QAA7C,QAAA,GAAA,GAAA,CAAK;QAAY,QAAA,GAAA,GAAA,CAAK;QAAY,UAAA,GAAA,KAAA,CAAO;IAAI,CAAA;IAgNnF;;;;OAIG;IACH,KApNG,CAAA,OAAA,EAAA,UAAA,IAAA;QAqNC,MAAM,CApNC,OAAA,CAAQ,eAAC,CAAe,IAAC,EAAK,OAAA,CAAQ,CAAC;IAqNhD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC;IACzB,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC;IACzB,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;AAC3B,CAAC;AAED,MA7NC,kBAAA,SAAA,GAAA;IA8ND;;;;;OAKG;IACH,YAnOG,IAAiB,EAAkB,GAAK,EAAY,IAAM,EAAe,IAAU;QAuOlF,KAAK,CAAC,IAAI,CAAC,CAAC;QAvOsB,QAAA,GAAA,GAAA,CAAK;QAAY,SAAA,GAAA,IAAA,CAAM;QAAe,SAAA,GAAA,IAAA,CAAU;IAwOpF,CAAC;IACH;;;;OAIG;IACH,KA3OG,CAAA,OAAA,EAAA,UAAA,IAAA,IAAsD,MAAA,CAAO,OAAA,CAAQ,SAAC,CAAS,IAAC,EAAK,OAAA,CAAQ,CAAC,CAAC,CAAA;CA4OjG;AAED;IACA,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC;IAC1B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;IAC3B,gBAAgB;IAChB,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3B,CAAC;AAED,MApPC,uBAAA,SAAA,GAAA;IAqPD;;;OAGG;IACH,YAxPG,IAAiB,EAAkB,KAAO;QAAI,KAAA,CAAA,IAAA,CAAA,CAAA;QAAX,UAAA,GAAA,KAAA,CAAO;IAAI,CAAA;IA0PjD;;;;OAIG;IACH,KA9PG,CAAA,OAAA,EAAA,UAAA,IAAA;QA+PC,MAAM,CA9PC,OAAA,CAAQ,qBAAC,CAAqB,IAAC,EAAK,OAAA,CAAQ,CAAC;IA+PtD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC;AACjC,CAAC;AAED,MAnQC,mBAAA,SAAA,GAAA;IAoQD;;;OAGG;IACH,YAvQG,IAAiB,EAAkB,WAAiB;QAAE,KAAA,CAAA,IAAA,CAAA,CAAA;QAAnB,gBAAA,GAAA,WAAA,CAAiB;IAAE,CAAA;IAyQzD;;;;OAIG;IACH,KA7QG,CAAA,OAAA,EAAA,UAAA,IAAA;QA8QC,MAAM,CA7QC,OAAA,CAAQ,iBAAC,CAAiB,IAAC,EAAK,OAAA,CAAQ,CAAC;IA8QlD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;AACnC,CAAC;AAED,MAlRC,iBAAA,SAAA,GAAA;IAmRD;;;;OAIG;IACH,YAvRG,IAAiB,EAAkB,IAAU,EAAU,MAAY;QAAE,KAAA,CAAA,IAAA,CAAA,CAAA;QAAlC,SAAA,GAAA,IAAA,CAAU;QAAU,WAAA,GAAA,MAAA,CAAY;IAAE,CAAA;IA0RxE;;;;OAIG;IACH,KA9RG,CAAA,OAAA,EAAA,UAAA,IAAA;QA+RC,MAAM,CA9RC,OAAA,CAAQ,eAAC,CAAe,IAAC,EAAK,OAAA,CAAQ,CAAC;IA+RhD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;AAC5B,CAAC;AAED,MArSC,oBAAA,SAAA,GAAA;IAsSD;;;;OAIG;IACH,YA1SG,IAAiB,EAAkB,OAAa,EAAU,WAAiB;QAAE,KAAA,CAAA,IAAA,CAAA,CAAA;QAA1C,YAAA,GAAA,OAAA,CAAa;QAAU,gBAAA,GAAA,WAAA,CAAiB;IAAE,CAAA;IA6ShF;;;;OAIG;IACH,KAjTG,CAAA,OAAA,EAAA,UAAA,IAAA;QAkTC,MAAM,CAjTC,OAAA,CAAQ,kBAAC,CAAkB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAkTnD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAChC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;AACpC,CAAC;AAED,MAxTC,aAAA,SAAA,GAAA;IAyTD;;;;;OAKG;IACH,YA9TG,IAAiB,EAAkB,SAAW,EAAe,IAAM,EAAY,KAAO;QAkUrF,KAAK,CAAC,IAAI,CAAC,CAAC;QAlUsB,cAAA,GAAA,SAAA,CAAW;QAAe,SAAA,GAAA,IAAA,CAAM;QAAY,UAAA,GAAA,KAAA,CAAO;IAmUvF,CAAC;IACH;;;;OAIG;IACH,KAtUG,CAAA,OAAA,EAAA,UAAA,IAAA;QAuUC,MAAM,CAtUC,OAAA,CAAQ,WAAC,CAAW,IAAC,EAAK,OAAA,CAAQ,CAAC;IAuU5C,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;IAC3B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;AACvB,CAAC;AAED,MA/UC,gBAAA,SAAA,GAAA;IAgVD;;;OAGG;IACH,YAnVG,IAAiB,EAAkB,UAAY;QAAI,KAAA,CAAA,IAAA,CAAA,CAAA;QAAhB,eAAA,GAAA,UAAA,CAAY;IAAI,CAAA;IAqVtD;;;;OAIG;IACH,KAzVG,CAAA,OAAA,EAAA,UAAA,IAAA;QA0VC,MAAM,CAzVC,OAAA,CAAQ,cAAC,CAAc,IAAC,EAAK,OAAA,CAAQ,CAAC;IA0V/C,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC;AAC/B,CAAC;AAED,MA9VC,iBAAA,SAAA,GAAA;IA+VD;;;;;OAKG;IACH,YApWG,IAAiB,EAAkB,QAAU,EAAY,IAAM,EAAe,IAAU;QAwWvF,KAAK,CAAC,IAAI,CAAC,CAAC;QAxWsB,aAAA,GAAA,QAAA,CAAU;QAAY,SAAA,GAAA,IAAA,CAAM;QAAe,SAAA,GAAA,IAAA,CAAU;IAyWzF,CAAC;IACH;;;;OAIG;IACH,KA5WG,CAAA,OAAA,EAAA,UAAA,IAAA;QA6WC,MAAM,CA5WC,OAAA,CAAQ,eAAC,CAAe,IAAC,EAAK,OAAA,CAAQ,CAAC;IA6WhD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC9B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;AAC1B,CAAC;AAED,MArXC,qBAAA,SAAA,GAAA;IAsXD;;;;;OAKG;IACH,YA3XG,IAAiB,EAAkB,QAAU,EAAY,IAAM,EAAe,IAAU;QA+XvF,KAAK,CAAC,IAAI,CAAC,CAAC;QA/XsB,aAAA,GAAA,QAAA,CAAU;QAAY,SAAA,GAAA,IAAA,CAAM;QAAe,SAAA,GAAA,IAAA,CAAU;IAgYzF,CAAC;IACH;;;;OAIG;IACH,KAnYG,CAAA,OAAA,EAAA,UAAA,IAAA;QAoYC,MAAM,CAnYC,OAAA,CAAQ,mBAAC,CAAmB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAoYpD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;AAC9B,CAAC;AAED,MA5YC,mBAAA,SAAA,GAAA;IA6YD;;;;OAIG;IACH,YAjZG,IAAiB,EAAkB,MAAQ,EAAY,IAAU;QAAE,KAAA,CAAA,IAAA,CAAA,CAAA;QAAhC,WAAA,GAAA,MAAA,CAAQ;QAAY,SAAA,GAAA,IAAA,CAAU;IAAE,CAAA;IAoZtE;;;;OAIG;IACH,KAxZG,CAAA,OAAA,EAAA,UAAA,IAAA;QAyZC,MAAM,CAxZC,OAAA,CAAQ,iBAAC,CAAiB,IAAC,EAAK,OAAA,CAAQ,CAAC;IAyZlD,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC;AAC5B,CAAC;AAED,MA/ZC,oBAAA,SAAA,GAAA;IAgaD;;;;;OAKG;IACH,YApaa,GAAK,EAAY,MAAQ,EAAe,QAAU,EAClD,MAAoB;QAwa7B,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAzapD,QAAA,GAAA,GAAA,CAAK;QAAY,WAAA,GAAA,MAAA,CAAQ;QAAe,aAAA,GAAA,QAAA,CAAU;QAClD,WAAA,GAAA,MAAA,CAAoB;IAya/B,CAAC;IACH;;;;OAIG;IACH,KA5aG,CAAA,OAAA,EAAA,UAAA,IAAA,IAAsD,MAAA,CAAO,IAAA,CAAK,GAAC,CAAG,KAAC,CAAK,OAAC,EAAQ,OAAA,CAAQ,CAAC,CAAC,CAAA;IA6alG;;OAEG;IACH,QA/aG,KAAoB,MAAA,CAAO,GAAA,IAAI,CAAI,MAAC,OAAM,IAAO,CAAI,QAAC,EAAQ,CAAE,CAAC,CAAA;CAgbnE;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC;IAC5B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC;AAC/B,CAAC;AAED,MA1bC;IA2bD;;;;;;OAMG;IACH,YAhca,IAAM,EAAkB,GAAK,EAAe,QAAU,EAAgB,IAAM,EAC5E,UAAY;QADZ,SAAA,GAAA,IAAA,CAAM;QAAkB,QAAA,GAAA,GAAA,CAAK;QAAe,aAAA,GAAA,QAAA,CAAU;QAAgB,SAAA,GAAA,IAAA,CAAM;QAC5E,eAAA,GAAA,UAAA,CAAY;IAAc,CAAA;CAqctC;AAED;IACA,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;IAC/B,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;IAC9B,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC;IAC/B,gBAAgB;IAChB,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC;AACrC,CAAC;AAwBD,MAjdC;IAkdD;;;;OAIG;IACH,WAtdG,CAAA,GAAA,EAAA,OAAA;QAudC,GAAG,CAtdC,IAAC,CAAI,KAAC,CAAK,IAAC,CAAI,CAAC;QAudrB,GAAG,CAtdC,KAAC,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC;QAudtB,MAAM,CAtdC,IAAA,CAAK;IAudd,CAAC;IACH;;;;OAIG;IACH,UA3dG,CAAA,GAAA,EAAA,OAAA,IAA2C,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,EAAY,OAAA,CAAQ,CAAC,CAAC,CAAA;IA4d9F;;;;OAIG;IACH,gBAheG,CAAA,GAAA,EAAA,OAAA;QAieC,GAAG,CAheC,SAAC,CAAS,KAAC,CAAK,IAAC,CAAI,CAAC;QAie1B,GAAG,CAheC,OAAC,CAAO,KAAC,CAAK,IAAC,CAAI,CAAC;QAiexB,GAAG,CAheC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QAiezB,MAAM,CAheC,IAAA,CAAK;IAied,CAAC;IACH;;;;OAIG;IACH,SAreG,CAAA,GAAA,EAAA,OAAA;QAseC,GAAG,CAreC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QAsepB,IAAI,CAreC,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;QAsejC,MAAM,CAreC,IAAA,CAAK;IAsed,CAAC;IACH;;;;OAIG;IACH,iBA1eG,CAAA,GAAA,EAAA,OAAA;QA2eC,GAAG,CA1eC,MAAC,CAAM,KAAC,CAAK,IAAC,CAAI,CAAC;QA2evB,IAAI,CA1eC,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;QA2ejC,MAAM,CA1eC,IAAA,CAAK;IA2ed,CAAC;IACH;;;;OAIG;IACH,qBA/eG,CAAA,GAAA,EAAA,OAAA,IAAiE,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAgfjF;;;;OAIG;IACH,kBApfG,CAAA,GAAA,EAAA,OAAA;QAqfC,MAAM,CApfC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,EAAY,OAAA,CAAQ,CAAC;IAqfjD,CAAC;IACH;;;;OAIG;IACH,cAzfG,CAAA,GAAA,EAAA,OAAA;QA0fC,GAAG,CAzfC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QA0fpB,GAAG,CAzfC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QA0fpB,MAAM,CAzfC,IAAA,CAAK;IA0fd,CAAC;IACH;;;;OAIG;IACH,eA9fG,CAAA,GAAA,EAAA,OAAA;QA+fC,GAAG,CA9fC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QA+fpB,GAAG,CA9fC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QA+fpB,GAAG,CA9fC,KAAC,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC;QA+ftB,MAAM,CA9fC,IAAA,CAAK;IA+fd,CAAC;IACH;;;;OAIG;IACH,iBAngBG,CAAA,GAAA,EAAA,OAAA;QAogBC,MAAM,CAngBC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,EAAY,OAAA,CAAQ,CAAC;IAogBjD,CAAC;IACH;;;;OAIG;IACH,eAxgBG,CAAA,GAAA,EAAA,OAAA,IAAqD,MAAA,CAAO,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,MAAC,EAAO,OAAA,CAAQ,CAAC,CAAC,CAAA;IAygBnG;;;;OAIG;IACH,qBA7gBG,CAAA,GAAA,EAAA,OAAA,IAAiE,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA8gBjF;;;;OAIG;IACH,eAlhBG,CAAA,GAAA,EAAA,OAAA;QAmhBC,GAAG,CAlhBC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QAmhBzB,MAAM,CAlhBC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;IAmhB1C,CAAC;IACH;;;;OAIG;IACH,cAvhBG,CAAA,GAAA,EAAA,OAAA;QAwhBC,GAAG,CAvhBC,UAAC,CAAU,KAAC,CAAK,IAAC,CAAI,CAAC;QAwhB3B,MAAM,CAvhBC,IAAA,CAAK;IAwhBd,CAAC;IACH;;;;OAIG;IACH,iBA5hBG,CAAA,GAAA,EAAA,OAAA;QA6hBC,GAAG,CA5hBC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QA6hBzB,MAAM,CA5hBC,IAAA,CAAK;IA6hBd,CAAC;IACH;;;;OAIG;IACH,kBAjiBG,CAAA,GAAA,EAAA,OAAA;QAkiBC,GAAG,CAjiBC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QAkiBzB,GAAG,CAjiBC,KAAC,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC;QAkiBtB,MAAM,CAjiBC,IAAA,CAAK;IAkiBd,CAAC;IACH;;;;OAIG;IACH,qBAtiBG,CAAA,GAAA,EAAA,OAAA;QAuiBC,GAAG,CAtiBC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QAuiBzB,MAAM,CAtiBC,IAAA,CAAK;IAuiBd,CAAC;IACH;;;;OAIG;IACH,mBA3iBG,CAAA,GAAA,EAAA,OAAA;QA4iBC,GAAG,CA3iBC,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC;QA4iBzB,MAAM,CA3iBC,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;IA4iB1C,CAAC;IACH;;;;OAIG;IACH,QAhjBG,CAAA,IAAA,EAAA,OAAA;QAijBC,IAAI,CAhjBC,OAAC,CAAO,GAAC,IAAM,GAAA,CAAI,KAAC,CAAK,IAAC,EAAK,OAAA,CAAQ,CAAC,CAAC;QAijB9C,MAAM,CAhjBC,IAAA,CAAK;IAijBd,CAAC;IACH;;;;OAIG;IACH,UArjBG,CAAA,GAAA,EAAA,OAAA,IAA2C,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;CAsjB1D;AACD,MApjBC;IAqjBD;;;;OAIG;IACH,qBAzjBG,CAAA,GAAA,EAAA,OAAA,IAAiE,MAAA,CAAO,GAAA,CAAI,CAAC,CAAA;IA0jBhF;;;;OAIG;IACH,kBA7jBG,CAAA,GAAA,EAAA,OAAA;QA8jBC,MAAM,CA7jBC,IAAI,aAAA,CAAc,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,OAAC,EAAQ,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,CAAW,CAAC,CAAC;IA8jBlF,CAAC;IACH;;;;OAIG;IACH,qBAjkBG,CAAA,GAAA,EAAA,OAAA;QAkkBC,MAAM,CAjkBC,IAAI,gBAAA,CAAiB,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,KAAC,CAAK,CAAC;IAkkBnD,CAAC;IACH;;;;OAIG;IACH,iBArkBG,CAAA,GAAA,EAAA,OAAA;QAskBC,MAAM,CArkBC,IAAI,YAAA,CAAa,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,CAAI,CAAC;IAskBxE,CAAC;IACH;;;;OAIG;IACH,kBAzkBG,CAAA,GAAA,EAAA,OAAA;QA0kBC,MAAM,CAzkBC,IAAI,aAAA,CAAc,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,EAAK,GAAA,CAAI,KAAC,CAAK,CAAC;IA0kBpF,CAAC;IACH;;;;OAIG;IACH,qBA7kBG,CAAA,GAAA,EAAA,OAAA;QA8kBC,MAAM,CA7kBC,IAAI,gBAAA,CAAiB,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,CAAI,CAAC;IA8kB5E,CAAC;IACH;;;;OAIG;IACH,eAjlBG,CAAA,GAAA,EAAA,OAAA;QAklBC,MAAM,CAjlBC,IAAI,UAAA,CAAW,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC;IAklB/F,CAAC;IACH;;;;OAIG;IACH,mBArlBG,CAAA,GAAA,EAAA,OAAA;QAslBC,MAAM,CArlBC,IAAI,cAAA,CAslBP,GAAG,CArlBC,IAAC,EAAK,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC;IAslB7E,CAAC;IACH;;;;OAIG;IACH,iBAzlBG,CAAA,GAAA,EAAA,OAAA;QA0lBC,MAAM,CAzlBC,IAAI,YAAA,CAAa,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,KAAC,CAAK,IAAC,CAAI,EAAE,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC;IA0lBrF,CAAC;IACH;;;;OAIG;IACH,iBA7lBG,CAAA,GAAA,EAAA,OAAA;QA8lBC,MAAM,CA7lBC,IAAI,YAAA,CAAa,GAAC,CAAG,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,CAAW,CAAC,CAAC;IA8lBpE,CAAC;IACH;;;;OAIG;IACH,eAjmBG,CAAA,GAAA,EAAA,OAAA;QAkmBC,MAAM,CAjmBC,IAAI,UAAA,CAAW,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,MAAC,CAAM,CAAC,CAAC;IAkmBvE,CAAC;IACH;;;;OAIG;IACH,WArmBG,CAAA,GAAA,EAAA,OAAA;QAsmBC,MAAM,CArmBC,IAAI,MAAA,CAAO,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,SAAC,EAAU,GAAA,CAAI,IAAC,CAAI,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,KAAC,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;IAsmB1F,CAAC;IACH;;;;OAIG;IACH,cAzmBG,CAAA,GAAA,EAAA,OAAA;QA0mBC,MAAM,CAzmBC,IAAI,SAAA,CAAU,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,UAAC,CAAU,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;IA0mB7D,CAAC;IACH;;;;OAIG;IACH,gBA7mBG,CAAA,GAAA,EAAA,OAAA;QA8mBC,MAAM,CA7mBC,IAAI,WAAA,CA8mBP,GAAG,CA7mBC,IAAC,EAAK,GAAA,CAAI,SAAC,CAAS,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,OAAC,CAAO,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,QAAC,CAAQ,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;IA8mB9F,CAAC;IACH;;;;OAIG;IACH,SAjnBG,CAAA,GAAA,EAAA,OAAA;QAknBC,MAAM,CAjnBC,IAAI,WAAA,CAAY,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC;IAknB3F,CAAC;IACH;;;;OAIG;IACH,cArnBG,CAAA,GAAA,EAAA,OAAA;QAsnBC,MAAM,CArnBC,IAAI,SAAA,CAAU,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;IAsnB3E,CAAC;IACH;;;;OAIG;IACH,eAznBG,CAAA,GAAA,EAAA,OAAA;QA0nBC,MAAM,CAznBC,IAAI,UAAA,CA0nBP,GAAG,CAznBC,IAAC,EAAK,GAAA,CAAI,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,EAAE,GAAA,CAAI,KAAC,CAAK,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC;IA0nBjF,CAAC;IACH;;;OAGG;IACH,QA5nBG,CAAA,IAAA;QA6nBC,MAAM,gBAAgB,CA5nBhB,GAAA,GAAM,IAAI,KAAA,CAAM,IAAC,CAAI,MAAC,CAAM,CAAC;QA6nBnC,GAAG,CAAC,CAAC,IA5nBC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,MAAC,EAAO,EAAA,CAAG,EAAE,CAAA;YA6nBpC,GAAG,CA5nBC,CAAC,CAAC,GAAG,IAAA,CAAK,CAAC,CAAC,CAAC,KAAC,CAAK,IAAC,CAAI,CAAC;QA6nB/B,CAAC;QACD,MAAM,CA5nBC,GAAA,CAAI;IA6nBb,CAAC;IACH;;;;OAIG;IACH,UAhoBG,CAAA,GAAA,EAAA,OAAA;QAioBC,MAAM,CAhoBC,IAAI,KAAA,CAAM,GAAC,CAAG,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,GAAC,CAAG,WAAC,CAAW,CAAC,CAAC;IAioB7D,CAAC;IACH;;;;OAIG;IACH,UApoBG,CAAA,GAAA,EAAA,OAAA;QAqoBC,MAAM,CApoBC,IAAI,KAAA,CAAM,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,MAAC,EAAO,GAAA,CAAI,uBAAC,EAAwB,GAAA,CAAI,QAAC,CAAQ,CAAC;IAqoBpF,CAAC;CACF","file":"ast.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isBlank} from '../facade/lang';\nexport class ParserError {\npublic message: string;\n/**\n * @param {?} message\n * @param {?} input\n * @param {?} errLocation\n * @param {?=} ctxLocation\n */\nconstructor(\n      message: string,\npublic input: string,\npublic errLocation: string,\npublic ctxLocation?: any) {\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n}\n\nfunction ParserError_tsickle_Closure_declarations() {\n/** @type {?} */\nParserError.prototype.message;\n/** @type {?} */\nParserError.prototype.input;\n/** @type {?} */\nParserError.prototype.errLocation;\n/** @type {?} */\nParserError.prototype.ctxLocation;\n}\n\nexport class ParseSpan {\n/**\n * @param {?} start\n * @param {?} end\n */\nconstructor(public start: number,\npublic end: number) {}\n}\n\nfunction ParseSpan_tsickle_Closure_declarations() {\n/** @type {?} */\nParseSpan.prototype.start;\n/** @type {?} */\nParseSpan.prototype.end;\n}\n\nexport class AST {\n/**\n * @param {?} span\n */\nconstructor(public span: ParseSpan) {}\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return null; }\n/**\n * @return {?}\n */\ntoString(): string { return 'AST'; }\n}\n\nfunction AST_tsickle_Closure_declarations() {\n/** @type {?} */\nAST.prototype.span;\n}\n\n/**\n * Represents a quoted expression of the form:\n * \n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n * \n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n/**\n * @param {?} span\n * @param {?} prefix\n * @param {?} uninterpretedExpression\n * @param {?} location\n */\nconstructor(\n      span: ParseSpan,\npublic prefix: string,\npublic uninterpretedExpression: string,\npublic location: any) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n/**\n * @return {?}\n */\ntoString(): string { return 'Quote'; }\n}\n\nfunction Quote_tsickle_Closure_declarations() {\n/** @type {?} */\nQuote.prototype.prefix;\n/** @type {?} */\nQuote.prototype.uninterpretedExpression;\n/** @type {?} */\nQuote.prototype.location;\n}\n\nexport class EmptyExpr extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null) {\n    // do nothing\n  }\n}\nexport class ImplicitReceiver extends AST {\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nfunction Chain_tsickle_Closure_declarations() {\n/** @type {?} */\nChain.prototype.expressions;\n}\n\nexport class Conditional extends AST {\n/**\n * @param {?} span\n * @param {?} condition\n * @param {?} trueExp\n * @param {?} falseExp\n */\nconstructor(span: ParseSpan,\npublic condition: AST,\npublic trueExp: AST,\npublic falseExp: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitConditional(this, context);\n  }\n}\n\nfunction Conditional_tsickle_Closure_declarations() {\n/** @type {?} */\nConditional.prototype.condition;\n/** @type {?} */\nConditional.prototype.trueExp;\n/** @type {?} */\nConditional.prototype.falseExp;\n}\n\nexport class PropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyRead(this, context);\n  }\n}\n\nfunction PropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyRead.prototype.receiver;\n/** @type {?} */\nPropertyRead.prototype.name;\n}\n\nexport class PropertyWrite extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic value: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPropertyWrite(this, context);\n  }\n}\n\nfunction PropertyWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyWrite.prototype.receiver;\n/** @type {?} */\nPropertyWrite.prototype.name;\n/** @type {?} */\nPropertyWrite.prototype.value;\n}\n\nexport class SafePropertyRead extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n}\n\nfunction SafePropertyRead_tsickle_Closure_declarations() {\n/** @type {?} */\nSafePropertyRead.prototype.receiver;\n/** @type {?} */\nSafePropertyRead.prototype.name;\n}\n\nexport class KeyedRead extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedRead(this, context);\n  }\n}\n\nfunction KeyedRead_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedRead.prototype.obj;\n/** @type {?} */\nKeyedRead.prototype.key;\n}\n\nexport class KeyedWrite extends AST {\n/**\n * @param {?} span\n * @param {?} obj\n * @param {?} key\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic obj: AST,\npublic key: AST,\npublic value: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitKeyedWrite(this, context);\n  }\n}\n\nfunction KeyedWrite_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyedWrite.prototype.obj;\n/** @type {?} */\nKeyedWrite.prototype.key;\n/** @type {?} */\nKeyedWrite.prototype.value;\n}\n\nexport class BindingPipe extends AST {\n/**\n * @param {?} span\n * @param {?} exp\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic exp: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nfunction BindingPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingPipe.prototype.exp;\n/** @type {?} */\nBindingPipe.prototype.name;\n/** @type {?} */\nBindingPipe.prototype.args;\n}\n\nexport class LiteralPrimitive extends AST {\n/**\n * @param {?} span\n * @param {?} value\n */\nconstructor(span: ParseSpan,\npublic value: any) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n}\n\nfunction LiteralPrimitive_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralPrimitive.prototype.value;\n}\n\nexport class LiteralArray extends AST {\n/**\n * @param {?} span\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralArray(this, context);\n  }\n}\n\nfunction LiteralArray_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralArray.prototype.expressions;\n}\n\nexport class LiteralMap extends AST {\n/**\n * @param {?} span\n * @param {?} keys\n * @param {?} values\n */\nconstructor(span: ParseSpan,\npublic keys: any[],\npublic values: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitLiteralMap(this, context);\n  }\n}\n\nfunction LiteralMap_tsickle_Closure_declarations() {\n/** @type {?} */\nLiteralMap.prototype.keys;\n/** @type {?} */\nLiteralMap.prototype.values;\n}\n\nexport class Interpolation extends AST {\n/**\n * @param {?} span\n * @param {?} strings\n * @param {?} expressions\n */\nconstructor(span: ParseSpan,\npublic strings: any[],\npublic expressions: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitInterpolation(this, context);\n  }\n}\n\nfunction Interpolation_tsickle_Closure_declarations() {\n/** @type {?} */\nInterpolation.prototype.strings;\n/** @type {?} */\nInterpolation.prototype.expressions;\n}\n\nexport class Binary extends AST {\n/**\n * @param {?} span\n * @param {?} operation\n * @param {?} left\n * @param {?} right\n */\nconstructor(span: ParseSpan,\npublic operation: string,\npublic left: AST,\npublic right: AST) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitBinary(this, context);\n  }\n}\n\nfunction Binary_tsickle_Closure_declarations() {\n/** @type {?} */\nBinary.prototype.operation;\n/** @type {?} */\nBinary.prototype.left;\n/** @type {?} */\nBinary.prototype.right;\n}\n\nexport class PrefixNot extends AST {\n/**\n * @param {?} span\n * @param {?} expression\n */\nconstructor(span: ParseSpan,\npublic expression: AST) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitPrefixNot(this, context);\n  }\n}\n\nfunction PrefixNot_tsickle_Closure_declarations() {\n/** @type {?} */\nPrefixNot.prototype.expression;\n}\n\nexport class MethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitMethodCall(this, context);\n  }\n}\n\nfunction MethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nMethodCall.prototype.receiver;\n/** @type {?} */\nMethodCall.prototype.name;\n/** @type {?} */\nMethodCall.prototype.args;\n}\n\nexport class SafeMethodCall extends AST {\n/**\n * @param {?} span\n * @param {?} receiver\n * @param {?} name\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic receiver: AST,\npublic name: string,\npublic args: any[]) {\n    super(span);\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n}\n\nfunction SafeMethodCall_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeMethodCall.prototype.receiver;\n/** @type {?} */\nSafeMethodCall.prototype.name;\n/** @type {?} */\nSafeMethodCall.prototype.args;\n}\n\nexport class FunctionCall extends AST {\n/**\n * @param {?} span\n * @param {?} target\n * @param {?} args\n */\nconstructor(span: ParseSpan,\npublic target: AST,\npublic args: any[]) { super(span); }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any {\n    return visitor.visitFunctionCall(this, context);\n  }\n}\n\nfunction FunctionCall_tsickle_Closure_declarations() {\n/** @type {?} */\nFunctionCall.prototype.target;\n/** @type {?} */\nFunctionCall.prototype.args;\n}\n\nexport class ASTWithSource extends AST {\n/**\n * @param {?} ast\n * @param {?} source\n * @param {?} location\n * @param {?} errors\n */\nconstructor(\npublic ast: AST,\npublic source: string,\npublic location: string,\npublic errors: ParserError[]) {\n    super(new ParseSpan(0, isBlank(source) ? 0 : source.length));\n  }\n/**\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nvisit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n/**\n * @return {?}\n */\ntoString(): string { return `${this.source} in ${this.location}`; }\n}\n\nfunction ASTWithSource_tsickle_Closure_declarations() {\n/** @type {?} */\nASTWithSource.prototype.ast;\n/** @type {?} */\nASTWithSource.prototype.source;\n/** @type {?} */\nASTWithSource.prototype.location;\n/** @type {?} */\nASTWithSource.prototype.errors;\n}\n\nexport class TemplateBinding {\n/**\n * @param {?} span\n * @param {?} key\n * @param {?} keyIsVar\n * @param {?} name\n * @param {?} expression\n */\nconstructor(\npublic span: ParseSpan,\npublic key: string,\npublic keyIsVar: boolean,\npublic name: string,\npublic expression: ASTWithSource) {}\n}\n\nfunction TemplateBinding_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateBinding.prototype.span;\n/** @type {?} */\nTemplateBinding.prototype.key;\n/** @type {?} */\nTemplateBinding.prototype.keyIsVar;\n/** @type {?} */\nTemplateBinding.prototype.name;\n/** @type {?} */\nTemplateBinding.prototype.expression;\n}\n\n\nexport interface AstVisitor {\n  visitBinary(ast: Binary, context: any): any;\n  visitChain(ast: Chain, context: any): any;\n  visitConditional(ast: Conditional, context: any): any;\n  visitFunctionCall(ast: FunctionCall, context: any): any;\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n  visitInterpolation(ast: Interpolation, context: any): any;\n  visitKeyedRead(ast: KeyedRead, context: any): any;\n  visitKeyedWrite(ast: KeyedWrite, context: any): any;\n  visitLiteralArray(ast: LiteralArray, context: any): any;\n  visitLiteralMap(ast: LiteralMap, context: any): any;\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n  visitMethodCall(ast: MethodCall, context: any): any;\n  visitPipe(ast: BindingPipe, context: any): any;\n  visitPrefixNot(ast: PrefixNot, context: any): any;\n  visitPropertyRead(ast: PropertyRead, context: any): any;\n  visitPropertyWrite(ast: PropertyWrite, context: any): any;\n  visitQuote(ast: Quote, context: any): any;\n  visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n  visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n}\nexport class RecursiveAstVisitor implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): any {\n    ast.left.visit(this);\n    ast.right.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): any {\n    ast.condition.visit(this);\n    ast.trueExp.visit(this);\n    ast.falseExp.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): any {\n    ast.target.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): any {\n    ast.obj.visit(this);\n    ast.key.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): any {\n    return this.visitAll(ast.expressions, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): any {\n    ast.expression.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): any {\n    ast.receiver.visit(this);\n    ast.value.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n    ast.receiver.visit(this);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n    ast.receiver.visit(this);\n    return this.visitAll(ast.args, context);\n  }\n/**\n * @param {?} asts\n * @param {?} context\n * @return {?}\n */\nvisitAll(asts: AST[], context: any): any {\n    asts.forEach(ast => ast.visit(this, context));\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): any { return null; }\n}\nexport class AstTransformer implements AstVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any): AST {\n    return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n    return new LiteralPrimitive(ast.span, ast.value);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any): AST {\n    return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any): AST {\n    return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n    return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any): AST {\n    return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n    return new SafeMethodCall(\n        ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any): AST {\n    return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any): AST {\n    return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any): AST {\n    return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any): AST {\n    return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any): AST {\n    return new PrefixNot(ast.span, ast.expression.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any): AST {\n    return new Conditional(\n        ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): AST {\n    return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any): AST {\n    return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any): AST {\n    return new KeyedWrite(\n        ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n/**\n * @param {?} asts\n * @return {?}\n */\nvisitAll(asts: any[]): any[] {\n    const /** @type {?} */ res = new Array(asts.length);\n    for (let /** @type {?} */ i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any): AST {\n    return new Chain(ast.span, this.visitAll(ast.expressions));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any): AST {\n    return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_pipe.ts"],"names":[],"mappings":"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","file":"compile_pipe.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompilePipeSummary, tokenReference} from '../compile_metadata';\nimport {createPureProxy} from '../compiler_util/identifier_util';\nimport {Identifiers, createIdentifier, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\n\nimport {CompileView} from './compile_view';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\nexport class CompilePipe {\n/**\n * @param {?} view\n * @param {?} name\n * @param {?} args\n * @return {?}\n */\nstatic call(view: CompileView, name: string, args: o.Expression[]): o.Expression {\n    const /** @type {?} */ compView = view.componentView;\n    const /** @type {?} */ meta = _findPipeMeta(compView, name);\n    let /** @type {?} */ pipe: CompilePipe;\n    if (meta.pure) {\n      // pure pipes live on the component view\n      pipe = compView.purePipes.get(name);\n      if (!pipe) {\n        pipe = new CompilePipe(compView, meta);\n        compView.purePipes.set(name, pipe);\n        compView.pipes.push(pipe);\n      }\n    } else {\n      // Non pure pipes live on the view that called it\n      pipe = new CompilePipe(view, meta);\n      view.pipes.push(pipe);\n    }\n    return pipe._call(view, args);\n  }\n\n  instance: o.ReadPropExpr;\nprivate _purePipeProxyCount = 0;\n/**\n * @param {?} view\n * @param {?} meta\n */\nconstructor(public view: CompileView,\npublic meta: CompilePipeSummary) {\n    this.instance = o.THIS_EXPR.prop(`_pipe_${meta.name}_${view.pipeCount++}`);\n    const deps = this.meta.type.diDeps.map((diDep) => {\n      if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n        return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n      }\n      return injectFromViewParentInjector(view, diDep.token, false);\n    });\n    this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));\n    this.view.createMethod.resetDebugInfo(null, null);\n    this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name)\n                                       .set(o.importExpr(this.meta.type).instantiate(deps))\n                                       .toStmt());\n  }\n/**\n * @return {?}\n */\nget pure(): boolean { return this.meta.pure; }\n/**\n * @param {?} callingView\n * @param {?} args\n * @return {?}\n */\nprivate _call(callingView: CompileView, args: o.Expression[]): o.Expression {\n    if (this.meta.pure) {\n      // PurePipeProxies live on the view that called them.\n      const /** @type {?} */ purePipeProxyInstance =\n          o.THIS_EXPR.prop(`${this.instance.name}_${this._purePipeProxyCount++}`);\n      const /** @type {?} */ pipeInstanceSeenFromPureProxy =\n          getPropertyInView(this.instance, callingView, this.view);\n      createPureProxy(\n          pipeInstanceSeenFromPureProxy.prop('transform')\n              .callMethod(o.BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]),\n          args.length, purePipeProxyInstance,\n          {fields: callingView.fields, ctorStmts: callingView.createMethod});\n      return o.importExpr(createIdentifier(Identifiers.castByValue))\n          .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])\n          .callFn(args);\n    } else {\n      return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n    }\n  }\n}\n\nfunction CompilePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCompilePipe.prototype.instance;\n/** @type {?} */\nCompilePipe.prototype._purePipeProxyCount;\n/** @type {?} */\nCompilePipe.prototype.view;\n/** @type {?} */\nCompilePipe.prototype.meta;\n}\n\n/**\n * @param {?} view\n * @param {?} name\n * @return {?}\n */\nfunction _findPipeMeta(view: CompileView, name: string): CompilePipeSummary {\n  let /** @type {?} */ pipeMeta: CompilePipeSummary = null;\n  for (let /** @type {?} */ i = view.pipeMetas.length - 1; i >= 0; i--) {\n    const /** @type {?} */ localPipeMeta = view.pipeMetas[i];\n    if (localPipeMeta.name == name) {\n      pipeMeta = localPipeMeta;\n      break;\n    }\n  }\n  if (!pipeMeta) {\n    throw new Error(\n        `Illegal state: Could not find pipe ${name} although the parser should have detected this error!`);\n  }\n  return pipeMeta;\n}\n"]}
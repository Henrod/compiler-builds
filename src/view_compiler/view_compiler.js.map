{"version":3,"sources":["../../../../../modules/@angular/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;AAIH,OAAO,EAAA,cAAE,EAAc,MAAA,WAAA,CAAA;AACvB,OAAO,EAAA,kBAAE,EAAkB,MAAA,eAAA,CAAA;AAE3B,OAAO,EAAA,qBAAE,EAAqB,MAAA,mCAAA,CAAA;AAG9B,OAAO,EAAA,cAAE,EAAc,MAAA,mBAAA,CAAA;AACvB,OAAO,EAAA,WAAE,EAAW,MAAA,gBAAA,CAAA;AAEpB,OAAO,EAAA,QAAE,EAAQ,MAAA,eAAA,CAAA;AACjB,OAAO,EAAA,SAAE,EAAU,UAAA,EAAW,MAAA,gBAAA,CAAA;AAE9B,OAAO,EAAA,0BAAE,EAA2B,uBAAA,EAAyB,0BAAA,EAA2B,MAAA,QAAA,CAAA;AACxF;IACA;;;;;OAKG;IACH,2BAJa,UAAwB,EAAU,YAAc,EAAe,eAAiB,EAChF,YACiF;QAFjF,eAAA,GAAA,UAAA,CAAwB;QAAU,iBAAA,GAAA,YAAA,CAAc;QAAe,oBAAA,GAAA,eAAA,CAAiB;QAChF,iBAAA,GAAA,YAAA,CACiF;IAAC,CAAA;IAQ/F,wBAAC;AAAD,CAbA,AAaC,IAAA;;AAED;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;IACvC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;IACzC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC5C,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;AACzC,CAAC;AAGD,IAAa,YAAY;IACzB;;;OAGG;IACH,sBAtBsB,UAAY,EAAwB,eAAiB;QAArD,eAAA,GAAA,UAAA,CAAY;QAAwB,oBAAA,GAAA,eAAA,CAAiB;IAAsB,CAAA;IAwBjG;;;;;;;OAOG;IACH,uCA9BG,GA8BH,UACM,SAAmC,EAAE,QAAuB,EAAE,MAAoB,EAClF,KAA2B,EAC3B,kBAAiD;QACnD,IAAM,gBAAgB,CA9BhB,YAAA,GACqF,EAAA,CAAG;QA+B9F,IAAM,gBAAgB,CA9BhB,IAAA,GAAO,IAAI,WAAA,CA+Bb,SAAS,EA9BE,IAAA,CAAK,UAAC,EAAW,KAAA,EAAO,MAAA,EAAQ,kBAAA,EAAoB,CAAA,EA+B/D,cAAc,CA9BC,UAAC,EAAU,EAAG,EAAA,EAAI,YAAA,CAAa,CAAC;QAgCnD,IAAM,gBAAgB,CA9BhB,UAAA,GAA4B,EAAA,CAAG;QA+BrC,SAAS,CA9BC,IAAC,EAAK,QAAA,EAAU,YAAA,CAAa,CAAC;QA+BxC,gEAAgE;QAChE,iDAAiD;QACjD,QAAQ,CA9BC,IAAC,EAAK,QAAA,EAAU,IAAA,CAAK,eAAC,CAAe,CAAC;QA+B/C,UAAU,CA9BC,IAAC,EAAK,UAAA,CAAW,CAAC;QAgC7B,MAAM,CA9BC,IAAI,iBAAA,CA+BP,UAAU,EA9BE,IAAA,CAAK,SAAC,CAAS,IAAC,EAAK,IAAA,CAAK,gBAAC,EAAiB,YAAA,CAAa,CAAC;IA+B5E,CAAC;IACH,mBAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,YAAY;IAnBxB,kBAAA,EAAA;qCAEiC,cAAA;QAAyC,qBAAA;GAiB9D,YAAY,CAmCxB;SAnCY,YAAY;AAqCzB;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;IAClC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,eAAe,CAAC;AACvC,CAAC","file":"view_compiler.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryCompileResult} from '../animation/animation_compiler';\nimport {CompileDirectiveMetadata, CompilePipeSummary} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {CompilerInjectable} from '../injectable';\nimport * as o from '../output/output_ast';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {TemplateAst} from '../template_parser/template_ast';\n\nimport {CompileElement} from './compile_element';\nimport {CompileView} from './compile_view';\nimport {ComponentFactoryDependency, ComponentViewDependency, DirectiveWrapperDependency} from './deps';\nimport {bindView} from './view_binder';\nimport {buildView, finishView} from './view_builder';\n\nexport {ComponentFactoryDependency, ComponentViewDependency, DirectiveWrapperDependency} from './deps';\nexport class ViewCompileResult {\n/**\n * @param {?} statements\n * @param {?} viewClassVar\n * @param {?} rendererTypeVar\n * @param {?} dependencies\n */\nconstructor(\npublic statements: o.Statement[],\npublic viewClassVar: string,\npublic rendererTypeVar: string,\npublic dependencies:\n          Array<ComponentViewDependency|ComponentFactoryDependency|DirectiveWrapperDependency>) {}\n}\n\nfunction ViewCompileResult_tsickle_Closure_declarations() {\n/** @type {?} */\nViewCompileResult.prototype.statements;\n/** @type {?} */\nViewCompileResult.prototype.viewClassVar;\n/** @type {?} */\nViewCompileResult.prototype.rendererTypeVar;\n/** @type {?} */\nViewCompileResult.prototype.dependencies;\n}\n\n@CompilerInjectable()\nexport class ViewCompiler {\n/**\n * @param {?} _genConfig\n * @param {?} _schemaRegistry\n */\nconstructor(private _genConfig: CompilerConfig,\nprivate _schemaRegistry: ElementSchemaRegistry) {}\n/**\n * @param {?} component\n * @param {?} template\n * @param {?} styles\n * @param {?} pipes\n * @param {?} compiledAnimations\n * @return {?}\n */\ncompileComponent(\n      component: CompileDirectiveMetadata, template: TemplateAst[], styles: o.Expression,\n      pipes: CompilePipeSummary[],\n      compiledAnimations: AnimationEntryCompileResult[]): ViewCompileResult {\n    const /** @type {?} */ dependencies:\n        Array<ComponentViewDependency|ComponentFactoryDependency|DirectiveWrapperDependency> = [];\n    const /** @type {?} */ view = new CompileView(\n        component, this._genConfig, pipes, styles, compiledAnimations, 0,\n        CompileElement.createNull(), [], dependencies);\n\n    const /** @type {?} */ statements: o.Statement[] = [];\n    buildView(view, template, dependencies);\n    // Need to separate binding from creation to be able to refer to\n    // variables that have been declared after usage.\n    bindView(view, template, this._schemaRegistry);\n    finishView(view, statements);\n\n    return new ViewCompileResult(\n        statements, view.classExpr.name, view.rendererTypeName, dependencies);\n  }\n}\n\nfunction ViewCompiler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewCompiler.prototype._genConfig;\n/** @type {?} */\nViewCompiler.prototype._schemaRegistry;\n}\n\n"]}
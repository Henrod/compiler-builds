{"version":3,"sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_element.ts"],"names":[],"mappings":"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","file":"compile_element.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveSummary, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, tokenName, tokenReference} from '../compile_metadata';\nimport {createDiTokenExpression} from '../compiler_util/identifier_util';\nimport {DirectiveWrapperExpressions} from '../directive_wrapper_compiler';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, createIdentifier, createIdentifierToken, identifierToken, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ProviderAst, ProviderAstType, ReferenceAst, TemplateAst} from '../template_parser/template_ast';\n\nimport {CompileMethod} from './compile_method';\nimport {CompileQuery, addQueryToTokenMap, createQueryList} from './compile_query';\nimport {CompileView, CompileViewRootNode} from './compile_view';\nimport {InjectMethodVars} from './constants';\nimport {ComponentFactoryDependency, DirectiveWrapperDependency} from './deps';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\nexport class CompileNode {\n/**\n * @param {?} parent\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} renderNode\n * @param {?} sourceAst\n */\nconstructor(\npublic parent: CompileElement,\npublic view: CompileView,\npublic nodeIndex: number,\npublic renderNode: o.Expression,\npublic sourceAst: TemplateAst) {}\n/**\n * @return {?}\n */\nisNull(): boolean { return !this.renderNode; }\n/**\n * @return {?}\n */\nisRootElement(): boolean { return this.view != this.parent.view; }\n}\n\nfunction CompileNode_tsickle_Closure_declarations() {\n/** @type {?} */\nCompileNode.prototype.parent;\n/** @type {?} */\nCompileNode.prototype.view;\n/** @type {?} */\nCompileNode.prototype.nodeIndex;\n/** @type {?} */\nCompileNode.prototype.renderNode;\n/** @type {?} */\nCompileNode.prototype.sourceAst;\n}\n\nexport class CompileElement extends CompileNode {\n/**\n * @return {?}\n */\nstatic createNull(): CompileElement {\n    return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n  }\npublic compViewExpr: o.Expression = null;\npublic viewContainer: o.ReadPropExpr;\npublic elementRef: o.Expression;\npublic instances = new Map<any, o.Expression>();\npublic directiveWrapperInstance = new Map<any, o.Expression>();\nprivate _resolvedProviders: Map<any, ProviderAst>;\nprivate _queryCount = 0;\nprivate _queries = new Map<any, CompileQuery[]>();\npublic contentNodesByNgContentIndex: Array<CompileViewRootNode>[] = null;\npublic embeddedView: CompileView;\npublic referenceTokens: {[key: string]: CompileTokenMetadata};\n/**\n * @param {?} parent\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} renderNode\n * @param {?} sourceAst\n * @param {?} component\n * @param {?} _directives\n * @param {?} _resolvedProvidersArray\n * @param {?} hasViewContainer\n * @param {?} hasEmbeddedView\n * @param {?} references\n */\nconstructor(\n      parent: CompileElement, view: CompileView, nodeIndex: number, renderNode: o.Expression,\n      sourceAst: TemplateAst,\npublic component: CompileDirectiveSummary,\nprivate _directives: CompileDirectiveSummary[],\nprivate _resolvedProvidersArray: ProviderAst[],\npublic hasViewContainer: boolean,\npublic hasEmbeddedView: boolean, references: ReferenceAst[]) {\n    super(parent, view, nodeIndex, renderNode, sourceAst);\n    this.referenceTokens = {};\n    references.forEach(ref => this.referenceTokens[ref.name] = ref.value);\n\n    this.elementRef =\n        o.importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);\n    this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);\n    this.instances.set(\n        resolveIdentifier(Identifiers.Injector),\n        o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]));\n    this.instances.set(resolveIdentifier(Identifiers.Renderer), o.THIS_EXPR.prop('renderer'));\n    if (this.hasViewContainer || this.hasEmbeddedView) {\n      this._createViewContainer();\n    }\n    if (this.component) {\n      this._createComponentFactoryResolver();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createViewContainer() {\n    const /** @type {?} */ fieldName = `_vc_${this.nodeIndex}`;\n    const /** @type {?} */ parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n    // private is fine here as no child view will reference a ViewContainer\n    this.view.fields.push(new o.ClassField(\n        fieldName, o.importType(createIdentifier(Identifiers.ViewContainer)),\n        [o.StmtModifier.Private]));\n    const /** @type {?} */ statement =\n        o.THIS_EXPR.prop(fieldName)\n            .set(o.importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([\n              o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode\n            ]))\n            .toStmt();\n    this.view.createMethod.addStmt(statement);\n    this.viewContainer = o.THIS_EXPR.prop(fieldName);\n    this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);\n    this.view.viewContainers.push(this.viewContainer);\n  }\n/**\n * @return {?}\n */\nprivate _createComponentFactoryResolver() {\n    const /** @type {?} */ entryComponents = this.component.entryComponents.map((entryComponent) => {\n      this.view.targetDependencies.push(\n          new ComponentFactoryDependency(entryComponent.componentType));\n      return {reference: entryComponent.componentFactory};\n    });\n    if (!entryComponents || entryComponents.length === 0) {\n      return;\n    }\n    const /** @type {?} */ createComponentFactoryResolverExpr =\n        o.importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n          o.literalArr(entryComponents.map((entryComponent) => o.importExpr(entryComponent))),\n          injectFromViewParentInjector(\n              this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n        ]);\n    const /** @type {?} */ provider: CompileProviderMetadata = {\n      token: createIdentifierToken(Identifiers.ComponentFactoryResolver),\n      useValue: createComponentFactoryResolverExpr\n    };\n    // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n    // ProviderAstType.PrivateService as only the component and its view can see it,\n    // but nobody else\n    this._resolvedProvidersArray.unshift(new ProviderAst(\n        provider.token, false, true, [provider], ProviderAstType.PrivateService, [],\n        this.sourceAst.sourceSpan));\n  }\n/**\n * @param {?} compViewExpr\n * @return {?}\n */\nsetComponentView(compViewExpr: o.Expression) {\n    this.compViewExpr = compViewExpr;\n    this.contentNodesByNgContentIndex =\n        new Array(this.component.template.ngContentSelectors.length);\n    for (let /** @type {?} */ i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n      this.contentNodesByNgContentIndex[i] = [];\n    }\n  }\n/**\n * @param {?} embeddedView\n * @return {?}\n */\nsetEmbeddedView(embeddedView: CompileView) {\n    this.embeddedView = embeddedView;\n    if (isPresent(embeddedView)) {\n      const /** @type {?} */ createTemplateRefExpr =\n          o.importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([\n            o.THIS_EXPR, o.literal(this.nodeIndex), this.renderNode\n          ]);\n      const /** @type {?} */ provider: CompileProviderMetadata = {\n        token: createIdentifierToken(Identifiers.TemplateRef),\n        useValue: createTemplateRefExpr\n      };\n      // Add TemplateRef as first provider as it does not have deps on other providers\n      this._resolvedProvidersArray.unshift(new ProviderAst(\n          provider.token, false, true, [provider], ProviderAstType.Builtin, [],\n          this.sourceAst.sourceSpan));\n    }\n  }\n/**\n * @return {?}\n */\nbeforeChildren(): void {\n    if (this.hasViewContainer) {\n      this.instances.set(\n          resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));\n    }\n\n    this._resolvedProviders = new Map<any, ProviderAst>();\n    this._resolvedProvidersArray.forEach(\n        provider => this._resolvedProviders.set(tokenReference(provider.token), provider));\n\n    // create all the provider instances, some in the view constructor,\n    // some as getters. We rely on the fact that they are already sorted topologically.\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      const /** @type {?} */ isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||\n          resolvedProvider.providerType === ProviderAstType.Directive;\n      const /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map((provider) => {\n        if (provider.useExisting) {\n          return this._getDependency(resolvedProvider.providerType, {token: provider.useExisting});\n        } else if (provider.useFactory) {\n          const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n          const /** @type {?} */ depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useFactory).callFn(depsExpr);\n        } else if (provider.useClass) {\n          const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n          const /** @type {?} */ depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          if (isDirectiveWrapper) {\n            const /** @type {?} */ dirMeta =\n                this._directives.find(dir => dir.type.reference === provider.useClass.reference);\n            this.view.targetDependencies.push(\n                new DirectiveWrapperDependency(dirMeta.type.reference));\n            return DirectiveWrapperExpressions.create({reference: dirMeta.wrapperType}, depsExpr);\n          } else {\n            return o.importExpr(provider.useClass)\n                .instantiate(depsExpr, o.importType(provider.useClass));\n          }\n        } else {\n          return convertValueToOutputAst(provider.useValue);\n        }\n      });\n      const /** @type {?} */ propName =\n          `_${tokenName(resolvedProvider.token)}_${this.nodeIndex}_${this.instances.size}`;\n      const /** @type {?} */ instance = createProviderProperty(\n          propName, providerValueExpressions, resolvedProvider.multiProvider,\n          resolvedProvider.eager, this);\n      if (isDirectiveWrapper) {\n        this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);\n        this.instances.set(\n            tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));\n      } else {\n        this.instances.set(tokenReference(resolvedProvider.token), instance);\n      }\n    });\n\n    for (let /** @type {?} */ i = 0; i < this._directives.length; i++) {\n      const /** @type {?} */ directive = this._directives[i];\n      const /** @type {?} */ directiveInstance = this.instances.get(tokenReference(identifierToken(directive.type)));\n      directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });\n    }\n\n    Object.keys(this.referenceTokens).forEach(varName => {\n      const /** @type {?} */ token = this.referenceTokens[varName];\n      let /** @type {?} */ varValue: o.Expression;\n      if (token) {\n        varValue = this.instances.get(tokenReference(token));\n      } else {\n        varValue = this.renderNode;\n      }\n      this.view.locals.set(varName, varValue);\n    });\n  }\n/**\n * @param {?} childNodeCount\n * @return {?}\n */\nafterChildren(childNodeCount: number) {\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      // Note: afterChildren is called after recursing into children.\n      // This is good so that an injector match in an element that is closer to a requesting element\n      // matches first.\n      const /** @type {?} */ providerExpr = this.instances.get(tokenReference(resolvedProvider.token));\n      // Note: view providers are only visible on the injector of that element.\n      // This is not fully correct as the rules during codegen don't allow a directive\n      // to get hold of a view provdier on the same element. We still do this semantic\n      // as it simplifies our model to having only one runtime injector per element.\n      const /** @type {?} */ providerChildNodeCount =\n          resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;\n      this.view.injectorGetMethod.addStmt(createInjectInternalCondition(\n          this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n    });\n  }\n/**\n * @return {?}\n */\nfinish() {\n    Array.from(this._queries.values())\n        .forEach(\n            queries => queries.forEach(\n                q => q.generateStatements(\n                    this.view.createMethod, this.view.updateContentQueriesMethod)));\n  }\n/**\n * @param {?} ngContentIndex\n * @param {?} nodeExpr\n * @return {?}\n */\naddContentNode(ngContentIndex: number, nodeExpr: CompileViewRootNode) {\n    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n  }\n/**\n * @return {?}\n */\ngetComponent(): o.Expression {\n    return isPresent(this.component) ?\n        this.instances.get(tokenReference(identifierToken(this.component.type))) :\n        null;\n  }\n/**\n * @return {?}\n */\ngetProviderTokens(): CompileTokenMetadata[] {\n    return Array.from(this._resolvedProviders.values()).map(provider => provider.token);\n  }\n/**\n * @param {?} token\n * @return {?}\n */\ngetQueriesFor(token: CompileTokenMetadata): CompileQuery[] {\n    const /** @type {?} */ result: CompileQuery[] = [];\n    let /** @type {?} */ currentEl: CompileElement = this;\n    let /** @type {?} */ distance = 0;\n    let /** @type {?} */ queries: CompileQuery[];\n    while (!currentEl.isNull()) {\n      queries = currentEl._queries.get(tokenReference(token));\n      if (isPresent(queries)) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directives.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl.parent;\n    }\n    queries = this.view.componentView.viewQueries.get(tokenReference(token));\n    if (isPresent(queries)) {\n      result.push(...queries);\n    }\n    return result;\n  }\n/**\n * @param {?} queryMeta\n * @param {?} directiveInstance\n * @return {?}\n */\nprivate _addQuery(queryMeta: CompileQueryMetadata, directiveInstance: o.Expression):\n      CompileQuery {\n    const /** @type {?} */ propName =\n        `_query_${tokenName(queryMeta.selectors[0])}_${this.nodeIndex}_${this._queryCount++}`;\n    const /** @type {?} */ queryList = createQueryList(propName, this.view);\n    const /** @type {?} */ query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n    addQueryToTokenMap(this._queries, query);\n    return query;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @return {?}\n */\nprivate _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata): o.Expression {\n    let /** @type {?} */ result: o.Expression = null;\n    if (isPresent(dep.token)) {\n      // access builtins with special visibility\n      if (!result) {\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n          if (requestingProviderType === ProviderAstType.Component) {\n            return this.compViewExpr.prop('ref');\n          } else {\n            return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n          }\n        }\n      }\n      // access regular providers on the element\n      if (!result) {\n        const /** @type {?} */ resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));\n        // don't allow directives / public services to access private services.\n        // only components and private services can access private services.\n        if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||\n                                 requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) {\n          return null;\n        }\n        result = this.instances.get(tokenReference(dep.token));\n      }\n    }\n    return result;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @return {?}\n */\nprivate _getDependency(requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata):\n      o.Expression {\n    let /** @type {?} */ currElement: CompileElement = this;\n    let /** @type {?} */ result: o.Expression = null;\n    if (dep.isValue) {\n      result = o.literal(dep.value);\n    }\n    if (!result && !dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep);\n    }\n    // check parent elements\n    while (!result && !currElement.parent.isNull()) {\n      currElement = currElement.parent;\n      result = currElement._getLocalDependency(ProviderAstType.PublicService, {token: dep.token});\n    }\n\n    if (!result) {\n      result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);\n    }\n    if (!result) {\n      result = o.NULL_EXPR;\n    }\n    return getPropertyInView(result, this.view, currElement.view);\n  }\n}\n\nfunction CompileElement_tsickle_Closure_declarations() {\n/** @type {?} */\nCompileElement.prototype.compViewExpr;\n/** @type {?} */\nCompileElement.prototype.viewContainer;\n/** @type {?} */\nCompileElement.prototype.elementRef;\n/** @type {?} */\nCompileElement.prototype.instances;\n/** @type {?} */\nCompileElement.prototype.directiveWrapperInstance;\n/** @type {?} */\nCompileElement.prototype._resolvedProviders;\n/** @type {?} */\nCompileElement.prototype._queryCount;\n/** @type {?} */\nCompileElement.prototype._queries;\n/** @type {?} */\nCompileElement.prototype.contentNodesByNgContentIndex;\n/** @type {?} */\nCompileElement.prototype.embeddedView;\n/** @type {?} */\nCompileElement.prototype.referenceTokens;\n/** @type {?} */\nCompileElement.prototype.component;\n/** @type {?} */\nCompileElement.prototype._directives;\n/** @type {?} */\nCompileElement.prototype._resolvedProvidersArray;\n/** @type {?} */\nCompileElement.prototype.hasViewContainer;\n/** @type {?} */\nCompileElement.prototype.hasEmbeddedView;\n}\n\n/**\n * @param {?} nodeIndex\n * @param {?} childNodeCount\n * @param {?} provider\n * @param {?} providerExpr\n * @return {?}\n */\nfunction createInjectInternalCondition(\n    nodeIndex: number, childNodeCount: number, provider: ProviderAst,\n    providerExpr: o.Expression): o.Statement {\n  let /** @type {?} */ indexCondition: o.Expression;\n  if (childNodeCount > 0) {\n    indexCondition = o.literal(nodeIndex)\n                         .lowerEquals(InjectMethodVars.requestNodeIndex)\n                         .and(InjectMethodVars.requestNodeIndex.lowerEquals(\n                             o.literal(nodeIndex + childNodeCount)));\n  } else {\n    indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n  }\n  return new o.IfStmt(\n      InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),\n      [new o.ReturnStatement(providerExpr)]);\n}\n/**\n * @param {?} propName\n * @param {?} providerValueExpressions\n * @param {?} isMulti\n * @param {?} isEager\n * @param {?} compileElement\n * @return {?}\n */\nfunction createProviderProperty(\n    propName: string, providerValueExpressions: o.Expression[], isMulti: boolean, isEager: boolean,\n    compileElement: CompileElement): o.Expression {\n  const /** @type {?} */ view = compileElement.view;\n  let /** @type {?} */ resolvedProviderValueExpr: o.Expression;\n  let /** @type {?} */ type: o.Type;\n  if (isMulti) {\n    resolvedProviderValueExpr = o.literalArr(providerValueExpressions);\n    type = new o.ArrayType(o.DYNAMIC_TYPE);\n  } else {\n    resolvedProviderValueExpr = providerValueExpressions[0];\n    type = providerValueExpressions[0].type;\n  }\n  if (!type) {\n    type = o.DYNAMIC_TYPE;\n  }\n  if (isEager) {\n    view.fields.push(new o.ClassField(propName, type));\n    view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n  } else {\n    const /** @type {?} */ internalField = `_${propName}`;\n    view.fields.push(new o.ClassField(internalField, type));\n    const /** @type {?} */ getter = new CompileMethod(view);\n    getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n    // Note: Equals is important for JS so that it also checks the undefined case!\n    getter.addStmt(new o.IfStmt(\n        o.THIS_EXPR.prop(internalField).isBlank(),\n        [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n    getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));\n    view.getters.push(new o.ClassGetter(propName, getter.finish(), type));\n  }\n  return o.THIS_EXPR.prop(propName);\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/view_compiler/query_binder.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAuB,cAAA,EAAe,MAAA,qBAAA,CAAA;AAK7C;;;GAGG;AACH,MAAC,0BAAA,EAAA;IACC,IAAM,gBAAgB,CAAhB,gBAAA,GAAqC,EAAA,CAAG;IAE9C,EAAE,CAAC,iBAAC,EAAiB,CAAE,OAAC,CAAO,UAAC,KAAC;QAC/B,IAAM,gBAAgB,CAAhB,kBAAA,GAAqB,EAAA,CAAG,aAAC,CAAa,KAAC,CAAK,CAAC;QACnD,gBAAgB,CAAC,IAAC,OAAlB,gBAAgB,EAAO,kBAAG,CAAkB,GAAC,CAAG,UAAA,KAAC,IAAQ,OAAA,IAAI,cAAA,CAAe,KAAC,EAAM,KAAA,CAAM,EAAhC,CAAgC,CAAC,EAAE;IAC9F,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAC,CAAI,EAAC,CAAE,eAAC,CAAe,CAAC,OAAC,CAAO,UAAA,OAAC;QACvC,IAAM,gBAAgB,CAAhB,QAAA,GAAW,EAAA,KAAE,EAAM,OAAA,EAAQ,CAAC;QAClC,gBAAgB,CAAC,IAAC,OAAlB,gBAAgB,EACT,EAAC,CAAE,aAAC,CAAa,QAAC,CAAQ,CAAC,GAAC,CAAG,UAAA,KAAC,IAAQ,OAAA,IAAI,cAAA,CAAe,KAAC,EAAM,QAAA,CAAS,EAAnC,CAAmC,CAAC,EAAE;IACvF,CAAC,CAAC,CAAC;IAEH,gBAAgB,CAAC,OAAC,CAAO,UAAC,aAAC;QACzB,IAAI,gBAAgB,CAAhB,KAAU,CAAU;QACxB,EAAE,CAAC,CAAC,aAAC,CAAa,IAAC,CAAI,UAAC,CAAU,CAAC,CAAA;YACjC,0BAA0B;YAC1B,KAAK,GAAG,EAAA,CAAG,SAAC,CAAS,GAAC,CAAG,cAAC,CAAc,aAAC,CAAa,IAAC,CAAI,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAA,CAAK,CAAA;YACL,wBAAwB;YACxB,IAAM,gBAAgB,CAAhB,KAAA,GAAQ,EAAA,CAAG,eAAC,CAAe,aAAC,CAAa,IAAC,CAAI,KAAC,CAAK,CAAC;YAC3D,EAAE,CAAC,CAAC,KAAC,CAAK,CAAC,CAAA;gBACT,KAAK,GAAG,EAAA,CAAG,SAAC,CAAS,GAAC,CAAG,cAAC,CAAc,KAAC,CAAK,CAAC,CAAC;YAClD,CAAC;YAAC,IAAA,CAAK,CAAA;gBACL,KAAK,GAAG,EAAA,CAAG,UAAC,CAAU;YACxB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,KAAC,CAAK,CAAC,CAAA;YACT,aAAa,CAAC,KAAC,CAAK,QAAC,CAAQ,KAAC,EAAM,EAAA,CAAG,IAAC,CAAI,CAAC;QAC/C,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AACD;IAEA;;;OAGG;IACH,wBAHqB,KAAO,EAAc,KAAO;QAA5B,UAAA,GAAA,KAAA,CAAO;QAIxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;IACvC,CAAC;IACH,qBAAC;AAAD,CATA,AASC,IAAA;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC","file":"query_binder.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileTokenMetadata, tokenReference} from '../compile_metadata';\nimport * as o from '../output/output_ast';\n\nimport {CompileElement} from './compile_element';\nimport {CompileQuery} from './compile_query';\n/**\n * @param {?} ce\n * @return {?}\n */\nexport function bindQueryValues(ce: CompileElement) {\n  const /** @type {?} */ queriesWithReads: _QueryWithRead[] = [];\n\n  ce.getProviderTokens().forEach((token) => {\n    const /** @type {?} */ queriesForProvider = ce.getQueriesFor(token);\n    queriesWithReads.push(...queriesForProvider.map(query => new _QueryWithRead(query, token)));\n  });\n\n  Object.keys(ce.referenceTokens).forEach(varName => {\n    const /** @type {?} */ varToken = {value: varName};\n    queriesWithReads.push(\n        ...ce.getQueriesFor(varToken).map(query => new _QueryWithRead(query, varToken)));\n  });\n\n  queriesWithReads.forEach((queryWithRead) => {\n    let /** @type {?} */ value: o.Expression;\n    if (queryWithRead.read.identifier) {\n      // query for an identifier\n      value = ce.instances.get(tokenReference(queryWithRead.read));\n    } else {\n      // query for a reference\n      const /** @type {?} */ token = ce.referenceTokens[queryWithRead.read.value];\n      if (token) {\n        value = ce.instances.get(tokenReference(token));\n      } else {\n        value = ce.elementRef;\n      }\n    }\n    if (value) {\n      queryWithRead.query.addValue(value, ce.view);\n    }\n  });\n}\nclass _QueryWithRead {\npublic read: CompileTokenMetadata;\n/**\n * @param {?} query\n * @param {?} match\n */\nconstructor(public query: CompileQuery, match: CompileTokenMetadata) {\n    this.read = query.meta.read || match;\n  }\n}\n\nfunction _QueryWithRead_tsickle_Closure_declarations() {\n/** @type {?} */\n_QueryWithRead.prototype.read;\n/** @type {?} */\n_QueryWithRead.prototype.query;\n}\n\n"]}
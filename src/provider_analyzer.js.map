{"version":3,"sources":["../../../../modules/@angular/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","file":"provider_analyzer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata, tokenName, tokenReference} from './compile_metadata';\nimport {isBlank, isPresent} from './facade/lang';\nimport {Identifiers, resolveIdentifier} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, ReferenceAst} from './template_parser/template_ast';\nexport class ProviderError extends ParseError {\n/**\n * @param {?} message\n * @param {?} span\n */\nconstructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: Map<any, CompileQueryMetadata[]>;\n  /**\n   * @internal\n   */\n  viewProviders: Map<any, boolean>;\n  errors: ProviderError[] = [];\n/**\n * @param {?} component\n * @param {?} sourceSpan\n */\nconstructor(public component: CompileDirectiveMetadata,\npublic sourceSpan: ParseSourceSpan) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map<any, boolean>();\n    component.viewProviders.forEach((provider) => {\n      if (isBlank(this.viewProviders.get(tokenReference(provider.token)))) {\n        this.viewProviders.set(tokenReference(provider.token), true);\n      }\n    });\n  }\n}\n\nfunction ProviderViewContext_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewQueries;\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewProviders;\n/** @type {?} */\nProviderViewContext.prototype.errors;\n/** @type {?} */\nProviderViewContext.prototype.component;\n/** @type {?} */\nProviderViewContext.prototype.sourceSpan;\n}\n\nexport class ProviderElementContext {\nprivate _contentQueries: Map<any, CompileQueryMetadata[]>;\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _attrs: {[key: string]: string};\nprivate _hasViewContainer: boolean = false;\n/**\n * @param {?} viewContext\n * @param {?} _parent\n * @param {?} _isViewRoot\n * @param {?} _directiveAsts\n * @param {?} attrs\n * @param {?} refs\n * @param {?} _sourceSpan\n */\nconstructor(\npublic viewContext: ProviderViewContext,\nprivate _parent: ProviderElementContext,\nprivate _isViewRoot: boolean,\nprivate _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[],\nprivate _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(directivesMeta);\n    const queriedTokens = new Map<any, boolean>();\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._addQueryReadsTo(provider.token, queriedTokens);\n    });\n    refs.forEach((refAst) => { this._addQueryReadsTo({value: refAst.name}, queriedTokens); });\n    if (isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      const eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token)));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nafterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n/**\n * @return {?}\n */\nget transformProviders(): ProviderAst[] {\n    return Array.from(this._transformedProviders.values());\n  }\n/**\n * @return {?}\n */\nget transformedDirectiveAsts(): DirectiveAst[] {\n    const /** @type {?} */ sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n    const /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\n    sortedDirectives.sort(\n        (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n/**\n * @return {?}\n */\nget transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n/**\n * @param {?} token\n * @param {?} queryReadTokens\n * @return {?}\n */\nprivate _addQueryReadsTo(token: CompileTokenMetadata, queryReadTokens: Map<any, boolean>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const /** @type {?} */ queryReadToken = query.read || token;\n      if (isBlank(queryReadTokens.get(tokenReference(queryReadToken)))) {\n        queryReadTokens.set(tokenReference(queryReadToken), true);\n      }\n    });\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nprivate _getQueriesFor(token: CompileTokenMetadata): CompileQueryMetadata[] {\n    const /** @type {?} */ result: CompileQueryMetadata[] = [];\n    let /** @type {?} */ currentEl: ProviderElementContext = this;\n    let /** @type {?} */ distance = 0;\n    let /** @type {?} */ queries: CompileQueryMetadata[];\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(tokenReference(token));\n      if (queries) {\n        result.push(...queries.filter((query) => query.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this.viewContext.viewQueries.get(tokenReference(token));\n    if (queries) {\n      result.push(...queries);\n    }\n    return result;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\nprivate _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n                               requestingProviderType === ProviderAstType.PublicService) &&\n                              resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n      this.viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = provider.useExisting;\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const /** @type {?} */ existingDiDep = this._getDependency(\n            resolvedProvider.providerType, {token: provider.useExisting}, eager);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\nprivate _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    if (dep.isAttribute) {\n      const /** @type {?} */ attrValue = this._attrs[dep.token.value];\n      return {isValue: true, value: attrValue == null ? null : attrValue};\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {\n          return dep;\n        }\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {\n        return dep;\n      }\n      // access providers\n      if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n        return dep;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\nprivate _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    let /** @type {?} */ currElement: ProviderElementContext = this;\n    let /** @type {?} */ currEager: boolean = eager;\n    let /** @type {?} */ result: CompileDiDependencyMetadata = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = {isValue: true, value: null};\n      }\n    } else {\n      // check parent elements\n      while (!result && currElement._parent) {\n        const /** @type {?} */ prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.isHost ||\n            this.viewContext.component.type.reference === tokenReference(dep.token) ||\n            isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {\n          result = dep;\n        } else {\n          result = dep.isOptional ? result = {isValue: true, value: null} : null;\n        }\n      }\n    }\n    if (!result) {\n      this.viewContext.errors.push(\n          new ProviderError(`No provider for ${tokenName(dep.token)}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\nfunction ProviderElementContext_tsickle_Closure_declarations() {\n/** @type {?} */\nProviderElementContext.prototype._contentQueries;\n/** @type {?} */\nProviderElementContext.prototype._transformedProviders;\n/** @type {?} */\nProviderElementContext.prototype._seenProviders;\n/** @type {?} */\nProviderElementContext.prototype._allProviders;\n/** @type {?} */\nProviderElementContext.prototype._attrs;\n/** @type {?} */\nProviderElementContext.prototype._hasViewContainer;\n/** @type {?} */\nProviderElementContext.prototype.viewContext;\n/** @type {?} */\nProviderElementContext.prototype._parent;\n/** @type {?} */\nProviderElementContext.prototype._isViewRoot;\n/** @type {?} */\nProviderElementContext.prototype._directiveAsts;\n/** @type {?} */\nProviderElementContext.prototype._sourceSpan;\n}\n\nexport class NgModuleProviderAnalyzer {\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _errors: ProviderError[] = [];\n/**\n * @param {?} ngModule\n * @param {?} extraProviders\n * @param {?} sourceSpan\n */\nconstructor(\n      ngModule: CompileNgModuleMetadata, extraProviders: CompileProviderMetadata[],\n      sourceSpan: ParseSourceSpan) {\n    this._allProviders = new Map<any, ProviderAst>();\n    ngModule.transitiveModule.modules.forEach((ngModuleType: CompileTypeMetadata) => {\n      const ngModuleProvider = {token: {identifier: ngModuleType}, useClass: ngModuleType};\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders);\n    });\n    _resolveProviders(\n        ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n  }\n/**\n * @return {?}\n */\nparse(): ProviderAst[] {\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n    if (this._errors.length > 0) {\n      const /** @type {?} */ errorString = this._errors.join('\\n');\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    }\n    return Array.from(this._transformedProviders.values());\n  }\n/**\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\nprivate _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`,\n          resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = provider.useExisting;\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const /** @type {?} */ existingDiDep =\n            this._getDependency({token: provider.useExisting}, eager, resolvedProvider.sourceSpan);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} dep\n * @param {?=} eager\n * @param {?} requestorSourceSpan\n * @return {?}\n */\nprivate _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = null,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    let /** @type {?} */ foundLocal = false;\n    if (!dep.isSkipSelf && isPresent(dep.token)) {\n      // access the injector\n      if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||\n          tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {\n        foundLocal = true;\n        // access providers\n      } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n        foundLocal = true;\n      }\n    }\n    let /** @type {?} */ result: CompileDiDependencyMetadata = dep;\n    if (dep.isSelf && !foundLocal) {\n      if (dep.isOptional) {\n        result = {isValue: true, value: null};\n      } else {\n        this._errors.push(\n            new ProviderError(`No provider for ${tokenName(dep.token)}`, requestorSourceSpan));\n      }\n    }\n    return result;\n  }\n}\n\nfunction NgModuleProviderAnalyzer_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._transformedProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._seenProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._allProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._errors;\n}\n\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return {\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  };\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n}\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @return {?}\n */\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveSummary[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): Map<any, ProviderAst> {\n  const /** @type {?} */ providersByToken = new Map<any, ProviderAst>();\n  directives.forEach((directive) => {\n    const /** @type {?} */ dirProvider:\n        CompileProviderMetadata = {token: {identifier: directive.type}, useClass: directive.type};\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  const /** @type {?} */ directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors,\n        providersByToken);\n    _resolveProviders(\n        directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors,\n        providersByToken);\n  });\n  return providersByToken;\n}\n/**\n * @param {?} providers\n * @param {?} providerType\n * @param {?} eager\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @param {?} targetProvidersByToken\n * @return {?}\n */\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: Map<any, ProviderAst>) {\n  providers.forEach((provider) => {\n    let /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n    if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`,\n          sourceSpan));\n    }\n    if (!resolvedProvider) {\n      const /** @type {?} */ lifecycleHooks = provider.token.identifier &&\n              ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks ?\n          ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks :\n          [];\n      resolvedProvider = new ProviderAst(\n          provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider],\n          providerType, lifecycleHooks, sourceSpan);\n      targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction _getViewQueries(component: CompileDirectiveMetadata): Map<any, CompileQueryMetadata[]> {\n  const /** @type {?} */ viewQueries = new Map<any, CompileQueryMetadata[]>();\n  if (component.viewQueries) {\n    component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, query));\n  }\n  return viewQueries;\n}\n/**\n * @param {?} directives\n * @return {?}\n */\nfunction _getContentQueries(directives: CompileDirectiveSummary[]):\n    Map<any, CompileQueryMetadata[]> {\n  const /** @type {?} */ contentQueries = new Map<any, CompileQueryMetadata[]>();\n  directives.forEach(directive => {\n    if (directive.queries) {\n      directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, query));\n    }\n  });\n  return contentQueries;\n}\n/**\n * @param {?} map\n * @param {?} query\n * @return {?}\n */\nfunction _addQueryToTokenMap(map: Map<any, CompileQueryMetadata[]>, query: CompileQueryMetadata) {\n  query.selectors.forEach((token: CompileTokenMetadata) => {\n    let /** @type {?} */ entry = map.get(tokenReference(token));\n    if (!entry) {\n      entry = [];\n      map.set(tokenReference(token), entry);\n    }\n    entry.push(query);\n  });\n}\n"]}
{"version":3,"sources":["../../../../modules/@angular/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","file":"provider_analyzer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata, tokenName, tokenReference} from './compile_metadata';\nimport {isBlank, isPresent} from './facade/lang';\nimport {Identifiers, createIdentifierToken, resolveIdentifier} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, QueryId, QueryMatch, ReferenceAst} from './template_parser/template_ast';\nexport class ProviderError extends ParseError {\n/**\n * @param {?} message\n * @param {?} span\n */\nconstructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n\nexport interface QueryWithId {\n  meta: CompileQueryMetadata;\n  id: QueryId;\n}\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: Map<any, QueryWithId[]>;\n  /**\n   * @internal\n   */\n  viewProviders: Map<any, boolean>;\n  errors: ProviderError[] = [];\n/**\n * @param {?} component\n * @param {?} sourceSpan\n */\nconstructor(public component: CompileDirectiveMetadata,\npublic sourceSpan: ParseSourceSpan) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map<any, boolean>();\n    component.viewProviders.forEach((provider) => {\n      if (isBlank(this.viewProviders.get(tokenReference(provider.token)))) {\n        this.viewProviders.set(tokenReference(provider.token), true);\n      }\n    });\n  }\n}\n\nfunction ProviderViewContext_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewQueries;\n/**\n * \\@internal\n * @type {?}\n */\nProviderViewContext.prototype.viewProviders;\n/** @type {?} */\nProviderViewContext.prototype.errors;\n/** @type {?} */\nProviderViewContext.prototype.component;\n/** @type {?} */\nProviderViewContext.prototype.sourceSpan;\n}\n\nexport class ProviderElementContext {\nprivate _contentQueries: Map<any, QueryWithId[]>;\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _attrs: {[key: string]: string};\nprivate _hasViewContainer: boolean = false;\nprivate _queriedTokens = new Map<any, QueryMatch[]>();\n/**\n * @param {?} viewContext\n * @param {?} _parent\n * @param {?} _isViewRoot\n * @param {?} _directiveAsts\n * @param {?} attrs\n * @param {?} refs\n * @param {?} _sourceSpan\n */\nconstructor(\npublic viewContext: ProviderViewContext,\nprivate _parent: ProviderElementContext,\nprivate _isViewRoot: boolean,\nprivate _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[],\nprivate _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(this.depth, directivesMeta);\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\n    });\n    refs.forEach((refAst) => {\n      let defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);\n      this._addQueryReadsTo({value: refAst.name}, defaultQueryValue, this._queriedTokens);\n    });\n    if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      const eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nafterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n/**\n * @return {?}\n */\nget depth(): number {\n    let /** @type {?} */ d = 0;\n    let /** @type {?} */ current: ProviderElementContext = this;\n    while (current._parent) {\n      d++;\n      current = current._parent;\n    }\n    return d;\n  }\n/**\n * @return {?}\n */\nget transformProviders(): ProviderAst[] {\n    return Array.from(this._transformedProviders.values());\n  }\n/**\n * @return {?}\n */\nget transformedDirectiveAsts(): DirectiveAst[] {\n    const /** @type {?} */ sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n    const /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\n    sortedDirectives.sort(\n        (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n/**\n * @return {?}\n */\nget transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n/**\n * @return {?}\n */\nget queryMatches(): QueryMatch[] {\n    const /** @type {?} */ allMatches: QueryMatch[] = [];\n    this._queriedTokens.forEach((matches: QueryMatch[]) => { allMatches.push(...matches); });\n    return allMatches;\n  }\n/**\n * @param {?} token\n * @param {?} defaultValue\n * @param {?} queryReadTokens\n * @return {?}\n */\nprivate _addQueryReadsTo(\n      token: CompileTokenMetadata, defaultValue: CompileTokenMetadata,\n      queryReadTokens: Map<any, QueryMatch[]>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const /** @type {?} */ queryValue = query.meta.read || defaultValue;\n      const /** @type {?} */ tokenRef = tokenReference(queryValue);\n      let /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);\n      if (!queryMatches) {\n        queryMatches = [];\n        queryReadTokens.set(tokenRef, queryMatches);\n      }\n      queryMatches.push({query: query.id, value: queryValue});\n    });\n  }\n/**\n * @param {?} token\n * @return {?}\n */\nprivate _getQueriesFor(token: CompileTokenMetadata): QueryWithId[] {\n    const /** @type {?} */ result: QueryWithId[] = [];\n    let /** @type {?} */ currentEl: ProviderElementContext = this;\n    let /** @type {?} */ distance = 0;\n    let /** @type {?} */ queries: QueryWithId[];\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(tokenReference(token));\n      if (queries) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this.viewContext.viewQueries.get(tokenReference(token));\n    if (queries) {\n      result.push(...queries);\n    }\n    return result;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\nprivate _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n                               requestingProviderType === ProviderAstType.PublicService) &&\n                              resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n      this.viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = provider.useExisting;\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const /** @type {?} */ existingDiDep = this._getDependency(\n            resolvedProvider.providerType, {token: provider.useExisting}, eager);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\nprivate _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    if (dep.isAttribute) {\n      const /** @type {?} */ attrValue = this._attrs[dep.token.value];\n      return {isValue: true, value: attrValue == null ? null : attrValue};\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||\n            tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {\n          return dep;\n        }\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {\n        return dep;\n      }\n      // access providers\n      if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n        return dep;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @param {?=} eager\n * @return {?}\n */\nprivate _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    let /** @type {?} */ currElement: ProviderElementContext = this;\n    let /** @type {?} */ currEager: boolean = eager;\n    let /** @type {?} */ result: CompileDiDependencyMetadata = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = {isValue: true, value: null};\n      }\n    } else {\n      // check parent elements\n      while (!result && currElement._parent) {\n        const /** @type {?} */ prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.isHost ||\n            this.viewContext.component.type.reference === tokenReference(dep.token) ||\n            isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {\n          result = dep;\n        } else {\n          result = dep.isOptional ? result = {isValue: true, value: null} : null;\n        }\n      }\n    }\n    if (!result) {\n      this.viewContext.errors.push(\n          new ProviderError(`No provider for ${tokenName(dep.token)}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\nfunction ProviderElementContext_tsickle_Closure_declarations() {\n/** @type {?} */\nProviderElementContext.prototype._contentQueries;\n/** @type {?} */\nProviderElementContext.prototype._transformedProviders;\n/** @type {?} */\nProviderElementContext.prototype._seenProviders;\n/** @type {?} */\nProviderElementContext.prototype._allProviders;\n/** @type {?} */\nProviderElementContext.prototype._attrs;\n/** @type {?} */\nProviderElementContext.prototype._hasViewContainer;\n/** @type {?} */\nProviderElementContext.prototype._queriedTokens;\n/** @type {?} */\nProviderElementContext.prototype.viewContext;\n/** @type {?} */\nProviderElementContext.prototype._parent;\n/** @type {?} */\nProviderElementContext.prototype._isViewRoot;\n/** @type {?} */\nProviderElementContext.prototype._directiveAsts;\n/** @type {?} */\nProviderElementContext.prototype._sourceSpan;\n}\n\nexport class NgModuleProviderAnalyzer {\nprivate _transformedProviders = new Map<any, ProviderAst>();\nprivate _seenProviders = new Map<any, boolean>();\nprivate _allProviders: Map<any, ProviderAst>;\nprivate _errors: ProviderError[] = [];\n/**\n * @param {?} ngModule\n * @param {?} extraProviders\n * @param {?} sourceSpan\n */\nconstructor(\n      ngModule: CompileNgModuleMetadata, extraProviders: CompileProviderMetadata[],\n      sourceSpan: ParseSourceSpan) {\n    this._allProviders = new Map<any, ProviderAst>();\n    ngModule.transitiveModule.modules.forEach((ngModuleType: CompileTypeMetadata) => {\n      const ngModuleProvider = {token: {identifier: ngModuleType}, useClass: ngModuleType};\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders);\n    });\n    _resolveProviders(\n        ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n  }\n/**\n * @return {?}\n */\nparse(): ProviderAst[] {\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n    if (this._errors.length > 0) {\n      const /** @type {?} */ errorString = this._errors.join('\\n');\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    }\n    return Array.from(this._transformedProviders.values());\n  }\n/**\n * @param {?} token\n * @param {?} eager\n * @return {?}\n */\nprivate _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst {\n    const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n    if (!resolvedProvider) {\n      return null;\n    }\n    let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(tokenReference(token)))) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${tokenName(token)}`,\n          resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(tokenReference(token), true);\n    const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\n      let /** @type {?} */ transformedUseValue = provider.useValue;\n      let /** @type {?} */ transformedUseExisting = provider.useExisting;\n      let /** @type {?} */ transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const /** @type {?} */ existingDiDep =\n            this._getDependency({token: provider.useExisting}, eager, resolvedProvider.sourceSpan);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (provider.useClass) {\n        const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n    return transformedProviderAst;\n  }\n/**\n * @param {?} dep\n * @param {?=} eager\n * @param {?} requestorSourceSpan\n * @return {?}\n */\nprivate _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = null,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    let /** @type {?} */ foundLocal = false;\n    if (!dep.isSkipSelf && isPresent(dep.token)) {\n      // access the injector\n      if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||\n          tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {\n        foundLocal = true;\n        // access providers\n      } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n        foundLocal = true;\n      }\n    }\n    let /** @type {?} */ result: CompileDiDependencyMetadata = dep;\n    if (dep.isSelf && !foundLocal) {\n      if (dep.isOptional) {\n        result = {isValue: true, value: null};\n      } else {\n        this._errors.push(\n            new ProviderError(`No provider for ${tokenName(dep.token)}`, requestorSourceSpan));\n      }\n    }\n    return result;\n  }\n}\n\nfunction NgModuleProviderAnalyzer_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._transformedProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._seenProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._allProviders;\n/** @type {?} */\nNgModuleProviderAnalyzer.prototype._errors;\n}\n\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return {\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  };\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n}\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @return {?}\n */\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveSummary[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): Map<any, ProviderAst> {\n  const /** @type {?} */ providersByToken = new Map<any, ProviderAst>();\n  directives.forEach((directive) => {\n    const /** @type {?} */ dirProvider:\n        CompileProviderMetadata = {token: {identifier: directive.type}, useClass: directive.type};\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  const /** @type {?} */ directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors,\n        providersByToken);\n    _resolveProviders(\n        directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors,\n        providersByToken);\n  });\n  return providersByToken;\n}\n/**\n * @param {?} providers\n * @param {?} providerType\n * @param {?} eager\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @param {?} targetProvidersByToken\n * @return {?}\n */\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: Map<any, ProviderAst>) {\n  providers.forEach((provider) => {\n    let /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n    if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`,\n          sourceSpan));\n    }\n    if (!resolvedProvider) {\n      const /** @type {?} */ lifecycleHooks = provider.token.identifier &&\n              ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks ?\n          ( /** @type {?} */((<CompileTypeMetadata>provider.token.identifier))).lifecycleHooks :\n          [];\n      resolvedProvider = new ProviderAst(\n          provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider],\n          providerType, lifecycleHooks, sourceSpan);\n      targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction _getViewQueries(component: CompileDirectiveMetadata): Map<any, QueryWithId[]> {\n  const /** @type {?} */ viewQueries = new Map<any, QueryWithId[]>();\n  if (component.viewQueries) {\n    component.viewQueries.forEach(\n        (query, queryIndex) => _addQueryToTokenMap(\n            viewQueries,\n            {meta: query, id: {elementDepth: null, directiveIndex: null, queryIndex: queryIndex}}));\n  }\n  return viewQueries;\n}\n/**\n * @param {?} elementDepth\n * @param {?} directives\n * @return {?}\n */\nfunction _getContentQueries(\n    elementDepth: number, directives: CompileDirectiveSummary[]): Map<any, QueryWithId[]> {\n  const /** @type {?} */ contentQueries = new Map<any, QueryWithId[]>();\n  directives.forEach((directive, directiveIndex) => {\n    if (directive.queries) {\n      directive.queries.forEach(\n          (query, queryIndex) => _addQueryToTokenMap(\n              contentQueries, {meta: query, id: {elementDepth, directiveIndex, queryIndex}}));\n    }\n  });\n  return contentQueries;\n}\n/**\n * @param {?} map\n * @param {?} query\n * @return {?}\n */\nfunction _addQueryToTokenMap(map: Map<any, QueryWithId[]>, query: QueryWithId) {\n  query.meta.selectors.forEach((token: CompileTokenMetadata) => {\n    let /** @type {?} */ entry = map.get(tokenReference(token));\n    if (!entry) {\n      entry = [];\n      map.set(tokenReference(token), entry);\n    }\n    entry.push(query);\n  });\n}\n"]}
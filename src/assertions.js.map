{"version":3,"sources":["../../../../modules/@angular/compiler/src/assertions.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,SAAE,EAAS,MAAA,qBAAA;OAEX,EAAA,OAAE,EAAQ,SAAA,EAAU,MAAA,oBAAA;AAC3B;;;;GAIG;AACH,qCAJC,UAAA,EAAA,KAAA;IAKC,EAAE,CAAC,CAAC,CAJC,SAAC,EAAS,IAAK,OAAA,CAAQ,KAAC,CAAK,CAAC,CAAC,CAAA;QAKlC,MAAM,CAAC;IACT,CAAC;IACD,EAAE,CAAC,CAAC,CAJC,KAAC,CAAK,OAAC,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;QAKzB,MAJM,IAAI,KAAA,CAAM,aAAC,UAAa,8BAAU,CAA8B,CAAC;IAKzE,CAAC;IACD,GAAG,CAAC,CAAC,IAJC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAC,EAAO,CAAA,IAAK,CAAA,EAAG,CAAA;QAKxC,EAAE,CAAC,CAAC,OAJO,KAAA,CAAM,CAAC,CAAC,KAAK,QAAA,CAAS,CAAC,CAAA;YAKhC,MAJM,IAAI,KAAA,CAAM,aAAC,UAAa,8BAAU,CAA8B,CAAC;QAKzE,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,gBAAgB,CAJhB,+BAAA,GAAkC;IAKtC,OAAO;IACP,MAAM;IACN,QAAQ;IACR,aAAa;IACb,OAAO;CACR,CAJC;AAKF;;;;GAIG;AACH,2CARC,UAAA,EAAA,KAAA;IASC,EAAE,CAAC,CAAC,SARC,CAAS,KAAC,CAAK,IAAI,CAAA,CAAE,KAAC,CAAK,OAAC,CAAO,KAAC,CAAK,IAAI,KAAA,CAAM,MAAC,IAAS,CAAA,CAAE,CAAC,CAAC,CAAA;QASpE,MARM,IAAI,KAAA,CAAM,aAAC,UAAa,iCAAU,CAAiC,CAAC;IAS5E,CAAC;IARC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,EAAS,IAAK,CAAA,OAAE,CAAO,KAAC,CAAK,CAAC,CAAC,CAAA;QASzC,MAAM,gBAAgB,CARhB,KAAA,GAAM,CAAE,KAAA,CAAM,CAAC,CAAK,CAAA,CAAO;QASjC,MAAM,gBAAgB,CARhB,GAAA,GAAI,CAAE,KAAA,CAAM,CAAC,CAAK,CAAA,CAAO;QAS/B,sBAAsB;QACtB,+BAA+B,CARC,OAAC,CAAO,MAAC;YASvC,EAAE,CAAC,CAAC,MARC,CAAM,IAAC,CAAI,KAAC,CAAK,IAAI,MAAA,CAAO,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAA;gBAS1C,MARM,IAAI,KAAA,CAAM,KAAC,KAAK,OAAK,GAAO,4CAAG,CAA4C,CAAC;YASpF,CAAC;QACH,CAAC,CARC,CAAC;IASL,CAAC;AACH,CAAC","file":"assertions.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core/index';\n\nimport {isBlank, isPresent} from '../src/facade/lang';\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (!isDevMode() || isBlank(value)) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (let /** @type {?} */ i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [\n  /^\\s*$/,        // empty\n  /[<>]/,         // html tag\n  /^[{}]$/,       // i18n expansion\n  /&(#|[a-z])/i,  // character reference,\n  /^\\/\\//,        // comment\n];\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (isDevMode() && !isBlank(value)) {\n    const /** @type {?} */ start = /** @type {?} */(( value[0] as string));\n    const /** @type {?} */ end = /** @type {?} */(( value[1] as string));\n    // black list checking\n    INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n"]}
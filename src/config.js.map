{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/config.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAA6B,iBAAiB,EAAE,SAAS,EAAC,MAAM,qBAAqB;OAGrF,EAAC,WAAW,EAAE,gBAAgB,EAAC,MAAM,eAAe;AAC3D;IAOA;;OAEG;IACH,YACM,EAAC,WAAW,GAAG,IAAI,kBAAkB,EAAE,EAAE,oBAAoB,GAAG,iBAAiB,CAAC,QAAQ,EACzF,YAAY,EAAE,gBAAgB,EAAE,MAAM,GAAG,IAAI,EAAE,kBAAkB,EAAC,GAO/D,EAAE;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IACH;;OAEG;IACH,IAAI,YAAY;QACZ,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;IAC1E,CAAC;IACH;;OAEG;IACH,IAAI,gBAAgB;QAChB,MAAM,CAAC,IAAI,CAAC,iBAAiB,KAAK,KAAK,CAAC,GAAG,SAAS,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC;IAClF,CAAC;AACH,CAAC;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC9C,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,aAAa,CAAC;IACvC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC3C,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC5C,CAAC;AAED;;;;;GAKG;AACH;IACA;;;OAGG;IACH,QAAQ,KAAI,CAAC;IACb;;;OAGG;IACH,UAAU,KAAI,CAAC;IACf;;;OAGG;IACH,aAAa,KAAI,CAAC;IAClB;;;OAGG;IACH,aAAa,KAAI,CAAC;IAClB;;;OAGG;IACH,UAAU,KAAI,CAAC;IACf;;;OAGG;IACH,WAAW,KAAI,CAAC;AAChB,CAAC;AACD;IAAA;QAKE,eAAU,GAAQ,IAAI,CAAC;QACvB,kBAAa,GAAQ,IAAI,CAAC;QAC1B,kBAAa,GAAQ,IAAI,CAAC;QAC1B,eAAU,GAAQ,IAAI,CAAC;QACvB,gBAAW,GAAQ,IAAI,CAAC;IAC1B,CAAC;IATD;;OAEG;IACH,IAAI,QAAQ,KAAK,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAMjE,CAAC;AAED;IACA,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC;IACxC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC3C,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,aAAa,CAAC;IAC3C,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC;IACxC,gBAAgB;IAChB,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC;AACzC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy, ViewEncapsulation, isDevMode} from '@angular/core/index';\n\nimport {CompileIdentifierMetadata} from './compile_metadata';\nimport {Identifiers, createIdentifier} from './identifiers';\nexport class CompilerConfig {\npublic renderTypes: RenderTypes;\npublic defaultEncapsulation: ViewEncapsulation;\nprivate _genDebugInfo: boolean;\nprivate _logBindingUpdate: boolean;\npublic useJit: boolean;\npublic missingTranslation: MissingTranslationStrategy;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {renderTypes = new DefaultRenderTypes(), defaultEncapsulation = ViewEncapsulation.Emulated,\n       genDebugInfo, logBindingUpdate, useJit = true, missingTranslation}: {\n        renderTypes?: RenderTypes,\n        defaultEncapsulation?: ViewEncapsulation,\n        genDebugInfo?: boolean,\n        logBindingUpdate?: boolean,\n        useJit?: boolean,\n        missingTranslation?: MissingTranslationStrategy,\n      } = {}) {\n    this.renderTypes = renderTypes;\n    this.defaultEncapsulation = defaultEncapsulation;\n    this._genDebugInfo = genDebugInfo;\n    this._logBindingUpdate = logBindingUpdate;\n    this.useJit = useJit;\n    this.missingTranslation = missingTranslation;\n  }\n/**\n * @return {?}\n */\nget genDebugInfo(): boolean {\n    return this._genDebugInfo === void 0 ? isDevMode() : this._genDebugInfo;\n  }\n/**\n * @return {?}\n */\nget logBindingUpdate(): boolean {\n    return this._logBindingUpdate === void 0 ? isDevMode() : this._logBindingUpdate;\n  }\n}\n\nfunction CompilerConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nCompilerConfig.prototype.renderTypes;\n/** @type {?} */\nCompilerConfig.prototype.defaultEncapsulation;\n/** @type {?} */\nCompilerConfig.prototype._genDebugInfo;\n/** @type {?} */\nCompilerConfig.prototype._logBindingUpdate;\n/** @type {?} */\nCompilerConfig.prototype.useJit;\n/** @type {?} */\nCompilerConfig.prototype.missingTranslation;\n}\n\n/**\n * Types used for the renderer.\n * Can be replaced to specialize the generated output to a specific renderer\n * to help tree shaking.\n * @abstract\n */\nexport abstract class RenderTypes {\n/**\n * @abstract\n * @return {?}\n */\nrenderer() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderText() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderElement() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderComment() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderNode() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderEvent() {}\n}\nexport class DefaultRenderTypes implements RenderTypes {\n/**\n * @return {?}\n */\nget renderer() { return createIdentifier(Identifiers.Renderer); };\n  renderText: any = null;\n  renderElement: any = null;\n  renderComment: any = null;\n  renderNode: any = null;\n  renderEvent: any = null;\n}\n\nfunction DefaultRenderTypes_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultRenderTypes.prototype.renderText;\n/** @type {?} */\nDefaultRenderTypes.prototype.renderElement;\n/** @type {?} */\nDefaultRenderTypes.prototype.renderComment;\n/** @type {?} */\nDefaultRenderTypes.prototype.renderNode;\n/** @type {?} */\nDefaultRenderTypes.prototype.renderEvent;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../modules/@angular/compiler/src/pipe_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;OAEI,EAAA,IAAE,EAAW,iBAAA,EAAkB,MAAA,eAAA;OAE/B,EAAA,WAAE,EAAW,MAAA,qBAAA;OACb,EAAA,SAAE,EAAS,MAAA,eAAA;OACX,EAAA,kBAAE,EAAkB,MAAA,cAAA;OACpB,EAAA,eAAE,EAAgB,SAAA,EAAU,MAAA,uBAAA;AACnC;;;GAGG;AACH,yBAHC,IAAA;IAIC,MAAM,CAHC,IAAA,YAAgB,IAAA,CAAK;AAI9B,CAAC;AACD;;;;;;GAMG;AAEH;IACA;;OAEG;IACH,sBALsB,UAA8B;QAAjD,0BAAiD,GAAjD,sBAAiD;QAA9B,eAAA,GAAA,UAAA,CAA8B;IAAU,CAAA;IAM9D;;;OAGG;IACH,6BARG,GAQH,UARG,IAAA;QASC,IAAM,gBAAgB,CARhB,YAAA,GAAe,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAS1E,MAAM,CARC,YAAA,IAAgB,YAAA,CAAa,IAAC,CAAI,eAAC,CAAe,CAAC;IAS5D,CAAC;IACH;;;;;OAKG;IACH,8BAVG,GAUH,UAVG,IAAA,EAAA,eAAA;QAAA,+BAAA,GAAA,sBAAA;QAWC,IAAM,gBAAgB,CAVhB,KAAA,GAAQ,IAAA,CAAK,UAAC,CAAU,WAAC,CAAW,iBAAC,CAAiB,IAAC,CAAI,CAAC,CAAC;QAWnE,EAAE,CAAC,CAAC,KAVC,CAAK,CAAC,CAAA;YAWT,IAAM,gBAAgB,CAVhB,UAAA,GAAa,WAAA,CAAY,QAAC,CAAQ,KAAC,EAAM,eAAA,CAAgB,CAAC;YAWhE,EAAE,CAAC,CAAC,UAVC,CAAU,CAAC,CAAA;gBAWd,MAAM,CAVC,UAAA,CAAW;YAWpB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,eAVC,CAAe,CAAC,CAAA;YAWnB,MAVM,IAAI,KAAA,CAAM,gCAAC,SAA8B,CAAS,IAAC,CAAK,CAAE,CAAC;QAWnE,CAAC;QACD,MAAM,CAVC,IAAA,CAAK;IAWd,CAAC;IAhCH;QAFC,kBAAA,EAAA;;oBAAA;IAmCD,mBAAC;AAAD,CAhCA,AAgCC,IAAA;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;AAClC,CAAC","file":"pipe_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, Type, resolveForwardRef} from '@angular/core';\n\nimport {ListWrapper} from './facade/collection';\nimport {stringify} from './facade/lang';\nimport {CompilerInjectable} from './injectable';\nimport {ReflectorReader, reflector} from './private_import_core';\n/**\n * @param {?} type\n * @return {?}\n */\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof Pipe;\n}\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n * \n * This interface can be overridden by the application developer to create custom behavior.\n * \n * See {\\@link Compiler}\n */\n@CompilerInjectable()\nexport class PipeResolver {\n/**\n * @param {?=} _reflector\n */\nconstructor(private _reflector: ReflectorReader = reflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisPipe(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(_isPipeMetadata);\n  }\n/**\n * Return {\\@link Pipe} for a given `Type`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Pipe {\n    const /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\n    if (metas) {\n      const /** @type {?} */ annotation = ListWrapper.findLast(metas, _isPipeMetadata);\n      if (annotation) {\n        return annotation;\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n    return null;\n  }\n}\n\nfunction PipeResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeResolver.prototype._reflector;\n}\n\n"]}
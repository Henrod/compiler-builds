{"version":3,"sources":["../../../../../modules/@angular/compiler/src/aot/summary_serializer.ts"],"names":[],"mappings":"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","file":"summary_serializer.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileNgModuleSummary, CompileSummaryKind, CompileTypeSummary} from '../compile_metadata';\nimport {Summary, SummaryResolver} from '../summary_resolver';\nimport {ValueTransformer, visitValue} from '../util';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {ResolvedStaticSymbol, StaticSymbolResolver} from './static_symbol_resolver';\n/**\n * @param {?} summaryResolver\n * @param {?} symbolResolver\n * @param {?} symbols\n * @param {?} types\n * @return {?}\n */\nexport function serializeSummaries(\n    summaryResolver: SummaryResolver<StaticSymbol>, symbolResolver: StaticSymbolResolver,\n    symbols: ResolvedStaticSymbol[], types: CompileTypeSummary[]):\n    {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n  const /** @type {?} */ serializer = new Serializer(symbolResolver, summaryResolver);\n\n  // for symbols, we use everything except for the class metadata itself\n  // (we keep the statics though), as the class metadata is contained in the\n  // CompileTypeSummary.\n  symbols.forEach(\n      (resolvedSymbol) => serializer.addOrMergeSummary(\n          {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata}));\n  // Add summaries that are referenced by the given symbols (transitively)\n  // Note: the serializer.symbols array might be growing while\n  // we execute the loop!\n  for (let /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {\n    const /** @type {?} */ symbol = serializer.symbols[processedIndex];\n    if (summaryResolver.isLibraryFile(symbol.filePath)) {\n      let /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);\n      if (!summary) {\n        // some symbols might originate from a plain typescript library\n        // that just exported .d.ts and .metadata.json files, i.e. where no summary\n        // files were created.\n        const /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n          summary = {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata};\n        }\n      }\n      if (summary) {\n        serializer.addOrMergeSummary(summary);\n      }\n    }\n  }\n\n  // Add type summaries.\n  // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n  // as the type summaries already contain the transitive data that they require\n  // (in a minimal way).\n  types.forEach((typeSummary) => {\n    serializer.addOrMergeSummary(\n        {symbol: typeSummary.type.reference, metadata: {__symbolic: 'class'}, type: typeSummary});\n    if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {\n      const /** @type {?} */ ngModuleSummary = /** @type {?} */(( <CompileNgModuleSummary>typeSummary));\n      ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\n        const /** @type {?} */ symbol: StaticSymbol = id.reference;\n        if (summaryResolver.isLibraryFile(symbol.filePath)) {\n          const /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);\n          if (summary) {\n            serializer.addOrMergeSummary(summary);\n          }\n        }\n      });\n    }\n  });\n  return serializer.serialize();\n}\n/**\n * @param {?} symbolCache\n * @param {?} json\n * @return {?}\n */\nexport function deserializeSummaries(symbolCache: StaticSymbolCache, json: string):\n    {summaries: Summary<StaticSymbol>[], importAs: {symbol: StaticSymbol, importAs: string}[]} {\n  const /** @type {?} */ deserializer = new Deserializer(symbolCache);\n  return deserializer.deserialize(json);\n}\nclass Serializer extends ValueTransformer {\n  // Note: This only contains symbols without members.\n  symbols: StaticSymbol[] = [];\nprivate indexBySymbol = new Map<StaticSymbol, number>();\nprivate processedSummaryBySymbol = new Map<StaticSymbol, any>();\nprivate processedSummaries: any[] = [];\n/**\n * @param {?} symbolResolver\n * @param {?} summaryResolver\n */\nconstructor(\nprivate symbolResolver: StaticSymbolResolver,\nprivate summaryResolver: SummaryResolver<StaticSymbol>) {\n    super();\n  }\n/**\n * @param {?} summary\n * @return {?}\n */\naddOrMergeSummary(summary: Summary<StaticSymbol>) {\n    let /** @type {?} */ symbolMeta = summary.metadata;\n    if (symbolMeta && symbolMeta.__symbolic === 'class') {\n      // For classes, we only keep their statics and arity, but not the metadata\n      // of the class itself as that has been captured already via other summaries\n      // (e.g. DirectiveSummary, ...).\n      symbolMeta = {__symbolic: 'class', statics: symbolMeta.statics, arity: symbolMeta.arity};\n    }\n\n    let /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n    if (!processedSummary) {\n      processedSummary = this.processValue({symbol: summary.symbol});\n      this.processedSummaries.push(processedSummary);\n      this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n    }\n    // Note: == on purpose to compare with undefined!\n    if (processedSummary.metadata == null && symbolMeta != null) {\n      processedSummary.metadata = this.processValue(symbolMeta);\n    }\n    // Note: == on purpose to compare with undefined!\n    if (processedSummary.type == null && summary.type != null) {\n      processedSummary.type = this.processValue(summary.type);\n    }\n  }\n/**\n * @return {?}\n */\nserialize(): {json: string, exportAs: {symbol: StaticSymbol, exportAs: string}[]} {\n    const /** @type {?} */ exportAs: {symbol: StaticSymbol, exportAs: string}[] = [];\n    const /** @type {?} */ json = JSON.stringify({\n      summaries: this.processedSummaries,\n      symbols: this.symbols.map((symbol, index) => {\n        symbol.assertNoMembers();\n        let /** @type {?} */ importAs: string;\n        if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\n          importAs = `${symbol.name}_${index}`;\n          exportAs.push({symbol, exportAs: importAs});\n        }\n        return {\n          __symbol: index,\n          name: symbol.name,\n          // We convert the source filenames tinto output filenames,\n          // as the generated summary file will be used when teh current\n          // compilation unit is used as a library\n          filePath: this.summaryResolver.getLibraryFileName(symbol.filePath),\n          importAs: importAs\n        };\n      })\n    });\n    return {json, exportAs};\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate processValue(value: any): any { return visitValue(value, this, null); }\n/**\n * @param {?} value\n * @param {?} context\n * @return {?}\n */\nvisitOther(value: any, context: any): any {\n    if (value instanceof StaticSymbol) {\n      const /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n      let /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);\n      // Note: == on purpose to compare with undefined!\n      if (index == null) {\n        index = this.indexBySymbol.size;\n        this.indexBySymbol.set(baseSymbol, index);\n        this.symbols.push(baseSymbol);\n      }\n      return {__symbol: index, members: value.members};\n    }\n  }\n}\n\nfunction Serializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSerializer.prototype.symbols;\n/** @type {?} */\nSerializer.prototype.indexBySymbol;\n/** @type {?} */\nSerializer.prototype.processedSummaryBySymbol;\n/** @type {?} */\nSerializer.prototype.processedSummaries;\n/** @type {?} */\nSerializer.prototype.symbolResolver;\n/** @type {?} */\nSerializer.prototype.summaryResolver;\n}\n\nclass Deserializer extends ValueTransformer {\nprivate symbols: StaticSymbol[];\n/**\n * @param {?} symbolCache\n */\nconstructor(private symbolCache: StaticSymbolCache) { super(); }\n/**\n * @param {?} json\n * @return {?}\n */\ndeserialize(json: string):\n      {summaries: Summary<StaticSymbol>[], importAs: {symbol: StaticSymbol, importAs: string}[]} {\n    const /** @type {?} */ data: {summaries: any[], symbols: any[]} = JSON.parse(json);\n    const /** @type {?} */ importAs: {symbol: StaticSymbol, importAs: string}[] = [];\n    this.symbols = [];\n    data.symbols.forEach((serializedSymbol) => {\n      const /** @type {?} */ symbol = this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);\n      this.symbols.push(symbol);\n      if (serializedSymbol.importAs) {\n        importAs.push({symbol: symbol, importAs: serializedSymbol.importAs});\n      }\n    });\n    const /** @type {?} */ summaries = visitValue(data.summaries, this, null);\n    return {summaries, importAs};\n  }\n/**\n * @param {?} map\n * @param {?} context\n * @return {?}\n */\nvisitStringMap(map: {[key: string]: any}, context: any): any {\n    if ('__symbol' in map) {\n      const /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];\n      const /** @type {?} */ members = map['members'];\n      return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                              baseSymbol;\n    } else {\n      return super.visitStringMap(map, context);\n    }\n  }\n}\n\nfunction Deserializer_tsickle_Closure_declarations() {\n/** @type {?} */\nDeserializer.prototype.symbols;\n/** @type {?} */\nDeserializer.prototype.symbolCache;\n}\n"]}
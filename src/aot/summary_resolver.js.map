{"version":3,"sources":["../../../../../modules/@angular/compiler/src/aot/summary_resolver.ts"],"names":[],"mappings":"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","file":"summary_resolver.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Summary, SummaryResolver} from '../summary_resolver';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {deserializeSummaries} from './summary_serializer';\nimport {ngfactoryFilePath, stripNgFactory, summaryFileName} from './util';\n\nexport interface AotSummaryResolverHost {\n  /**\n   * Loads an NgModule/Directive/Pipe summary file\n   */\n  loadSummary(filePath: string): string /*|null*/;\n\n  /**\n   * Returns whether a file is a source file or not.\n   */\n  isSourceFile(sourceFilePath: string): boolean;\n  /**\n   * Returns the output file path of a source file.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   */\n  getOutputFileName(sourceFilePath: string): string;\n}\nexport class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\nprivate summaryCache = new Map<StaticSymbol, Summary<StaticSymbol>>();\nprivate loadedFilePaths = new Set<string>();\nprivate importAs = new Map<StaticSymbol, StaticSymbol>();\n/**\n * @param {?} host\n * @param {?} staticSymbolCache\n */\nconstructor(private host: AotSummaryResolverHost,\nprivate staticSymbolCache: StaticSymbolCache) {}\n/**\n * @param {?} filePath\n * @return {?}\n */\nisLibraryFile(filePath: string): boolean {\n    // Note: We need to strip the .ngfactory. file path,\n    // so this method also works for generated files\n    // (for which host.isSourceFile will always return false).\n    return !this.host.isSourceFile(stripNgFactory(filePath));\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\ngetLibraryFileName(filePath: string) { return this.host.getOutputFileName(filePath); }\n/**\n * @param {?} staticSymbol\n * @return {?}\n */\nresolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol> {\n    staticSymbol.assertNoMembers();\n    let /** @type {?} */ summary = this.summaryCache.get(staticSymbol);\n    if (!summary) {\n      this._loadSummaryFile(staticSymbol.filePath);\n      summary = this.summaryCache.get(staticSymbol);\n    }\n    return summary;\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\ngetSymbolsOf(filePath: string): StaticSymbol[] {\n    this._loadSummaryFile(filePath);\n    return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\n  }\n/**\n * @param {?} staticSymbol\n * @return {?}\n */\ngetImportAs(staticSymbol: StaticSymbol): StaticSymbol {\n    staticSymbol.assertNoMembers();\n    return this.importAs.get(staticSymbol);\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\nprivate _loadSummaryFile(filePath: string) {\n    if (this.loadedFilePaths.has(filePath)) {\n      return;\n    }\n    this.loadedFilePaths.add(filePath);\n    if (this.isLibraryFile(filePath)) {\n      const /** @type {?} */ summaryFilePath = summaryFileName(filePath);\n      let /** @type {?} */ json: string;\n      try {\n        json = this.host.loadSummary(summaryFilePath);\n      } catch ( /** @type {?} */e) {\n        console.error(`Error loading summary file ${summaryFilePath}`);\n        throw e;\n      }\n      if (json) {\n        const {summaries, importAs} = deserializeSummaries(this.staticSymbolCache, json);\n        summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\n        importAs.forEach((importAs) => {\n          this.importAs.set(\n              importAs.symbol,\n              this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));\n        });\n      }\n    }\n  }\n}\n\nfunction AotSummaryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nAotSummaryResolver.prototype.summaryCache;\n/** @type {?} */\nAotSummaryResolver.prototype.loadedFilePaths;\n/** @type {?} */\nAotSummaryResolver.prototype.importAs;\n/** @type {?} */\nAotSummaryResolver.prototype.host;\n/** @type {?} */\nAotSummaryResolver.prototype.staticSymbolCache;\n}\n\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/aot/compiler_factory.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAA,0BAAE,EAA2B,iBAAA,EAAkB,MAAA,qBAAA,CAAA;AAEtD,OAAO,EAAA,eAAE,EAAe,MAAA,+BAAA,CAAA;AACxB,OAAO,EAAA,cAAE,EAAc,MAAA,WAAA,CAAA;AACvB,OAAO,EAAA,mBAAE,EAAmB,MAAA,yBAAA,CAAA;AAC5B,OAAO,EAAA,iBAAE,EAAiB,MAAA,uBAAA,CAAA;AAC1B,OAAO,EAAA,wBAAE,EAAwB,MAAA,+BAAA,CAAA;AACjC,OAAO,EAAA,KAAE,EAAK,MAAA,4BAAA,CAAA;AACd,OAAO,EAAA,MAAE,EAAM,MAAA,6BAAA,CAAA;AACf,OAAO,EAAA,cAAE,EAAc,MAAA,0BAAA,CAAA;AACvB,OAAO,EAAA,uBAAE,EAAuB,MAAA,sBAAA,CAAA;AAChC,OAAO,EAAA,UAAE,EAAU,MAAA,0BAAA,CAAA;AACnB,OAAO,EAAA,gBAAE,EAAgB,MAAA,uBAAA,CAAA;AACzB,OAAO,EAAA,gBAAE,EAAgB,MAAA,uBAAA,CAAA;AACzB,OAAO,EAAA,iBAAE,EAAiB,MAAA,sBAAA,CAAA;AAC1B,OAAO,EAAA,YAAE,EAAY,MAAA,kBAAA,CAAA;AACrB,OAAO,EAAA,OAAE,EAAO,MAAA,wBAAA,CAAA;AAChB,OAAO,EAAA,wBAAE,EAAwB,MAAA,uCAAA,CAAA;AACjC,OAAO,EAAA,aAAE,EAAa,MAAA,mBAAA,CAAA;AACtB,OAAO,EAAA,cAAE,EAAc,MAAA,oCAAA,CAAA;AACvB,OAAO,EAAA,+BAAE,EAA+B,MAAA,iBAAA,CAAA;AACxC,OAAO,EAAA,YAAE,EAAY,MAAA,gCAAA,CAAA;AAErB,OAAO,EAAA,WAAE,EAAW,MAAA,YAAA,CAAA;AAGpB,OAAO,EAAA,sCAAE,EAAsC,MAAA,kCAAA,CAAA;AAC/C,OAAO,EAAA,eAAE,EAAe,MAAA,oBAAA,CAAA;AACxB,OAAO,EAAe,iBAAA,EAAkB,MAAA,iBAAA,CAAA;AACxC,OAAO,EAAA,oBAAE,EAAoB,MAAA,0BAAA,CAAA;AAC7B,OAAO,EAAA,kBAAE,EAAkB,MAAA,oBAAA,CAAA;AAC3B;;;;;GAKG;AACH,MAAC,4BAAA,YAAA,EAAA,OAAA;IAEC,IAAI,gBAAgB,CAAhB,YAAA,GAAuB,OAAA,CAAQ,YAAC,IAAe,EAAA,CAAG;IAEtD,MAAM,gBAAgB,CAAhB,WAAA,GAAc,+BAAA,EAAgC,CAAE;IACtD,MAAM,gBAAgB,CAAhB,WAAA,GAAc,IAAI,iBAAA,EAAkB,CAAE;IAC5C,MAAM,gBAAgB,CAAhB,eAAA,GAAkB,IAAI,kBAAA,CAAmB,YAAC,EAAa,WAAA,CAAY,CAAC;IAC1E,MAAM,gBAAgB,CAAhB,cAAA,GAAiB,IAAI,oBAAA,CAAqB,YAAC,EAAa,WAAA,EAAa,eAAA,CAAgB,CAAC;IAC5F,MAAM,gBAAgB,CAAhB,eAAA,GAAkB,IAAI,eAAA,CAAgB,cAAC,CAAc,CAAC;IAC5D,sCAAsC,CAAC,OAAC,CAAO,eAAC,CAAe,CAAC;IAChE,MAAM,gBAAgB,CAAhB,OAAA,GAAU,IAAI,OAAA,EAAQ,CAAE;IAC9B,MAAM,gBAAgB,CAAhB,UAAA,GAAa,IAAI,cAAA,CACnB,IAAI,UAAA,EAAW,EAAG,YAAA,EAAc,OAAA,CAAQ,UAAC,EAAW,0BAAA,CAA2B,OAAC,EAChF,OAAO,CAAC,CAAC;IACb,MAAM,gBAAgB,CAAhB,MAAA,GAAS,IAAI,cAAA,CAAe;QAChC,YAAY,EAAE,OAAA,CAAQ,KAAC,KAAS,IAAA;QAChC,oBAAoB,EAAE,iBAAA,CAAkB,QAAC;QACzC,gBAAgB,EAAE,KAAA;QAClB,MAAM,EAAE,KAAA;KACT,CAAC,CAAC;IACH,MAAM,gBAAgB,CAAhB,UAAA,GAAa,IAAI,mBAAA,CACnB,EAAC,GAAC,EAAI,CAAA,GAAM,KAAW,YAAA,CAAa,YAAC,CAAY,GAAC,CAAG,EAAC,EAAE,WAAA,EAAa,UAAA,EAAY,MAAA,CAAO,CAAC;IAC7F,MAAM,gBAAgB,CAAhB,gBAAA,GAAmB,IAAI,MAAA,CAAO,IAAI,KAAA,EAAM,CAAE,CAAC;IACjD,MAAM,gBAAgB,CAAhB,qBAAA,GAAwB,IAAI,wBAAA,EAAyB,CAAE;IAC7D,MAAM,gBAAgB,CAAhB,UAAA,GACF,IAAI,cAAA,CAAe,gBAAC,EAAiB,qBAAA,EAAuB,UAAA,EAAY,OAAA,EAAS,EAAA,CAAG,CAAC;IACzF,MAAM,gBAAgB,CAAhB,QAAA,GAAW,IAAI,uBAAA,CACjB,IAAI,gBAAA,CAAiB,eAAC,CAAe,EAAE,IAAI,iBAAA,CAAkB,eAAC,CAAe,EAC7E,IAAI,YAAA,CAAa,eAAC,CAAe,EAAE,eAAA,EAAiB,qBAAA,EAAuB,UAAA,EAC3E,WAAW,EAAE,eAAA,CAAgB,CAAC;IAClC,kDAAkD;IAClD,MAAM,gBAAgB,CAAhB,cAAA,GAAiB;QACrB,WAAW,EAAE,CAAA,MAAS,KAAiB,cAAA,CAAe,WAAC,CAAW,MAAC,CAAM;QACzE,oBAAoB,EAAE,CAAA,QAAW,EAAQ,kBAAoB,KACnC,YAAY,CAAC,oBAAC,CAAoB,QAAC,EAAS,kBAAA,CAAmB;QACzF,YAAY,EAAE,CAAA,MAAS,KAAiB,cAAA,CAAe,YAAC,CAAY,MAAC,CAAM;KAC5E,CAAC;IACF,MAAM,gBAAgB,CAAhB,QAAA,GAAW,IAAI,WAAA,CACjB,YAAY,EAAE,QAAA,EAAU,UAAA,EAAY,IAAI,aAAA,CAAc,WAAC,CAAW,EAClE,IAAI,YAAA,CAAa,MAAC,EAAO,qBAAA,CAAsB,EAC/C,IAAI,wBAAA,CAAyB,MAAC,EAAO,gBAAA,EAAkB,qBAAA,EAAuB,OAAA,CAAQ,EACtF,IAAI,gBAAA,EAAiB,EAAG,IAAI,iBAAA,CAAkB,cAAC,CAAc,EAAE,eAAA,EAC/D,OAAO,CAAC,MAAC,EAAO,OAAA,CAAQ,UAAC,EAAW,IAAI,eAAA,CAAgB,qBAAC,CAAqB,EAC9E,cAAc,CAAC,CAAC;IACpB,MAAM,CAAC,EAAA,QAAE,EAAS,SAAA,EAAW,eAAA,EAAgB,CAAC;AAChD,CAAC","file":"compiler_factory.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MissingTranslationStrategy, ViewEncapsulation} from '@angular/core/index';\n\nimport {AnimationParser} from '../animation/animation_parser';\nimport {CompilerConfig} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {DirectiveWrapperCompiler} from '../directive_wrapper_compiler';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {TypeScriptEmitter} from '../output/ts_emitter';\nimport {PipeResolver} from '../pipe_resolver';\nimport {Console} from '../private_import_core';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {createOfflineCompileUrlResolver} from '../url_resolver';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {AotCompiler} from './compiler';\nimport {AotCompilerHost} from './compiler_host';\nimport {AotCompilerOptions} from './compiler_options';\nimport {StaticAndDynamicReflectionCapabilities} from './static_reflection_capabilities';\nimport {StaticReflector} from './static_reflector';\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {StaticSymbolResolver} from './static_symbol_resolver';\nimport {AotSummaryResolver} from './summary_resolver';\n/**\n * Creates a new AotCompiler based on options and a host.\n * @param {?} compilerHost\n * @param {?} options\n * @return {?}\n */\nexport function createAotCompiler(compilerHost: AotCompilerHost, options: AotCompilerOptions):\n    {compiler: AotCompiler, reflector: StaticReflector} {\n  let /** @type {?} */ translations: string = options.translations || '';\n\n  const /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();\n  const /** @type {?} */ symbolCache = new StaticSymbolCache();\n  const /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const /** @type {?} */ staticReflector = new StaticReflector(symbolResolver);\n  StaticAndDynamicReflectionCapabilities.install(staticReflector);\n  const /** @type {?} */ console = new Console();\n  const /** @type {?} */ htmlParser = new I18NHtmlParser(\n      new HtmlParser(), translations, options.i18nFormat, MissingTranslationStrategy.Warning,\n      console);\n  const /** @type {?} */ config = new CompilerConfig({\n    genDebugInfo: options.debug === true,\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    logBindingUpdate: false,\n    useJit: false\n  });\n  const /** @type {?} */ normalizer = new DirectiveNormalizer(\n      {get: (url: string) => compilerHost.loadResource(url)}, urlResolver, htmlParser, config);\n  const /** @type {?} */ expressionParser = new Parser(new Lexer());\n  const /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n  const /** @type {?} */ tmplParser =\n      new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const /** @type {?} */ resolver = new CompileMetadataResolver(\n      new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector),\n      new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer,\n      symbolCache, staticReflector);\n  // TODO(vicb): do not pass options.i18nFormat here\n  const /** @type {?} */ importResolver = {\n    getImportAs: (symbol: StaticSymbol) => symbolResolver.getImportAs(symbol),\n    fileNameToModuleName: (fileName: string, containingFilePath: string) =>\n                              compilerHost.fileNameToModuleName(fileName, containingFilePath),\n    getTypeArity: (symbol: StaticSymbol) => symbolResolver.getTypeArity(symbol)\n  };\n  const /** @type {?} */ compiler = new AotCompiler(\n      compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver),\n      new ViewCompiler(config, elementSchemaRegistry),\n      new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console),\n      new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver,\n      options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry),\n      symbolResolver);\n  return {compiler, reflector: staticReflector};\n}\n"]}
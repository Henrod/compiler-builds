{"version":3,"sources":["../../../../../modules/@angular/compiler/src/template_parser/template_ast.ts"],"names":[],"mappings":"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","file":"template_ast.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core/index';\n\nimport {CompileDirectiveSummary, CompileProviderMetadata, CompileTokenMetadata} from '../compile_metadata';\nimport {AST} from '../expression_parser/ast';\nimport {ParseSourceSpan} from '../parse_util';\nimport {LifecycleHooks} from '../private_import_core';\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n/**\n * @param {?} value\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(\npublic value: string,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nfunction TextAst_tsickle_Closure_declarations() {\n/** @type {?} */\nTextAst.prototype.value;\n/** @type {?} */\nTextAst.prototype.ngContentIndex;\n/** @type {?} */\nTextAst.prototype.sourceSpan;\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n/**\n * @param {?} value\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(\npublic value: AST,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n}\n\nfunction BoundTextAst_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundTextAst.prototype.value;\n/** @type {?} */\nBoundTextAst.prototype.ngContentIndex;\n/** @type {?} */\nBoundTextAst.prototype.sourceSpan;\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nfunction AttrAst_tsickle_Closure_declarations() {\n/** @type {?} */\nAttrAst.prototype.name;\n/** @type {?} */\nAttrAst.prototype.value;\n/** @type {?} */\nAttrAst.prototype.sourceSpan;\n}\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} securityContext\n * @param {?} needsRuntimeSecurityContext\n * @param {?} value\n * @param {?} unit\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic type: PropertyBindingType,\npublic securityContext: SecurityContext,\npublic needsRuntimeSecurityContext: boolean,\npublic value: AST,\npublic unit: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n/**\n * @return {?}\n */\nget isAnimation(): boolean { return this.type === PropertyBindingType.Animation; }\n}\n\nfunction BoundElementPropertyAst_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundElementPropertyAst.prototype.name;\n/** @type {?} */\nBoundElementPropertyAst.prototype.type;\n/** @type {?} */\nBoundElementPropertyAst.prototype.securityContext;\n/** @type {?} */\nBoundElementPropertyAst.prototype.needsRuntimeSecurityContext;\n/** @type {?} */\nBoundElementPropertyAst.prototype.value;\n/** @type {?} */\nBoundElementPropertyAst.prototype.unit;\n/** @type {?} */\nBoundElementPropertyAst.prototype.sourceSpan;\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} target\n * @param {?} phase\n * @return {?}\n */\nstatic calcFullName(name: string, target: string, phase: string): string {\n    if (target) {\n      return `${target}:${name}`;\n    } else if (phase) {\n      return `@${name}.${phase}`;\n    } else {\n      return name;\n    }\n  }\n/**\n * @param {?} name\n * @param {?} target\n * @param {?} phase\n * @param {?} handler\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic target: string,\npublic phase: string,\npublic handler: AST,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n/**\n * @return {?}\n */\nget fullName() { return BoundEventAst.calcFullName(this.name, this.target, this.phase); }\n/**\n * @return {?}\n */\nget isAnimation(): boolean { return !!this.phase; }\n}\n\nfunction BoundEventAst_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundEventAst.prototype.name;\n/** @type {?} */\nBoundEventAst.prototype.target;\n/** @type {?} */\nBoundEventAst.prototype.phase;\n/** @type {?} */\nBoundEventAst.prototype.handler;\n/** @type {?} */\nBoundEventAst.prototype.sourceSpan;\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic value: CompileTokenMetadata,\npublic sourceSpan: ParseSourceSpan) {\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n}\n\nfunction ReferenceAst_tsickle_Closure_declarations() {\n/** @type {?} */\nReferenceAst.prototype.name;\n/** @type {?} */\nReferenceAst.prototype.value;\n/** @type {?} */\nReferenceAst.prototype.sourceSpan;\n}\n\n/**\n * A variable declaration on a <template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n}\n\nfunction VariableAst_tsickle_Closure_declarations() {\n/** @type {?} */\nVariableAst.prototype.name;\n/** @type {?} */\nVariableAst.prototype.value;\n/** @type {?} */\nVariableAst.prototype.sourceSpan;\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} attrs\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} references\n * @param {?} directives\n * @param {?} providers\n * @param {?} hasViewContainer\n * @param {?} queryMatches\n * @param {?} children\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n * @param {?} endSourceSpan\n */\nconstructor(\npublic name: string,\npublic attrs: AttrAst[],\npublic inputs: BoundElementPropertyAst[],\npublic outputs: BoundEventAst[],\npublic references: ReferenceAst[],\npublic directives: DirectiveAst[],\npublic providers: ProviderAst[],\npublic hasViewContainer: boolean,\npublic queryMatches: QueryMatch[],\npublic children: TemplateAst[],\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan,\npublic endSourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\nfunction ElementAst_tsickle_Closure_declarations() {\n/** @type {?} */\nElementAst.prototype.name;\n/** @type {?} */\nElementAst.prototype.attrs;\n/** @type {?} */\nElementAst.prototype.inputs;\n/** @type {?} */\nElementAst.prototype.outputs;\n/** @type {?} */\nElementAst.prototype.references;\n/** @type {?} */\nElementAst.prototype.directives;\n/** @type {?} */\nElementAst.prototype.providers;\n/** @type {?} */\nElementAst.prototype.hasViewContainer;\n/** @type {?} */\nElementAst.prototype.queryMatches;\n/** @type {?} */\nElementAst.prototype.children;\n/** @type {?} */\nElementAst.prototype.ngContentIndex;\n/** @type {?} */\nElementAst.prototype.sourceSpan;\n/** @type {?} */\nElementAst.prototype.endSourceSpan;\n}\n\n/**\n * A `<template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n/**\n * @param {?} attrs\n * @param {?} outputs\n * @param {?} references\n * @param {?} variables\n * @param {?} directives\n * @param {?} providers\n * @param {?} hasViewContainer\n * @param {?} queryMatches\n * @param {?} children\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(\npublic attrs: AttrAst[],\npublic outputs: BoundEventAst[],\npublic references: ReferenceAst[],\npublic variables: VariableAst[],\npublic directives: DirectiveAst[],\npublic providers: ProviderAst[],\npublic hasViewContainer: boolean,\npublic queryMatches: QueryMatch[],\npublic children: TemplateAst[],\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n}\n\nfunction EmbeddedTemplateAst_tsickle_Closure_declarations() {\n/** @type {?} */\nEmbeddedTemplateAst.prototype.attrs;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.outputs;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.references;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.variables;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.directives;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.providers;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.hasViewContainer;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.queryMatches;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.children;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.ngContentIndex;\n/** @type {?} */\nEmbeddedTemplateAst.prototype.sourceSpan;\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n/**\n * @param {?} directiveName\n * @param {?} templateName\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(\npublic directiveName: string,\npublic templateName: string,\npublic value: AST,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n}\n\nfunction BoundDirectivePropertyAst_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundDirectivePropertyAst.prototype.directiveName;\n/** @type {?} */\nBoundDirectivePropertyAst.prototype.templateName;\n/** @type {?} */\nBoundDirectivePropertyAst.prototype.value;\n/** @type {?} */\nBoundDirectivePropertyAst.prototype.sourceSpan;\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n/**\n * @param {?} directive\n * @param {?} inputs\n * @param {?} hostProperties\n * @param {?} hostEvents\n * @param {?} contentQueryStartId\n * @param {?} sourceSpan\n */\nconstructor(\npublic directive: CompileDirectiveSummary,\npublic inputs: BoundDirectivePropertyAst[],\npublic hostProperties: BoundElementPropertyAst[],\npublic hostEvents: BoundEventAst[],\npublic contentQueryStartId: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n}\n\nfunction DirectiveAst_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectiveAst.prototype.directive;\n/** @type {?} */\nDirectiveAst.prototype.inputs;\n/** @type {?} */\nDirectiveAst.prototype.hostProperties;\n/** @type {?} */\nDirectiveAst.prototype.hostEvents;\n/** @type {?} */\nDirectiveAst.prototype.contentQueryStartId;\n/** @type {?} */\nDirectiveAst.prototype.sourceSpan;\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n/**\n * @param {?} token\n * @param {?} multiProvider\n * @param {?} eager\n * @param {?} providers\n * @param {?} providerType\n * @param {?} lifecycleHooks\n * @param {?} sourceSpan\n */\nconstructor(\npublic token: CompileTokenMetadata,\npublic multiProvider: boolean,\npublic eager: boolean,\npublic providers: CompileProviderMetadata[],\npublic providerType: ProviderAstType,\npublic lifecycleHooks: LifecycleHooks[],\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n}\n\nfunction ProviderAst_tsickle_Closure_declarations() {\n/** @type {?} */\nProviderAst.prototype.token;\n/** @type {?} */\nProviderAst.prototype.multiProvider;\n/** @type {?} */\nProviderAst.prototype.eager;\n/** @type {?} */\nProviderAst.prototype.providers;\n/** @type {?} */\nProviderAst.prototype.providerType;\n/** @type {?} */\nProviderAst.prototype.lifecycleHooks;\n/** @type {?} */\nProviderAst.prototype.sourceSpan;\n}\n\nexport type ProviderAstType = number;\nexport let ProviderAstType: any = {};\nProviderAstType.PublicService = 0;\nProviderAstType.PrivateService = 1;\nProviderAstType.Component = 2;\nProviderAstType.Directive = 3;\nProviderAstType.Builtin = 4;\nProviderAstType[ProviderAstType.PublicService] = \"PublicService\";\nProviderAstType[ProviderAstType.PrivateService] = \"PrivateService\";\nProviderAstType[ProviderAstType.Component] = \"Component\";\nProviderAstType[ProviderAstType.Directive] = \"Directive\";\nProviderAstType[ProviderAstType.Builtin] = \"Builtin\";\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n/**\n * @param {?} index\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(\npublic index: number,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n}\n\nfunction NgContentAst_tsickle_Closure_declarations() {\n/** @type {?} */\nNgContentAst.prototype.index;\n/** @type {?} */\nNgContentAst.prototype.ngContentIndex;\n/** @type {?} */\nNgContentAst.prototype.sourceSpan;\n}\n\nexport type PropertyBindingType = number;\nexport let PropertyBindingType: any = {};\nPropertyBindingType.Property = 0;\nPropertyBindingType.Attribute = 1;\nPropertyBindingType.Class = 2;\nPropertyBindingType.Style = 3;\nPropertyBindingType.Animation = 4;\nPropertyBindingType[PropertyBindingType.Property] = \"Property\";\nPropertyBindingType[PropertyBindingType.Attribute] = \"Attribute\";\nPropertyBindingType[PropertyBindingType.Class] = \"Class\";\nPropertyBindingType[PropertyBindingType.Style] = \"Style\";\nPropertyBindingType[PropertyBindingType.Animation] = \"Animation\";\n\n\nexport interface QueryMatch {\n  queryId: number;\n  value: CompileTokenMetadata;\n}\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  // Returning a truthy value from `visit()` will prevent `templateVisitAll()` from the call to\n  // the typed method and result returned will become the result included in `visitAll()`s\n  // result array.\n  visit?(ast: TemplateAst, context: any): any;\n\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n/**\n * Visit every node in a list of {\\@link TemplateAst}s with the given {\\@link TemplateAstVisitor}.\n * @param {?} visitor\n * @param {?} asts\n * @param {?=} context\n * @return {?}\n */\nexport function templateVisitAll(\n    visitor: TemplateAstVisitor, asts: TemplateAst[], context: any = null): any[] {\n  const /** @type {?} */ result: any[] = [];\n  const /** @type {?} */ visit = visitor.visit ?\n      (ast: TemplateAst) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n      (ast: TemplateAst) => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const /** @type {?} */ astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/compiler/src/template_parser/template_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;AAEH,OAAO,EAAA,MAAE,EAAO,cAAA,EAAgB,QAAA,EAAyB,MAAA,qBAAA,CAAA;AAEzD,OAAO,EAA2I,cAAA,EAAe,MAAA,qBAAA,CAAA;AACjK,OAAO,EAAM,aAAA,EAAe,SAAA,EAAU,MAAA,0BAAA,CAAA;AACtC,OAAO,EAAA,MAAE,EAAM,MAAA,6BAAA,CAAA;AACf,OAAO,EAAA,SAAE,EAAS,MAAA,gBAAA,CAAA;AAClB,OAAO,EAAA,cAAE,EAAc,MAAA,0BAAA,CAAA;AACvB,OAAO,EAAA,WAAE,EAAY,qBAAA,EAAuB,eAAA,EAAgB,MAAA,gBAAA,CAAA;AAC5D,OAAO,EAAA,kBAAE,EAAkB,MAAA,eAAA,CAAA;AAC3B,OAAO,KAAK,IAAA,MAAA,kBAAA,CAAA;AACZ,OAAO,EAAA,eAAE,EAAe,MAAA,0BAAA,CAAA;AACxB,OAAO,EAAA,WAAE,EAAW,MAAA,+BAAA,CAAA;AACpB,OAAO,EAAA,mBAAE,EAAmB,MAAA,mCAAA,CAAA;AAC5B,OAAO,EAAA,WAAE,EAAW,MAAA,mBAAA,CAAA;AACpB,OAAO,EAAA,UAAE,EAAW,eAAA,EAAiB,eAAA,EAAgB,MAAA,eAAA,CAAA;AACrD,OAAO,EAAA,OAAE,EAAO,MAAA,wBAAA,CAAA;AAChB,OAAO,EAAA,sBAAE,EAAuB,mBAAA,EAAoB,MAAA,sBAAA,CAAA;AACpD,OAAO,EAAA,qBAAE,EAAqB,MAAA,mCAAA,CAAA;AAC9B,OAAO,EAAA,WAAE,EAAY,eAAA,EAAgB,MAAA,aAAA,CAAA;AACrC,OAAO,EAAA,oBAAE,EAAoB,MAAA,uBAAA,CAAA;AAC7B,OAAO,EAAA,WAAE,EAAW,MAAA,SAAA,CAAA;AAEpB,OAAO,EAAA,aAAE,EAA4B,MAAA,kBAAA,CAAA;AACrC,OAAO,EAAA,OAAE,EAAQ,yBAAA,EAAmE,YAAA,EAAc,YAAA,EAAc,UAAA,EAAY,mBAAA,EAAqB,YAAA,EAAc,mBAAA,EAAqB,YAAA,EAA+C,OAAA,EAAS,WAAA,EAAa,gBAAA,EAAiB,MAAA,gBAAA,CAAA;AAC1Q,OAAO,EAAA,oBAAE,EAAqB,eAAA,EAAgB,MAAA,sBAAA,CAAA;AAG9C,oBAAoB;AACpB,mBAAmB;AACnB,qBAAqB;AACrB,kBAAkB;AAClB,sBAAsB;AACtB,gBAAgB;AAChB,oFAAoF;AACpF,mCAAmC;AACnC,iCAAiC;AACjC,kCAAkC;AAClC,MAAM,gBAAA,CAAA,gBAAA,GACF,0GAA0G,CAAC;AAE/G,MAAM,gBAAgB,CAAhB,WAAA,GAAc,CAAA,CAAE;AACtB,MAAM,gBAAgB,CAAhB,UAAA,GAAa,CAAA,CAAE;AACrB,MAAM,gBAAgB,CAAhB,UAAA,GAAa,CAAA,CAAE;AACrB,MAAM,gBAAe,CAAf,SAAA,GAAY,CAAA,CAAE;AACpB,MAAM,gBAAgB,CAAhB,aAAA,GAAgB,CAAA,CAAE;AACxB,MAAM,gBAAe,CAAf,SAAA,GAAY,CAAA,CAAE;AACpB,MAAM,gBAAe,CAAf,YAAA,GAAe,CAAA,CAAE;AACvB,MAAM,gBAAA,CAAA,oBAAA,GAAuB,CAAA,CAAE;AAC/B,MAAM,gBAAA,CAAA,kBAAA,GAAqB,CAAA,CAAE;AAC7B,MAAM,gBAAgB,CAAhB,eAAA,GAAkB,EAAA,CAAG;AAE3B,MAAM,gBAAA,CAAA,gBAAA,GAAmB,UAAA,CAAW;AACpC,MAAM,gBAAgB,CAAhB,aAAA,GAAgB,UAAA,CAAW;AACjC,MAAM,gBAAA,CAAA,oBAAA,GAAuB,GAAA,CAAI;AACjC,MAAM,gBAAa,CAAb,UAAA,GAAa,OAAA,CAAQ;AAE3B,MAAM,gBAAA,CAAA,iBAAA,GAAoB,WAAA,CAAY,KAAC,CAAK,GAAC,CAAG,CAAC,CAAC,CAAC,CAAC;AAEpD;;;;;;GAMG;AACH,MAAM,CAAC,MAAA,gBAAA,CAAM,mBAAA,GAAsB,IAAI,cAAA,CAAe,oBAAC,CAAoB,CAAC;AAC5E,MACC,yBAAA,SAAA,UAAA;IAAD;;;;OAIG;IACH,YAJG,OAAoB,EAAQ,IAAM,EAAiB,KAAO;QAKzD,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF;AACD,MAHC;IAID;;;;OAIG;IACH,YAPa,WAA0B,EAAU,SAA+B,EACnE,MAAoB;QADpB,gBAAA,GAAA,WAAA,CAA0B;QAAU,cAAA,GAAA,SAAA,CAA+B;QACnE,WAAA,GAAA,MAAA,CAAoB;IAAE,CAAA;CAUlC;AAED;IACA,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;IAC1C,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;IACxC,gBAAgB;IAChB,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC;AACrC,CAAC;AAGD,IAAa,cAAc,GAA3B;IACA;;;;;;OAMG;IACH,YAxBc,WAAa,EAAgB,eAAiB,EAC9C,WAAa,EAAwB,QAAU,EAC9C,UAA+B;QAFhC,gBAAA,GAAA,WAAA,CAAa;QAAgB,oBAAA,GAAA,eAAA,CAAiB;QAC9C,gBAAA,GAAA,WAAA,CAAa;QAAwB,aAAA,GAAA,QAAA,CAAU;QAC9C,eAAA,GAAA,UAAA,CAA+B;IAAE,CAAA;IA4BhD;;;;;;;;OAQG;IACH,KAnCG,CAoCG,SAAmC,EAAE,QAAgB,EAAE,UAAqC,EAC5F,KAA2B,EAAE,OAAyB,EACtD,WAAmB;QACrB,MAAM,gBAAgB,CAnChB,MAAA,GAAS,IAAA,CAAK,QAAC,CAAQ,SAAC,EAAU,QAAA,EAAU,UAAA,EAAY,KAAA,EAAO,OAAA,EAAS,WAAA,CAAY,CAAC;QAoC3F,MAAM,gBAAgB,CAnChB,QAAA,GAAW,MAAA,CAAO,MAAC,CAAM,MAAC,CAAM,KAAC,IAAQ,KAAA,CAAM,KAAC,KAAS,eAAA,CAAgB,OAAC,CAAO,CAAC;QAoCxF,MAAM,gBAAgB,CAnChB,MAAA,GAAS,MAAA,CAAO,MAAC,CAAM,MAAC,CAAM,KAAC,IAAQ,KAAA,CAAM,KAAC,KAAS,eAAA,CAAgB,KAAC,CAAK,CAAC;QAqCpF,EAAE,CAAC,CAAC,QAnCC,CAAQ,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAoCvB,IAAI,CAnCC,QAAC,CAAQ,IAAC,CAAI,6BAAC,QAA6B,CAAQ,IAAC,CAAI,IAAC,CAAI,EAAC,CAAE,CAAC;QAoCzE,CAAC;QAED,EAAE,CAAC,CAAC,MAnCC,CAAM,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAoCrB,MAAM,gBAAgB,CAnChB,WAAA,GAAc,MAAA,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC;YAoCtC,MAnCM,WAAA,CAAY,2BAAC,WAA2B,EAAW,CAAE,CAAC;QAoC9D,CAAC;QAED,MAAM,CAnCC,EAAA,QAAE,EAAS,MAAA,CAAO,WAAC,EAAY,KAAA,EAAO,MAAA,CAAO,SAAC,EAAS,CAAC;IAoCjE,CAAC;IACH;;;;;;;;OAQG;IACH,QA3CG,CA4CG,SAAmC,EAAE,QAAgB,EAAE,UAAqC,EAC5F,KAA2B,EAAE,OAAyB,EACtD,WAAmB;QACrB,MAAM,CA3CC,IAAA,CAAK,YAAC,CA4CT,IAAI,CA3CC,UAAC,CAAU,IAAC,CAAI,WAAC,CAAW,KAAC,CA4C9B,QAAQ,EA3CE,WAAA,EAAa,IAAA,EAAM,IAAA,CAAK,sBAAC,CAAsB,SAAC,CAAS,CAAC,CAAC,EA4CzE,SAAS,EA3CE,QAAA,EAAU,UAAA,EAAY,KAAA,EAAO,OAAA,EAAS,WAAA,CAAY,CAAC;IA4CpE,CAAC;IACH;;;;;;;;;OASG;IACH,YApDG,CAqDG,iBAAkC,EAAE,SAAmC,EAAE,QAAgB,EACzF,UAAqC,EAAE,KAA2B,EAAE,OAAyB,EAC7F,WAAmB;QACrB,IAAI,gBAAgB,CApDhB,MAAoB,CAAE;QAqD1B,MAAM,gBAAgB,CApDhB,MAAA,GAAS,iBAAA,CAAkB,MAAC,CAAM;QAqDxC,MAAM,gBAAgB,CApDhB,SAAA,GAAkC,EAAA,CAAG;QAqD3C,EAAE,CAAC,CAAC,iBApDC,CAAiB,SAAC,CAAS,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAqD1C,MAAM,gBAAgB,CApDhB,cAAA,GAAiB,uBAAA,CAAwB,UAAC,CAAU,CAAC;YAqD3D,MAAM,gBAAgB,CApDhB,SAAA,GAAY,uBAAA,CAAwB,KAAC,CAAK,CAAC;YAqDjD,MAAM,gBAAgB,CApDhB,mBAAA,GAqDF,IApDI,mBAAA,CAAoB,SAAC,EAAU,iBAAA,CAAkB,SAAC,CAAS,CAAC,CAAC,CAAC,UAAC,CAAU,CAAC;YAqDlF,IAAI,gBAAgB,CApDhB,mBAAqB,CAAoB;YAqD7C,EAAE,CAAC,CAAC,SApDC,CAAS,QAAC,IAAW,SAAA,CAAU,QAAC,CAAQ,aAAC,CAAa,CAAC,CAAA;gBAqD1D,mBAAmB,GApDG;oBAqDpB,KAAK,EApDE,SAAA,CAAU,QAAC,CAAQ,aAAC,CAAa,CAAC,CAAC;oBAqD1C,GAAG,EApDE,SAAA,CAAU,QAAC,CAAQ,aAAC,CAAa,CAAC,CAAC;iBAqDzC,CApDC;YAqDJ,CAAC;YACD,MAAM,gBAAgB,CApDhB,aAAA,GAAgB,IAAI,aAAA,CAqDtB,IAAI,CApDC,WAAC,EAAY,mBAAA,EAAqB,IAAA,CAAK,eAAC,EAAgB,SAAA,EAAW,MAAA,CAAO,CAAC;YAqDpF,MAAM,gBAAgB,CApDhB,YAAA,GAAe,IAAI,oBAAA,CAqDrB,mBAAmB,EApDE,cAAA,EAAgB,aAAA,EAAe,IAAA,CAAK,eAAC,EAAgB,OAAA,EAqD1E,MAAM,CApDC,CAAC;YAqDZ,MAAM,GApDG,IAAA,CAAK,QAAC,CAAQ,YAAC,EAAa,iBAAA,CAAkB,SAAC,EAAU,qBAAA,CAAsB,CAAC;YAqDzF,MAAM,CApDC,IAAC,CAAI,GAAC,mBAAG,CAAmB,MAAC,CAAM,CAAC;YAqD3C,SAAS,CApDC,IAAC,CAAI,GAAC,aAAG,CAAa,YAAC,EAAY,CAAE,CAAC;QAqDlD,CAAC;QApDC,IAAA,CAAK,CAAA;YAqDL,MAAM,GApDG,EAAA,CAAG;QAqDd,CAAC;QACD,IAAI,CApDC,uCAAC,CAAuC,MAAC,EAAO,MAAA,CAAO,CAAC;QAsD7D,EAAE,CAAC,CAAC,MApDC,CAAM,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAqDrB,MAAM,CApDC,IAAI,mBAAA,CAAoB,MAAC,EAAO,SAAA,EAAW,MAAA,CAAO,CAAC;QAqD5D,CAAC;QAED,EAAE,CAAC,CAAC,IApDC,CAAI,UAAC,CAAU,CAAC,CAAA;YAqDnB,IAAI,CApDC,UAAC,CAAU,OAAC,CAqDb,CAAC,SApDW,OAAyB,MAAA,GAAS,gBAAA,CAAiB,SAAC,EAAU,MAAA,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;QAqD5F,CAAC;QAED,MAAM,CApDC,IAAI,mBAAA,CAAoB,MAAC,EAAO,SAAA,EAAW,MAAA,CAAO,CAAC;IAqD5D,CAAC;IACH;;;;OAIG;IACH,UAxDG,CAAA,iBAAA,EAAA,SAAA,KAAA;QAyDC,MAAM,gBAAgB,CAxDhB,MAAA,GAAuB,iBAAA,CAAkB,MAAC,CAAM;QA0DtD,EAAE,CAAC,CAAC,MAxDC,CAAM,MAAC,IAAS,CAAA,IAAK,MAAA,CAAO,CAAC,CAAA;YAyDhC,+CAA+C;YAC/C,MAAM,gBAAgB,CAxDhB,eAAA,GAAkB,WAAA,CAAY,iBAAC,CAAiB,SAAC,CAAS,CAAC;YAyDjE,MAAM,CAxDC,IAAC,CAAI,GAAC,eAAG,CAAe,MAAC,CAAM,CAAC;YAyDvC,iBAAiB,GAxDG,IAAI,eAAA,CAAgB,eAAC,CAAe,KAAC,EAAM,MAAA,CAAO,CAAC;QAyDzE,CAAC;QACD,MAAM,CAxDC,iBAAA,CAAkB;IAyD3B,CAAC;IACH;;;OAGG;IACH,sBA3DG,CAAA,SAAA;QA4DC,EAAE,CAAC,CAAC,SA3DC,CAAS,QAAC,CAAQ,CAAC,CAAA;YA4DtB,MAAM,CA3DC,mBAAA,CAAoB,SAAC,CAAS,SAAC,CAAS,QAAC,CAAQ,aAAC,CAAa,CAAC;QA4DzE,CAAC;IACH,CAAC;IACH;;;;;OAKG;IACH,uCA/DG,CAAA,MAAA,EAAA,MAAA;QAiEC,MAAM,gBAAgB,CA/DhB,kBAAA,GAA+B,EAAA,CAAG;QAiExC,MAAM,CA/DC,MAAC,CAAM,OAAC,IAAU,CAAA,CAAE,CAAC,CAAK,OAAC,CAAA,CAAO,CAAC,UAAC,CAAU;aAgEhD,OA/DC,CAAO,OAAC,IAAU,CAAA,CAAM,OAAC,CAAA,CAAO,CAAC,UAAC,CAAU,OAAC,CAAO,CAAC,SAAW;YAgEhE,MAAM,gBAAgB,CA/DhB,IAAA,GAAO,SAAA,CAAU,IAAC,CAAI;YAgE5B,EAAE,CAAC,CAAC,kBA/DC,CAAkB,OAAC,CAAO,IAAC,CAAI,GAAG,CAAA,CAAE,CAAC,CAAA;gBAgExC,kBAAkB,CA/DC,IAAC,CAAI,IAAC,CAAI,CAAC;YAgEhC,CAAC;YA/DC,IAAA,CAAK,CAAA;gBAgEL,MAAM,gBAAgB,CA/DhB,KAAA,GAAQ,IAAI,kBAAA,CAgEd,eAAe,IA/DC,4BAAI,EAA6B,SAAA,CAAU,UAAC,EAgE5D,eAAe,CA/DC,KAAC,CAAK,CAAC;gBAgE3B,MAAM,CA/DC,IAAC,CAAI,KAAC,CAAK,CAAC;YAgErB,CAAC;QACH,CAAC,CA/DC,CAAC,CAAC;IAgEV,CAAC;CASF,CAAA;AARD,kBAAkB;AA9DX,6BAAA,GAAiF,MAAM;IAgE9F,EAAC,IA/DC,EAAK,MAAA,GAAO;IAgEd,EAAC,IA/DC,EAAK,qBAAA,GAAsB;IAgE7B,EAAC,IA/DC,EAAK,cAAA,GAAe;IAgEtB,EAAC,IA/DC,EAAK,OAAA,GAAQ;IAgEf,EAAC,IA/DC,EAAK,KAAA,EAAO,UAAA,EAAY,CAAA,EAAG,IAAA,EAAM,QAAA,EAAS,EAAG,EAAE,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM,CAAA,mBAAE,EAAmB,EAAG,EAAE,EAAG;CAgEjG,CA/DC;AAzGW,cAAc;IAnB1B,kBAAA,EAAA;qCAG0B,MAAA;QAAiC,qBAAA;QACjC,cAAA,sBAAkC,OAAA,oBAAA,OAAA;GAehD,cAAc,CAyK1B;SAzKY,cAAc;AA2K3B;IACA;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;IACzC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC;IACrC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC;AACpC,CAAC;AAED;IAKA;;;;;;;OAOG;IACH,YAvFa,mBAAqB,EAAqB,UAAoC,EAC7E,cAAgB,EAAuB,eAAiB,EACxD,QAAyB,EAAW,aAAkC;QAFvE,wBAAA,GAAA,mBAAA,CAAqB;QACpB,mBAAA,GAAA,cAAA,CAAgB;QAAuB,oBAAA,GAAA,eAAA,CAAiB;QACxD,aAAA,GAAA,QAAA,CAAyB;QAAW,kBAAA,GAAA,aAAA,CAAkC;QAyElF,oBAAe,GAjFG,IAAI,eAAA,EAAgB,CAAE;QAkFxC,oBAAe,GAjFG,IAAI,GAAA,EAAoC,CAAG;QAkF7D,mBAAc,GAjFG,CAAA,CAAE;QAiGjB,4EAA4E;QAC5E,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAChF,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK;YAClC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACzD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IACH;;;;OAIG;IACH,cA9FG,CAAA,SAAA,EAAA,OAAA,IAA8D,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA+F9E;;;;OAIG;IACH,kBAlGG,CAAA,aAAA,EAAA,OAAA,IAA0E,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IAmG1F;;;;OAIG;IACH,SAtGG,CAAA,IAAA,EAAA,MAAA;QAuGC,MAAM,gBAAgB,CAtGhB,cAAA,GAAiB,MAAA,CAAO,kBAAC,CAAkB,iBAAC,CAAiB,CAAC;QAuGpE,MAAM,gBAAgB,CAtGhB,IAAA,GAAO,IAAA,CAAK,cAAC,CAAc,kBAAC,CAAkB,IAAC,CAAI,KAAC,EAAM,IAAA,CAAK,UAAC,CAAU,CAAC;QAuGjF,EAAE,CAAC,CAAC,IAtGC,CAAI,CAAC,CAAA;YAuGR,MAAM,CAtGC,IAAI,YAAA,CAAa,IAAC,EAAK,cAAA,EAAgB,IAAA,CAAK,UAAC,CAAU,CAAC;QAuGjE,CAAC;QAtGC,IAAA,CAAK,CAAA;YAuGL,MAAM,CAtGC,IAAI,OAAA,CAAQ,IAAC,CAAI,KAAC,EAAM,cAAA,EAAgB,IAAA,CAAK,UAAC,CAAU,CAAC;QAuGlE,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,cA1GG,CAAA,SAAA,EAAA,OAAA;QA2GC,MAAM,CA1GC,IAAI,OAAA,CAAQ,SAAC,CAAS,IAAC,EAAK,SAAA,CAAU,KAAC,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;IA2G5E,CAAC;IACH;;;;OAIG;IACH,YA9GG,CAAA,OAAA,EAAA,OAAA,IAAwD,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA+GxE;;;;OAIG;IACH,YAlHG,CAAA,OAAA,EAAA,MAAA;QAmHC,MAAM,gBAAgB,CAlHhB,eAAA,GAAkB,IAAA,CAAK,mBAAC,CAAmB;QAmHjD,MAAM,gBAAgB,CAlHhB,QAAA,GAAW,OAAA,CAAQ,IAAC,CAAI;QAmH9B,MAAM,gBAAgB,CAlHhB,gBAAA,GAAmB,eAAA,CAAgB,OAAC,CAAO,CAAC;QAmHlD,EAAE,CAAC,CAAC,gBAlHC,CAAgB,IAAC,KAAQ,oBAAA,CAAqB,MAAC;YAmHhD,gBAAgB,CAlHC,IAAC,KAAQ,oBAAA,CAAqB,KAAC,CAAK,CAAC,CAAA;YAmHxD,yCAAyC;YACzC,gDAAgD;YAChD,uBAAuB;YACvB,MAAM,CAlHC,IAAA,CAAK;QAmHd,CAAC;QACD,EAAE,CAAC,CAAC,gBAlHC,CAAgB,IAAC,KAAQ,oBAAA,CAAqB,UAAC;YAmHhD,oBAAoB,CAlHC,gBAAC,CAAgB,QAAC,CAAQ,CAAC,CAAC,CAAA;YAmHnD,2FAA2F;YAC3F,4BAA4B;YAC5B,MAAM,CAlHC,IAAA,CAAK;QAmHd,CAAC;QAED,MAAM,gBAAgB,CAlHhB,cAAA,GAAqC,EAAA,CAAG;QAmH9C,MAAM,gBAAgB,CAlHhB,uBAAA,GAA2C,EAAA,CAAG;QAmHpD,MAAM,gBAAgB,CAlHhB,sBAAA,GAAkD,EAAA,CAAG;QAmH3D,MAAM,gBAAgB,CAlHhB,WAAA,GAA6B,EAAA,CAAG;QAmHtC,MAAM,gBAAgB,CAlHhB,MAAA,GAA0B,EAAA,CAAG;QAoHnC,MAAM,gBAAgB,CAlHhB,+BAAA,GAAmD,EAAA,CAAG;QAmH5D,MAAM,gBAAgB,CAlHhB,sBAAA,GAA6C,EAAA,CAAG;QAmHtD,MAAM,gBAAgB,CAlHhB,mBAAA,GAAqC,EAAA,CAAG;QAoH9C,IAAI,gBAAgB,CAlHhB,kBAAA,GAAqB,KAAA,CAAM;QAmH/B,MAAM,gBAAgB,CAlHhB,KAAA,GAAmB,EAAA,CAAG;QAmH5B,MAAM,gBAAgB,CAlHhB,QAAA,GAAW,WAAA,CAAY,QAAC,CAAQ,WAAC,EAAW,CAAE,CAAC,CAAC,CAAC,CAAC;QAmHxD,MAAM,gBAAgB,CAlHhB,iBAAA,GAAoB,QAAA,IAAY,gBAAA,CAAiB;QAoHvD,OAAO,CAlHC,KAAC,CAAK,OAAC,CAAO,IAAC;YAmHrB,MAAM,gBAAgB,CAlHhB,UAAA,GAAa,IAAA,CAAK,UAAC,CAmHrB,iBAAiB,EAlHE,IAAA,EAAM,cAAA,EAAgB,uBAAA,EAAyB,MAAA,EAmHlE,sBAAsB,EAlHE,WAAA,CAAY,CAAC;YAoHzC,IAAI,gBAAgB,CAlHhB,sBAAgC,CAAS;YAmH7C,IAAI,gBAAgB,CAlHhB,WAAqB,CAAS;YAmHlC,IAAI,gBAAgB,CAlHhB,cAAA,GAAiB,IAAA,CAAK,uBAAC,CAAuB,IAAC,CAAI,IAAC,CAAI,CAAC;YAoH7D,EAAE,CAAC,CAAC,cAlHC,IAAiB,aAAA,CAAc,CAAC,CAAA;gBAmHnC,sBAAsB,GAlHG,IAAA,CAAK,KAAC,CAAK;YAmHtC,CAAC;YAlHC,IAAA,CAAK,EAAA,CAAA,CAAA,cAAK,CAAc,UAAC,CAAU,oBAAC,CAAoB,CAAC,CAAC,CAAA;gBAmH1D,sBAAsB,GAlHG,IAAA,CAAK,KAAC,CAAK;gBAmHpC,WAAW,GAlHG,cAAA,CAAe,SAAC,CAAS,oBAAC,CAAoB,MAAC,CAAM,GAAG,GAAA,CAAI;YAmH5E,CAAC;YAED,MAAM,gBAAgB,CAlHhB,kBAAA,GAAqB,SAAA,CAAU,sBAAC,CAAsB,CAAC;YAmH7D,EAAE,CAAC,CAAC,kBAlHC,CAAkB,CAAC,CAAA;gBAmHtB,EAAE,CAAC,CAAC,kBAlHC,CAAkB,CAAC,CAAA;oBAmHtB,IAAI,CAlHC,YAAC,CAmHF,kHAAkH,EAClH,IAAI,CAlHC,UAAC,CAAU,CAAC;gBAmHvB,CAAC;gBACD,kBAAkB,GAlHG,IAAA,CAAK;gBAmH1B,IAAI,CAlHC,cAAC,CAAc,0BAAC,CAmHjB,WAAW,EAlHE,sBAAA,EAAwB,IAAA,CAAK,UAAC,EAAW,sBAAA,EAmHtD,+BAA+B,EAlHE,mBAAA,CAAoB,CAAC;YAmH5D,CAAC;YAED,EAAE,CAAC,CAAC,CAlHC,UAAC,IAAa,CAAA,kBAAE,CAAkB,CAAC,CAAA;gBAmHtC,8DAA8D;gBAC9D,KAAK,CAlHC,IAAC,CAAI,IAAC,CAAI,cAAC,CAAc,IAAC,EAAK,IAAA,CAAK,CAAC,CAAC;gBAmH5C,cAAc,CAlHC,IAAC,CAAI,CAAC,IAAC,CAAI,IAAC,EAAK,IAAA,CAAK,KAAC,CAAK,CAAC,CAAC;YAmH/C,CAAC;QACH,CAAC,CAlHC,CAAC;QAoHH,MAAM,gBAAgB,CAlHhB,kBAAA,GAAqB,wBAAA,CAAyB,QAAC,EAAS,cAAA,CAAe,CAAC;QAmH9E,MAlHM,EAAA,UAAE,EAAW,cAAA,EAAgB,YAAA,EAAa,GAmH5C,IAAI,CAlHC,gBAAC,CAAgB,IAAC,CAAI,eAAC,EAAgB,kBAAA,CAAmB,CAAC;QAmHpE,MAAM,gBAAgB,CAlHhB,UAAA,GAA6B,EAAA,CAAG;QAmHtC,MAAM,gBAAgB,CAlHhB,uBAAA,GAA0B,IAAI,GAAA,EAAW,CAAG;QAmHlD,MAAM,gBAAgB,CAlHhB,aAAA,GAAgB,IAAA,CAAK,oBAAC,CAmHxB,iBAAiB,EAlHE,OAAA,CAAQ,IAAC,EAAK,cAAA,EAAgB,uBAAA,EAmHjD,sBAAsB,EAlHE,OAAA,CAAQ,UAAC,EAAW,UAAA,EAAY,uBAAA,CAAwB,CAAC;QAmHrF,MAAM,gBAAgB,CAlHhB,YAAA,GAA0C,IAAA,CAAK,0BAAC,CAmHlD,OAAO,CAlHC,IAAC,EAAK,uBAAA,EAAyB,uBAAA,CAAwB,CAAC;QAmHpE,MAAM,gBAAgB,CAlHhB,UAAA,GAAa,MAAA,CAAO,iBAAC,IAAoB,kBAAA,CAAmB;QAoHlE,MAAM,gBAAgB,CAlHhB,eAAA,GAAkB,IAAI,sBAAA,CAmHxB,IAAI,CAlHC,mBAAC,EAAoB,MAAA,CAAO,eAAC,EAAgB,UAAA,EAAY,aAAA,EAAe,KAAA,EAmH7E,UAAU,EAlHE,iBAAA,EAAmB,eAAA,EAAiB,OAAA,CAAQ,UAAC,CAAU,CAAC;QAoHxE,MAAM,gBAAgB,CAlHhB,QAAA,GAA0B,IAAA,CAAK,QAAC,CAmHlC,gBAAgB,CAlHC,WAAC,GAAa,oBAAA,GAAuB,IAAA,EAAM,OAAA,CAAQ,QAAC,EAmHrE,cAAc,CAlHC,MAAC,CAmHZ,iBAAiB,EAlHE,aAAA,EAmHnB,iBAAiB,GAlHG,MAAA,CAAO,eAAC,GAAiB,eAAA,CAAgB,CAAC,CAAC;QAmHvE,eAAe,CAlHC,YAAC,EAAY,CAAE;QAmH/B,4EAA4E;QAC5E,MAAM,gBAAgB,CAlHhB,kBAAA,GAAqB,SAAA,CAAU,gBAAC,CAAgB,SAAC,CAAS;YAmH5D,WAAW,CAlHC,KAAC,CAAK,gBAAC,CAAgB,SAAC,CAAS,CAAC,CAAC,CAAC;YAmHhD,kBAAkB,CAlHC;QAmHvB,MAAM,gBAAgB,CAlHhB,cAAA,GAAiB,MAAA,CAAO,kBAAC,CAAkB,kBAAC,CAAkB,CAAC;QAmHrE,IAAI,gBAAgB,CAlHhB,aAAe,CAAY;QAoH/B,EAAE,CAAC,CAAC,gBAlHC,CAAgB,IAAC,KAAQ,oBAAA,CAAqB,UAAC,CAAU,CAAC,CAAA;YAmH7D,EAAE,CAAC,CAAC,OAlHC,CAAO,QAAC,IAAW,CAAA,OAAE,CAAO,QAAC,CAAQ,KAAC,CAAK,gBAAC,CAAgB,CAAC,CAAC,CAAA;gBAmHjE,IAAI,CAlHC,YAAC,CAAY,2CAAC,EAA4C,OAAA,CAAQ,UAAC,CAAU,CAAC;YAmHrF,CAAC;YAED,aAAa,GAlHG,IAAI,YAAA,CAmHhB,IAAI,CAlHC,cAAC,EAAc,EAAG,kBAAA,GAAqB,IAAA,GAAO,cAAA,EAAgB,OAAA,CAAQ,UAAC,CAAU,CAAC;QAmH7F,CAAC;QAlHC,IAAA,CAAK,EAAA,CAAA,CAAA,iBAAK,CAAiB,CAAC,CAAA;YAmH5B,IAAI,CAlHC,qCAAC,CAAqC,aAAC,EAAc,MAAA,CAAO,CAAC;YAmHlE,IAAI,CAlHC,+CAAC,CAmHF,aAAa,EAlHE,YAAA,EAAc,OAAA,CAAQ,UAAC,CAAU,CAAC;YAoHrD,aAAa,GAlHG,IAAI,mBAAA,CAmHhB,KAAK,EAlHE,MAAA,EAAQ,UAAA,EAAY,WAAA,EAAa,eAAA,CAAgB,wBAAC,EAmHzD,eAAe,CAlHC,kBAAC,EAAmB,eAAA,CAAgB,2BAAC,EAmHrD,eAAe,CAlHC,YAAC,EAAa,QAAA,EAAU,kBAAA,GAAqB,IAAA,GAAO,cAAA,EAmHpE,OAAO,CAlHC,UAAC,CAAU,CAAC;QAmH1B,CAAC;QAlHC,IAAA,CAAK,CAAA;YAmHL,IAAI,CAlHC,oBAAC,CAAoB,YAAC,EAAa,OAAA,CAAQ,CAAC;YAmHjD,IAAI,CAlHC,uBAAC,CAAuB,aAAC,EAAc,OAAA,CAAQ,UAAC,CAAU,CAAC;YAoHhE,MAAM,gBAAgB,CAlHhB,cAAA,GAmHF,kBAAkB,GAlHG,IAAA,GAAO,MAAA,CAAO,kBAAC,CAAkB,kBAAC,CAAkB,CAAC;YAmH9E,aAAa,GAlHG,IAAI,UAAA,CAmHhB,QAAQ,EAlHE,KAAA,EAAO,YAAA,EAAc,MAAA,EAAQ,UAAA,EAmHvC,eAAe,CAlHC,wBAAC,EAAyB,eAAA,CAAgB,kBAAC,EAmH3D,eAAe,CAlHC,2BAAC,EAA4B,eAAA,CAAgB,YAAC,EAAa,QAAA,EAmH3E,kBAAkB,GAlHG,IAAA,GAAO,cAAA,EAAgB,OAAA,CAAQ,UAAC,EAAW,OAAA,CAAQ,aAAC,CAAa,CAAC;YAoH3F,IAAI,CAlHC,wBAAC,CAAwB,aAAC,CAAa;iBAmHvC,OAlHC,CAmHE,qBAAqB,IAlHI,IAAA,CAAK,qCAAC,CAmH3B,qBAAqB,CAlHC,cAAC,EAAe,qBAAA,CAAsB,UAAC,EAmH7D,qBAAqB,CAlHC,SAAC,CAAS,QAAC,CAAQ,CAAC,CAAC;YAoHvD,MAAM,gBAAgB,CAlHhB,iBAAA,GAAoB,eAAA,CAAgB,WAAC,CAAW,SAAC,CAAS,QAAC,CAAQ;YAmHzE,IAAI,CAlHC,qCAAC,CAmHF,YAAY,EAlHE,MAAA,EAAQ,iBAAA,CAAkB,SAAC,EAAS,CAAE,CAAC;QAmH3D,CAAC;QAED,EAAE,CAAC,CAAC,kBAlHC,CAAkB,CAAC,CAAA;YAmHtB,MAAM,gBAAgB,CAlHhB,uBAAA,GAA0B,IAAA,CAAK,mBAAC,CAAmB;YAmHzD,MAAM,gBAAgB,CAlHhB,mBAAA,GAmHF,wBAAwB,CAlHC,gBAAC,EAAiB,sBAAA,CAAuB,CAAC;YAmHvE,MAlHM,EAAA,UAAE,EAAW,sBAAA,EAAuB,GAmHtC,IAAI,CAlHC,gBAAC,CAAgB,IAAC,CAAI,eAAC,EAAgB,mBAAA,CAAoB,CAAC;YAmHrE,MAAM,gBAAgB,CAlHhB,+BAAA,GAAkC,IAAI,GAAA,EAAW,CAAG;YAmH1D,MAAM,gBAAgB,CAlHhB,qBAAA,GAAwB,IAAA,CAAK,oBAAC,CAmHhC,IAAI,EAlHE,OAAA,CAAQ,IAAC,EAAK,sBAAA,EAAwB,+BAAA,EAAiC,EAAA,EAmH7E,OAAO,CAlHC,UAAC,EAAW,EAAA,EAAI,+BAAA,CAAgC,CAAC;YAmH7D,MAAM,gBAAgB,CAlHhB,oBAAA,GAAkD,IAAA,CAAK,0BAAC,CAmH1D,OAAO,CAlHC,IAAC,EAAK,+BAAA,EAAiC,+BAAA,CAAgC,CAAC;YAmHpF,IAAI,CAlHC,+CAAC,CAmHF,qBAAqB,EAlHE,oBAAA,EAAsB,OAAA,CAAQ,UAAC,CAAU,CAAC;YAmHrE,MAAM,gBAAgB,CAlHhB,uBAAA,GAA0B,IAAI,sBAAA,CAmHhC,IAAI,CAlHC,mBAAC,EAAoB,MAAA,CAAO,eAAC,EAAgB,MAAA,CAAO,iBAAC,EAmH1D,qBAAqB,EAlHE,EAAA,EAAI,EAAA,EAAI,IAAA,EAAM,uBAAA,EAAyB,OAAA,CAAQ,UAAC,CAAU,CAAC;YAmHtF,uBAAuB,CAlHC,YAAC,EAAY,CAAE;YAoHvC,aAAa,GAlHG,IAAI,mBAAA,CAmHhB,EAAE,EAlHE,EAAA,EAAI,EAAA,EAAI,mBAAA,EAAqB,uBAAA,CAAwB,wBAAC,EAmH1D,uBAAuB,CAlHC,kBAAC,EAmHzB,uBAAuB,CAlHC,2BAAC,EAA4B,uBAAA,CAAwB,YAAC,EAmH9E,CAAC,aAlHC,CAAa,EAAE,cAAA,EAAgB,OAAA,CAAQ,UAAC,CAAU,CAAC;QAmH3D,CAAC;QAED,MAAM,CAlHC,aAAA,CAAc;IAmHvB,CAAC;IACH;;;;;OAKG;IAtHA,qCAAA,CAwHG,MAAiC,EAAE,OAAwB,EAC3D,QAAgC;QAClC,MAAM,gBAAgB,CAvHhB,aAAA,GAAgB,IAAI,GAAA,EAAW,CAAG;QAwHxC,QAAQ,CAvHC,UAAC,CAAU,OAAC,CAAO,KAAC,MAAU,aAAA,CAAc,GAAC,CAAG,KAAC,CAAK,CAAC,CAAC,CAAA,CAAE,CAAC;QAyHpE,MAAM,gBAAgB,CAvHhB,eAAA,GAAkB,MAAA,CAAO,MAAC,CAAM,KAAC,IAAQ,KAAA,CAAM,WAAC,CAAW,CAAC;QAwHlE,eAAe,CAvHC,OAAC,CAAO,KAAC;YAwHvB,MAAM,gBAAgB,CAvHhB,IAAA,GAAO,KAAA,CAAM,IAAC,CAAI;YAwHxB,EAAE,CAAC,CAAC,CAvHC,aAAC,CAAa,GAAC,CAAG,IAAC,CAAI,CAAC,CAAC,CAAA;gBAwH5B,IAAI,CAvHC,YAAC,CAAY,yCAAC,IAAyC,GAAI,EAAI,KAAA,CAAM,UAAC,CAAU,CAAC;YAwHxF,CAAC;QACH,CAAC,CAvHC,CAAC;QAyHH,OAAO,CAvHC,OAAC,CAAO,MAAC;YAwHf,EAAE,CAAC,CAAC,MAvHC,CAAM,WAAC,CAAW,CAAC,CAAA;gBAwHtB,MAAM,gBAAgB,CAvHhB,KAAA,GAAQ,eAAA,CAAgB,IAAC,CAAI,KAAC,IAAQ,KAAA,CAAM,IAAC,IAAO,MAAA,CAAO,IAAC,CAAI,CAAC;gBAwHvE,EAAE,CAAC,CAAC,CAvHC,KAAC,CAAK,CAAC,CAAA;oBAwHV,IAAI,CAvHC,YAAC,CAwHF,yBAAyB,MAvHC,CAAM,IAAC,IAAI,MAAI,CAAM,KAAC,qCAAK,MAAqC,CAAM,IAAC,wCAAI,EAwHrG,MAAM,CAvHC,UAAC,CAAU,CAAC;gBAwHzB,CAAC;YACH,CAAC;QACH,CAAC,CAvHC,CAAC;IAwHL,CAAC;IACH;;;;;;;;;OASG;IA/HA,UAAA,CAiIG,iBAA0B,EAAE,IAAoB,EAAE,oBAAgC,EAClF,WAA4B,EAAE,YAA6B,EAC3D,UAAmC,EAAE,UAAyB;QAChE,MAAM,gBAAgB,CAhIhB,IAAA,GAAO,IAAA,CAAK,uBAAC,CAAuB,IAAC,CAAI,IAAC,CAAI,CAAC;QAiIrD,MAAM,gBAAgB,CAhIhB,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK;QAiIzB,MAAM,gBAAgB,CAhIhB,OAAA,GAAU,IAAA,CAAK,UAAC,CAAU;QAkIhC,MAAM,gBAAgB,CAhIhB,SAAA,GAAY,IAAA,CAAK,KAAC,CAAK,gBAAC,CAAgB,CAAC;QAiI/C,IAAI,gBAAgB,CAhIhB,UAAA,GAAa,KAAA,CAAM;QAkIvB,EAAE,CAAC,CAAC,SAhIC,KAAa,IAAA,CAAK,CAAC,CAAA;YAiItB,UAAU,GAhIG,IAAA,CAAK;YAiIlB,EAAE,CAAC,CAAC,SAhIC,CAAS,SAAC,CAAS,WAAC,CAAW,CAAC,CAAC,CAAC,CAAA;gBAiIrC,IAAI,CAhIC,cAAC,CAAc,oBAAC,CAiIjB,SAAS,CAhIC,YAAC,CAAY,EAAE,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAkIzF,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,UAAC,CAAU,CAAC,CAAC,CAAA;gBAiIhC,EAAE,CAAC,CAAC,iBAhIC,CAAiB,CAAC,CAAA;oBAiIrB,MAAM,gBAAgB,CAhIhB,UAAA,GAAa,SAAA,CAAU,YAAC,CAAY,CAAC;oBAiI3C,IAAI,CAhIC,cAAC,CAAc,UAAC,EAAW,KAAA,EAAO,OAAA,EAAS,UAAA,CAAW,CAAC;gBAiI9D,CAAC;gBAhIC,IAAA,CAAK,CAAA;oBAiIL,IAAI,CAhIC,YAAC,CAAY,gDAAC,EAAiD,OAAA,CAAQ,CAAC;gBAiI/E,CAAC;YAEH,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,UAAC,CAAU,CAAC,CAAC,CAAA;gBAiIhC,MAAM,gBAAgB,CAhIhB,UAAA,GAAa,SAAA,CAAU,YAAC,CAAY,CAAC;gBAiI3C,IAAI,CAhIC,eAAC,CAAe,UAAC,EAAW,KAAA,EAAO,OAAA,EAAS,UAAA,CAAW,CAAC;YAkI/D,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,SAAC,CAAS,CAAC,CAAC,CAAA;gBAiI/B,IAAI,CAhIC,cAAC,CAAc,UAAC,CAiIjB,SAAS,CAhIC,YAAC,CAAY,EAAE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,YAAA,CAAa,CAAC;YAkInF,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,aAAC,CAAa,CAAC,CAAC,CAAA;gBAiInC,IAAI,CAhIC,cAAC,CAAc,oBAAC,CAiIjB,SAAS,CAhIC,YAAC,CAAY,EAAE,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,WAAA,CAAY,CAAC;gBAiIvF,IAAI,CAhIC,qBAAC,CAiIF,SAAS,CAhIC,YAAC,CAAY,EAAE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,YAAA,CAAa,CAAC;YAkInF,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,SAAC,CAAS,CAAC,CAAC,CAAA;gBAiI/B,IAAI,CAhIC,cAAC,CAAc,gBAAC,CAiIjB,IAAI,EAhIE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAkI/D,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,oBAAC,CAAoB,CAAC,CAAC,CAAA;gBAiI1C,IAAI,CAhIC,cAAC,CAAc,oBAAC,CAiIjB,SAAS,CAhIC,oBAAC,CAAoB,EAAE,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS,oBAAA,EAiIxD,WAAW,CAhIC,CAAC;gBAiIjB,IAAI,CAhIC,qBAAC,CAiIF,SAAS,CAhIC,oBAAC,CAAoB,EAAE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,YAAA,CAAa,CAAC;YAkI3F,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,kBAAC,CAAkB,CAAC,CAAC,CAAA;gBAiIxC,IAAI,CAhIC,cAAC,CAAc,oBAAC,CAiIjB,SAAS,CAhIC,kBAAC,CAAkB,EAAE,KAAA,EAAO,KAAA,EAAO,OAAA,EAAS,oBAAA,EAiItD,WAAW,CAhIC,CAAC;YAkInB,CAAC;YAhIC,IAAA,CAAK,EAAA,CAAA,CAAA,SAAK,CAAS,eAAC,CAAe,CAAC,CAAC,CAAA;gBAiIrC,IAAI,CAhIC,cAAC,CAAc,UAAC,CAiIjB,SAAS,CAhIC,eAAC,CAAe,EAAE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,YAAA,CAAa,CAAC;YAiItF,CAAC;QACH,CAAC;QAhIC,IAAA,CAAK,CAAA;YAiIL,UAAU,GAhIG,IAAA,CAAK,cAAC,CAAc,0BAAC,CAiI9B,IAAI,EAhIE,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,WAAA,CAAY,CAAC;QAiI/D,CAAC;QAED,EAAE,CAAC,CAAC,CAhIC,UAAC,CAAU,CAAC,CAAA;YAiIf,IAAI,CAhIC,cAAC,CAAc,gBAAC,CAAgB,IAAC,EAAK,KAAA,EAAO,OAAA,EAAS,oBAAA,EAAsB,WAAA,CAAY,CAAC;QAiIhG,CAAC;QAED,MAAM,CAhIC,UAAA,CAAW;IAiIpB,CAAC;IACH;;;OAGG;IAlIA,uBAAA,CAAA,QAAA;QAoIC,MAAM,CAnIC,SAAA,CAAU,IAAC,CAAI,QAAC,CAAQ,GAAG,QAAA,CAAS,SAAC,CAAS,CAAC,CAAC,GAAG,QAAA,CAAS;IAoIrE,CAAC;IACH;;;;;;OAMG;IAxIA,cAAA,CA0IG,UAAkB,EAAE,KAAa,EAAE,UAA2B,EAAE,UAAyB;QAC3F,EAAE,CAAC,CAAC,UAzIC,CAAU,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;YA0IhC,IAAI,CAzIC,YAAC,CAAY,sCAAC,EAAuC,UAAA,CAAW,CAAC;QA0IxE,CAAC;QAED,UAAU,CAzIC,IAAC,CAAI,IAAI,WAAA,CAAY,UAAC,EAAW,KAAA,EAAO,UAAA,CAAW,CAAC,CAAC;IA0IlE,CAAC;IACH;;;;;;OAMG;IA9IA,eAAA,CAgJG,UAAkB,EAAE,KAAa,EAAE,UAA2B,EAC9D,UAAmC;QACrC,EAAE,CAAC,CAAC,UA/IC,CAAU,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;YAgJhC,IAAI,CA/IC,YAAC,CAAY,uCAAC,EAAwC,UAAA,CAAW,CAAC;QAgJzE,CAAC;QAED,UAAU,CA/IC,IAAC,CAAI,IAAI,qBAAA,CAAsB,UAAC,EAAW,KAAA,EAAO,UAAA,CAAW,CAAC,CAAC;IAgJ5E,CAAC;IACH;;;;;;;OAOG;IArJA,qBAAA,CAuJG,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,YAA6B;QACjE,IAAI,CAtJC,cAAC,CAAc,UAAC,CAuJjB,GAAG,IAtJC,QAAI,EAAS,GAAA,UAAI,SAAU,EAAU,UAAA,EAAY,oBAAA,EAAsB,YAAA,CAAa,CAAC;IAuJ/F,CAAC;IACH;;;;OAIG;IAzJA,gBAAA,CAAA,eAAA,EAAA,kBAAA;QA4JC,4EAA4E;QAC5E,uCAAuC;QACvC,sEAAsE;QACtE,MAAM,gBAAgB,CA1JhB,UAAA,GAAa,IAAI,KAAA,CAAM,IAAC,CAAI,eAAC,CAAe,IAAC,CAAI,CAAC;QA2JxD,6DAA6D;QAC7D,IAAI,gBAAgB,CA1JhB,YAAA,GAAe,KAAA,CAAM;QA4JzB,eAAe,CA1JC,KAAC,CAAK,kBAAC,EAAmB,CAAA,QAAE,EAAS,SAAA;YA2JnD,UAAU,CA1JC,IAAC,CAAI,eAAC,CAAe,GAAC,CAAG,SAAC,CAAS,CAAC,GAAG,SAAA,CAAU;YA2J5D,YAAY,GA1JG,YAAA,IAAgB,QAAA,CAAS,kBAAC,EAAkB,CAAE;QA2J/D,CAAC,CA1JC,CAAC;QA4JH,MAAM,CA1JC;YA2JL,UAAU,EA1JE,UAAA,CAAW,MAAC,CAAM,GAAC,IAAM,CAAA,CAAE,GAAC,CAAG;YA2J3C,YAAY;SACb,CA1JC;IA2JJ,CAAC;IACH;;;;;;;;;;OAUG;IAnKA,oBAAA,CAqKG,iBAA0B,EAAE,WAAmB,EAAE,UAAqC,EACtF,KAAsB,EAAE,sBAA+C,EACvE,iBAAkC,EAAE,gBAAgC,EACpE,6BAA0C;QAC5C,MAAM,gBAAgB,CApKhB,iBAAA,GAAoB,IAAI,GAAA,EAAW,CAAG;QAqK5C,IAAI,gBAAgB,CApKhB,SAAA,GAAqC,IAAA,CAAK;QAsK9C,MAAM,gBAAgB,CApKhB,aAAA,GAAgB,UAAA,CAAW,GAAC,CAAG,CAAC,SAAC;YAqKrC,MAAM,gBAAgB,CApKhB,UAAA,GAAa,IAAI,eAAA,CAqKnB,iBAAiB,CApKC,KAAC,EAAM,iBAAA,CAAkB,GAAC,EAqK5C,aAAa,cApKC,CAAc,SAAC,CAAS,IAAC,CAAI,EAAC,CAAE,CAAC;YAsKnD,EAAE,CAAC,CAAC,SApKC,CAAS,WAAC,CAAW,CAAC,CAAA;gBAqKzB,SAAS,GApKG,SAAA,CAAU;YAqKxB,CAAC;YACD,MAAM,gBAAgB,CApKhB,mBAAA,GAAmD,EAAA,CAAG;YAqK5D,IAAI,gBAAgB,CApKhB,cAAA,GAqKA,IAAI,CApKC,cAAC,CAAc,+BAAC,CAA+B,SAAC,EAAU,UAAA,CAAW,CAAC;YAqK/E,2DAA2D;YAC3D,yEAAyE;YACzE,cAAc,GApKG,IAAA,CAAK,wBAAC,CAAwB,WAAC,EAAY,cAAA,CAAe,CAAC;YAqK5E,MAAM,gBAAgB,CApKhB,UAAA,GAAa,IAAA,CAAK,cAAC,CAAc,4BAAC,CAA4B,SAAC,EAAU,UAAA,CAAW,CAAC;YAqK3F,IAAI,CApKC,4BAAC,CAqKF,SAAS,CApKC,MAAC,EAAO,KAAA,EAAO,mBAAA,EAAqB,6BAAA,CAA8B,CAAC;YAqKjF,sBAAsB,CApKC,OAAC,CAAO,CAAC,UAAC;gBAqK/B,EAAE,CAAC,CAAC,CApKC,UAAC,CAAU,KAAC,CAAK,MAAC,KAAU,CAAA,IAAK,SAAA,CAAU,WAAC,CAAW;oBAqKxD,CAAC,SApKC,CAAS,QAAC,IAAW,UAAA,CAAW,KAAC,CAAK,CAAC,CAAC,CAAA;oBAqK5C,gBAAgB,CApKC,IAAC,CAAI,IAAI,YAAA,CAqKtB,UAAU,CApKC,IAAC,EAAK,eAAA,CAAgB,SAAC,CAAS,IAAC,CAAI,EAAE,UAAA,CAAW,UAAC,CAAU,CAAC,CAAC;oBAqK9E,iBAAiB,CApKC,GAAC,CAAG,UAAC,CAAU,IAAC,CAAI,CAAC;gBAqKzC,CAAC;YACH,CAAC,CApKC,CAAC;YAqKH,MAAM,gBAAgB,CApKhB,mBAAA,GAAsB,IAAA,CAAK,mBAAC,CAAmB;YAqKrD,IAAI,CApKC,mBAAC,IAAsB,SAAA,CAAU,OAAC,CAAO,MAAC,CAAM;YAqKrD,MAAM,CApKC,IAAI,YAAA,CAqKP,SAAS,EApKE,mBAAA,EAAqB,cAAA,EAAgB,UAAA,EAAY,mBAAA,EAqK5D,UAAU,CApKC,CAAC;QAqKlB,CAAC,CApKC,CAAC;QAsKH,sBAAsB,CApKC,OAAC,CAAO,CAAC,UAAC;YAqK/B,EAAE,CAAC,CAAC,UApKC,CAAU,KAAC,CAAK,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;gBAqK/B,EAAE,CAAC,CAAC,CApKC,iBAAC,CAAiB,GAAC,CAAG,UAAC,CAAU,IAAC,CAAI,CAAC,CAAC,CAAA;oBAqK3C,IAAI,CApKC,YAAC,CAqKF,iDAAiD,UApKC,CAAU,KAAC,GAAK,EAqKlE,UAAU,CApKC,UAAC,CAAU,CAAC;gBAqK7B,CAAC;YACH,CAAC;YApKC,IAAA,CAAK,EAAA,CAAA,CAAA,CAAK,SAAC,CAAS,CAAC,CAAA;gBAqKrB,IAAI,gBAAgB,CApKhB,QAAA,GAAiC,IAAA,CAAK;gBAqK1C,EAAE,CAAC,CAAC,iBApKC,CAAiB,CAAC,CAAA;oBAqKrB,QAAQ,GApKG,qBAAA,CAAsB,WAAC,CAAW,WAAC,CAAW,CAAC;gBAqK5D,CAAC;gBACD,gBAAgB,CApKC,IAAC,CAAI,IAAI,YAAA,CAAa,UAAC,CAAU,IAAC,EAAK,QAAA,EAAU,UAAA,CAAW,UAAC,CAAU,CAAC,CAAC;YAqK5F,CAAC;QACH,CAAC,CApKC,CAAC;QAqKH,MAAM,CApKC,aAAA,CAAc;IAqKvB,CAAC;IACH;;;;;;OAMG;IAzKA,4BAAA,CA2KG,mBAA4C,EAAE,UAA2B,EACzE,yBAAsD,EACtD,6BAA0C;QAC5C,EAAE,CAAC,CAAC,mBA1KC,CAAmB,CAAC,CAAA;YA2KvB,MAAM,gBAAgB,CA1KhB,gBAAA,GAAmB,IAAI,GAAA,EAA0B,CAAG;YA2K1D,UAAU,CA1KC,OAAC,CAAO,SAAC;gBA2KlB,MAAM,gBAAgB,CA1KhB,SAAA,GAAY,gBAAA,CAAiB,GAAC,CAAG,SAAC,CAAS,IAAC,CAAI,CAAC;gBA2KvD,EAAE,CAAC,CAAC,CA1KC,SAAC,IAAY,SAAA,CAAU,SAAC,CAAS,CAAC,CAAA;oBA2KrC,kEAAkE;oBAClE,gBAAgB,CA1KC,GAAC,CAAG,SAAC,CAAS,IAAC,EAAK,SAAA,CAAU,CAAC;gBA2KlD,CAAC;YACH,CAAC,CA1KC,CAAC;YA4KH,MAAM,CA1KC,IAAC,CAAI,mBAAC,CAAmB,CAAC,OAAC,CAAO,OAAC;gBA2KxC,MAAM,gBAAgB,CA1KhB,MAAA,GAAS,mBAAA,CAAoB,OAAC,CAAO,CAAC;gBA2K5C,MAAM,gBAAgB,CA1KhB,SAAA,GAAY,gBAAA,CAAiB,GAAC,CAAG,MAAC,CAAM,CAAC;gBA4K/C,4FAA4F;gBAC5F,EAAE,CAAC,CAAC,SA1KC,CAAS,CAAC,CAAA;oBA2Kb,6BAA6B,CA1KC,GAAC,CAAG,SAAC,CAAS,IAAC,CAAI,CAAC;oBA2KlD,EAAE,CAAC,CAAC,CA1KC,iBAAC,CAAiB,SAAC,CAAS,UAAC,CAAU,CAAC,CAAC,CAAA;wBA2K5C,yBAAyB,CA1KC,IAAC,CAAI,IAAI,yBAAA,CA2K/B,OAAO,EA1KE,SAAA,CAAU,IAAC,EAAK,SAAA,CAAU,UAAC,EAAW,SAAA,CAAU,UAAC,CAAU,CAAC,CAAC;oBA2K5E,CAAC;gBAPT,CAAA;YASI,CAAC,CA1KC,CAAC;QA2KL,CAAC;IACH,CAAC;IACH;;;;;OAKG;IA9KA,0BAAA,CAgLG,WAAmB,EAAE,KAAsB,EAC3C,uBAAoC;QACtC,MAAM,gBAAgB,CA/KhB,iBAAA,GAA+C,EAAA,CAAG;QAiLxD,KAAK,CA/KC,OAAC,CAAO,CAAC,IAAM;YAgLnB,EAAE,CAAC,CAAC,CA/KC,IAAC,CAAI,SAAC,IAAY,CAAA,uBAAE,CAAuB,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC,CAAA;gBAgL9D,iBAAiB,CA/KC,IAAC,CAAI,IAAC,CAAI,cAAC,CAAc,wBAAC,CAAwB,WAAC,EAAY,IAAA,CAAK,CAAC,CAAC;YAgL1F,CAAC;QACH,CAAC,CA/KC,CAAC;QAgLH,MAAM,CA/KC,IAAA,CAAK,wBAAC,CAAwB,WAAC,EAAY,iBAAA,CAAkB,CAAC;IAgLvE,CAAC;IACH;;;OAGG;IAjLA,wBAAA,CAAA,UAAA;QAmLC,MAAM,CAlLC,UAAA,CAAW,MAAC,CAAM,SAAC,IAAY,SAAA,CAAU,SAAC,CAAS,WAAC,CAAW,CAAC;IAmLzE,CAAC;IACH;;;OAGG;IApLA,4BAAA,CAAA,UAAA;QAsLC,MAAM,CArLC,IAAA,CAAK,wBAAC,CAAwB,UAAC,CAAU;aAsL3C,GArLC,CAAG,SAAC,IAAY,cAAA,CAAe,SAAC,CAAS,SAAC,CAAS,IAAC,CAAI,CAAC,CAAC;IAsLlE,CAAC;IACH;;;;OAIG;IAxLA,uBAAA,CAAA,UAAA,EAAA,UAAA;QA0LC,MAAM,gBARe,CAjLf,kBAAA,GAAqB,IAAA,CAAK,4BAAC,CAA4B,UAAC,CAAU,CAAC;QA0LzE,EAAE,CAAC,CARC,kBAjLC,CAAkB,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA0LjC,IARE,CAjLG,YAAC,CA0LF,oDAAoD;gBAPhD,2EAAwB;gBASxB,2BAA2B,kBAzLC,CAAkB,IAAC,CAAI,GAAC,CAAG,EAAC,EAkL9D,UAAY,CAjLC,CAAC;QA0LlB,CAAC;IACH,CAAC;IACH;;;;;;;;;OACE;IAhLC,oBAAA,CAAA,YAAA,EAAA,OAAA;QA0LC,MARE,gBAAA,CAjLI,MAAA,GAAS,OAAA,CAAQ,IAAC,CAAI,OAAC,CAAO,UAAC,EAAW,EAAA,CAAG,CAAC;QA2LpD,EAAE,CAAC,CAAC,CAzLC,YAAC,IAAe,CAAA,IAAE,CAAI,eAAC,CAAe,UAAC,CAAU,MAAC,EAAO,IAAA,CAAK,QAAC,CAAQ,CAAC,CAAC,CAAA;YA0L5E,IARG,gBAAiB,CAjLhB,QAAA,GAAW,IAAA,MAAK,6BAAM,CAA6B;YA0LvD,QARQ;gBACZ,UAAA,MAjLmB,0EAAM,CAA0E;YA0L/F,EAAE,CAAC,CAAC,MAzLC,CAAM,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;gBAkL7B,QAAS;oBACJ,UAAU,MAjLC,+HAAM,CAA+H;YA0LtJ,CAAC;YAzLC,IAAA,CAAK,CAAA;gBAkLL,QAAQ;oBACN,8FAA+B,CAjLkE;YA0LrG,CAAC;YAPD,IAAA,CAjLK,YAAC,CAAY,QAAC,EAAS,OAAA,CAAQ,UAAC,CAAU,CAAC;QAkLlD,CAAC;IASH,CAAC;IACH;;;;;OAKG;IA7LA,+CAAA,CA+LG,UARkB,EAAU,YAAC,EAS7B,UAA2B;QAC7B,MAAM,gBAAgB,CA9LhB,kBAAA,GAA+B,IAAA,CAAK,4BAAC,CAA4B,UAAC,CAAU,CAAC;QA+LnF,EAAE,CAAC,CAAC,kBA9LC,CAAkB,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA+LjC,IAAI,CA9LC,YAAC,CA+LF,uCAAuC,kBA9LC,CAAkB,IAAC,CAAI,GAAC,CAAG,EAAC,EAAG,UAAA,CAAW,CAAC;QA+LzF,CAAC;QACD,YAAY,CA9LC,OAAC,CAAO,IAAC;YA+LpB,IAAI,CA9LC,YAAC,CA+LF,oBAAoB,IA9LC,CAAI,IAAC,0KAAI,EA+L9B,UAAU,CA9LC,CAAC;QA+LlB,CAAC,CA9LC,CAAC;IA+LL,CAAC;IACH;;;;OAIG;IAjMA,qCAAA,CAmMG,UAA0B,EAAE,MAAuB;QACrD,MAAM,gBAAgB,CAlMhB,kBAAA,GAAqB,IAAI,GAAA,EAAW,CAAG;QAoM7C,UAAU,CAlMC,OAAC,CAAO,SAAC;YAmMlB,MAAM,CAlMC,IAAC,CAAI,SAAC,CAAS,SAAC,CAAS,OAAC,CAAO,CAAC,OAAC,CAAO,CAAC;gBAmMhD,MAAM,gBAAgB,CAlMhB,SAAA,GAAY,SAAA,CAAU,SAAC,CAAS,OAAC,CAAO,CAAC,CAAC,CAAC;gBAmMjD,kBAAkB,CAlMC,GAAC,CAAG,SAAC,CAAS,CAAC;YAmMpC,CAAC,CAlMC,CAAC;QAmML,CAAC,CAlMC,CAAC;QAoMH,MAAM,CAlMC,OAAC,CAAO,KAAC;YAmMd,EAAE,CAAC,CAAC,SAlMC,CAAS,KAAC,CAAK,MAAC,CAAM,IAAI,CAAA,kBAAE,CAAkB,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAA;gBAmMlE,IAAI,CAlMC,YAAC,CAmMF,iBAAiB,KAlMC,CAAK,QAAC,0KAAQ,EAmMhC,KAAK,CAlMC,UAAC,CAAU,CAAC;YAmMxB,CAAC;QACH,CAAC,CAlMC,CAAC;IAmML,CAAC;IACH;;;;OAIG;IArMA,wBAAA,CAAA,WAAA,EAAA,UAAA;QAwMC,kEAAkE;QAClE,qCAAqC;QACrC,MAAM,CAtMC,UAAA,CAAW,MAAC,CAAM,CAAC,SAAC;YAuMzB,EAAE,CAAC,CAAC,SAtMC,CAAS,IAAC,KAAQ,mBAAA,CAAoB,QAAC;gBAuMxC,CAAC,IAtMC,CAAI,eAAC,CAAe,WAAC,CAAW,WAAC,EAAY,SAAA,CAAU,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,CAAC,CAAC,CAAA;gBAuMjF,IAAI,gBAAgB,CAtMhB,QAAA,GAuMA,kBAAkB,SAtMC,CAAS,IAAC,yCAAI,WAAyC,IAAW,CAAI;gBAuM7F,EAAE,CAAC,CAAC,WAtMC,CAAW,UAAC,CAAU,KAAC,CAAK,CAAC,CAAC,CAAA;oBAuMjC,QAAQ;wBACJ,YAAY,SAtMC,CAAS,IAAC,kGAAI;4BAuM3B,iGAAiG,CAtMC;gBAuMxG,CAAC;gBAtMC,IAAA,CAAK,EAAA,CAAA,CAAA,WAAK,CAAW,OAAC,CAAO,GAAC,CAAG,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;oBAuMxC,QAAQ;wBACJ,YAAY,WAtMC,yCAAW,SAAyC,CAAS,IAAC,sDAAI;4BAuM/E,YAAY,WAtMC,+HAAW;4BAuMxB,iGAAiG,CAtMC;gBAuMxG,CAAC;gBACD,IAAI,CAtMC,YAAC,CAAY,QAAC,EAAS,SAAA,CAAU,UAAC,CAAU,CAAC;YAuMpD,CAAC;YACD,MAAM,CAtMC,CAAA,iBAAE,CAAiB,SAAC,CAAS,KAAC,CAAK,CAAC;QAuM7C,CAAC,CAtMC,CAAC;IAuML,CAAC;IACH;;;;;OAKG;IA1MA,YAAA,CA4MG,OAAe,EAAE,UAA2B,EAC5C,QAAyB,eAAe,CAAC,KAAK;QAChD,IAAI,CA3MC,aAAC,CAAa,IAAC,CAAI,IAAI,UAAA,CAAW,UAAC,EAAW,OAAA,EAAS,KAAA,CAAM,CAAC,CAAC;IA4MtE,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC/C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC/C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC9C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACnD,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,mBAAmB,CAAC;IACnD,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,cAAc,CAAC;IAC9C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,eAAe,CAAC;IAC/C,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC;IACxC,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,aAAa,CAAC;AAC7C,CAAC;AAED;IACA;;;;OAIG;IACH,YArOG,CAAA,GAAA,EAAA,MAAA;QAsOC,MAAM,gBAAgB,CArOhB,gBAAA,GAAmB,eAAA,CAAgB,GAAC,CAAG,CAAC;QAsO9C,EAAE,CAAC,CAAC,gBArOC,CAAgB,IAAC,KAAQ,oBAAA,CAAqB,MAAC;YAsOhD,gBAAgB,CArOC,IAAC,KAAQ,oBAAA,CAAqB,KAAC;YAsOhD,gBAAgB,CArOC,IAAC,KAAQ,oBAAA,CAAqB,UAAC,CAAU,CAAC,CAAA;YAsO7D,yCAAyC;YACzC,gEAAgE;YAChE,uBAAuB;YACvB,MAAM,CArOC,IAAA,CAAK;QAsOd,CAAC;QAED,MAAM,gBAAgB,CArOhB,iBAAA,GAAoB,GAAA,CAAI,KAAC,CAAK,GAAC,CAAG,CAAC,IAAC,KAA0B,CAAA,IAAE,CAAI,IAAC,EAAK,IAAA,CAAK,KAAC,CAAK,CAAC,CAAC;QAsO7F,MAAM,gBAAgB,CArOhB,QAAA,GAAW,wBAAA,CAAyB,GAAC,CAAG,IAAC,EAAK,iBAAA,CAAkB,CAAC;QAsOvE,MAAM,gBAAgB,CArOhB,cAAA,GAAiB,MAAA,CAAO,kBAAC,CAAkB,QAAC,CAAQ,CAAC;QAsO3D,MAAM,gBAAgB,CArOhB,QAAA,GAA0B,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,GAAA,CAAI,QAAC,EAAS,qBAAA,CAAsB,CAAC;QAsOzF,MAAM,CArOC,IAAI,UAAA,CAsOP,GAAG,CArOC,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,IAAC,EAAK,GAAA,CAAI,KAAC,CAAK,EAAE,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,KAAA,EAAO,EAAA,EAAI,QAAA,EAsOzE,cAAc,EArOE,GAAA,CAAI,UAAC,EAAW,GAAA,CAAI,aAAC,CAAa,CAAC;IAsOzD,CAAC;IACH;;;;OAIG;IACH,YA1OG,CAAA,OAAA,EAAA,OAAA,IAAwD,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA;IA2OxE;;;;OAIG;IACH,cA9OG,CAAA,SAAA,EAAA,OAAA;QA+OC,MAAM,CA9OC,IAAI,OAAA,CAAQ,SAAC,CAAS,IAAC,EAAK,SAAA,CAAU,KAAC,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;IA+O5E,CAAC;IACH;;;;OAIG;IACH,SAlPG,CAAA,IAAA,EAAA,MAAA;QAmPC,MAAM,gBAAgB,CAlPhB,cAAA,GAAiB,MAAA,CAAO,kBAAC,CAAkB,iBAAC,CAAiB,CAAC;QAmPpE,MAAM,CAlPC,IAAI,OAAA,CAAQ,IAAC,CAAI,KAAC,EAAM,cAAA,EAAgB,IAAA,CAAK,UAAC,CAAU,CAAC;IAmPlE,CAAC;IACH;;;;OAIG;IACH,cAtPG,CAAA,SAAA,EAAA,OAAA,IAA8D,MAAA,CAAO,SAAA,CAAU,CAAC,CAAA;IAuPnF;;;;OAIG;IACH,kBA1PG,CAAA,aAAA,EAAA,OAAA,IAA0E,MAAA,CAAO,aAAA,CAAc,CAAC,CAAA;CA2PlG;AACD;IACA;;;;OAIG;IACH,YA9PqB,IAAM,EAAe,KAAO,EAAe,UAAY;QAAvD,SAAA,GAAA,IAAA,CAAM;QAAe,UAAA,GAAA,KAAA,CAAO;QAAe,eAAA,GAAA,UAAA,CAAY;IAAgB,CAAA;CAiQ3F;AAED;IACA,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC;IACrC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC;IACtC,gBAAgB;IAChB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;AAC3C,CAAC;AAED;;;GAGG;AACH,MA7QC,uBAAA,cAAA;IA8QC,MAAM,CArRC,cAAA,CAAe,IAAC,EAAI,CAAE,KAAC,CAAK,MAAC,CAAM,CAAC;AAsR7C,CAAC;AACD;IA0BA;;;;;OAKG;IACH,YAvRa,iBAAmB,EAAiB,sBAAwB,EAC3D,uBAAyB,EAAe,eAAiB;QAD1D,sBAAA,GAAA,iBAAA,CAAmB;QAAiB,2BAAA,GAAA,sBAAA,CAAwB;QAC3D,4BAAA,GAAA,uBAAA,CAAyB;QAAe,oBAAA,GAAA,eAAA,CAAiB;IAAuB,CAAA;IAuP9F;;;;;OAKG;IACH,MAlRG,CAAA,MAAA,CAmRG,iBAA0B,EAAE,UAA0B,EACtD,eAAuC;QACzC,MAAM,gBAAgB,CAlRhB,OAAA,GAAU,IAAI,eAAA,EAAgB,CAAE;QAmRtC,IAAI,gBAAgB,CAlRhB,sBAAA,GAAiC,IAAA,CAAK;QAmR1C,MAAM,gBAAgB,CAlRhB,SAAA,GAAY,UAAA,CAAW,IAAC,CAAI,SAAC,IAAY,SAAA,CAAU,SAAC,CAAS,WAAC,CAAW,CAAC;QAmRhF,EAAE,CAAC,CAAC,SAlRC,CAAS,CAAC,CAAA;YAmRb,MAAM,gBAAgB,CAlRhB,kBAAA,GAAqB,SAAA,CAAU,SAAC,CAAS,QAAC,CAAQ,kBAAC,CAAkB;YAmR3E,GAAG,CAAC,CAAC,IAlRC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,kBAAA,CAAmB,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;gBAmRlD,MAAM,gBAAgB,CAlRhB,QAAA,GAAW,kBAAA,CAAmB,CAAC,CAAC,CAAC;gBAmRvC,EAAE,CAAC,CAAC,QAlRC,KAAY,GAAA,CAAI,CAAC,CAAA;oBAmRpB,sBAAsB,GAlRG,CAAA,CAAE;gBAmR7B,CAAC;gBAlRC,IAAA,CAAK,CAAA;oBAmRL,OAAO,CAlRC,cAAC,CAAc,WAAC,CAAW,KAAC,CAAK,kBAAC,CAAkB,CAAC,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC;gBAmRtE,CAAC;YACH,CAAC;QACH,CAAC;QACD,MAAM,CAlRC,IAAI,cAAA,CAAe,iBAAC,EAAkB,OAAA,EAAS,sBAAA,EAAwB,eAAA,CAAgB,CAAC;IAmRjG,CAAC;IAYH;;;OAGG;IACH,kBA7RG,CAAA,QAAA;QA8RC,MAAM,gBAAgB,CA7RhB,gBAAA,GAA6B,EAAA,CAAG;QA8RtC,IAAI,CA7RC,sBAAC,CAAsB,KAAC,CA8RzB,QAAQ,EA7RE,CAAA,QAAE,EAAS,cAAA,OAAqB,gBAAA,CAAiB,IAAC,CAAI,cAAC,CAAc,CAAC,CAAC,CAAA,CAAE,CAAC;QA8RxF,gBAAgB,CA7RC,IAAC,EAAI,CAAE;QA8RxB,EAAE,CAAC,CAAC,SA7RC,CAAS,IAAC,CAAI,uBAAC,CAAuB,CAAC,CAAC,CAAA;YA8R3C,gBAAgB,CA7RC,IAAC,CAAI,IAAC,CAAI,uBAAC,CAAuB,CAAC;QA8RtD,CAAC;QACD,MAAM,CA7RC,gBAAA,CAAiB,MAAC,GAAQ,CAAA,GAAI,gBAAA,CAAiB,CAAC,CAAC,GAAG,IAAA,CAAK;IA8RlE,CAAC;CACF;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,iBAAiB,CAAC;IAC3C,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,sBAAsB,CAAC;IAChD,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,uBAAuB,CAAC;IACjD,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;AACzC,CAAC;AAED;;;;GAIG;AACH,MA7SC,mCA8SG,WAAmB,EAAE,UAA8B;IACrD,MAAM,gBAAgB,CArThB,WAAA,GAAc,IAAI,WAAA,EAAY,CAAE;IAsTtC,MAAM,gBAAgB,CArThB,UAAA,GAAa,WAAA,CAAY,WAAC,CAAW,CAAC,CAAC,CAAC,CAAC;IAuT/C,WAAW,CArTC,UAAC,CAAU,UAAC,CAAU,CAAC;IAuTnC,GAAG,CAAC,CAAC,IArTC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,UAAA,CAAW,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;QAsT1C,MAAM,gBAAgB,CArThB,QAAA,GAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAsTlC,MAAM,gBAAgB,CArThB,YAAA,GAAe,WAAA,CAAY,QAAC,CAAQ,CAAC,CAAC,CAAC,CAAC;QAsT9C,MAAM,gBAAgB,CArThB,SAAA,GAAY,UAAA,CAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAuTnC,WAAW,CArTC,YAAC,CAAY,YAAC,EAAa,SAAA,CAAU,CAAC;QAsTlD,EAAE,CAAC,CAAC,QArTC,CAAQ,WAAC,EAAW,IAAK,UAAA,CAAW,CAAC,CAAA;YAsTxC,MAAM,gBAAgB,CArThB,OAAA,GAAU,YAAA,CAAa,SAAC,CAAS,CAAC;YAsTxC,OAAO,CArTC,OAAC,CAAO,SAAC,IAAY,WAAA,CAAY,YAAC,CAAY,SAAC,CAAS,CAAC,CAAC;QAsTpE,CAAC;IACH,CAAC;IACD,MAAM,CArTC,WAAA,CAAY;AAsTrB,CAAC;AAED,MAAM,gBAAgB,CArThB,qBAAA,GAAwB,IAAI,cAAA,CAAe,IAAC,EAAK,IAAI,eAAA,EAAgB,EAAG,IAAA,EAAM,IAAA,CAAK,CAAC;AAsT1F,MAAM,gBAAgB,CArThB,oBAAA,GAAuB,IAAI,kBAAA,EAAmB,CAAE;AAsTtD;;;GAGG;AACH,0BAhTC,IAAA;IAiTC,MAAM,CAxTC,IAAA,YAAgB,IAAA,CAAK,IAAC,IAAO,IAAA,CAAK,KAAC,CAAK,IAAC,EAAI,CAAE,MAAC,IAAS,CAAA,CAAE;AAyTpE,CAAC;AACD;;;GAGG;AACH,MAnTC,kCAAA,KAAA;IAoTC,MAAM,gBAAgB,CA3ThB,GAAA,GAAM,IAAI,GAAA,EAAW,CAAG;IA6T9B,KAAK,CA3TC,OAAC,CAAO,CAAC,IAAC;QA4Td,EAAE,CAAC,CAAC,CA3TC,GAAC,CAAG,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,SAAC,CAAS,CAAC,CAAC,CAAA;YA4TjC,GAAG,CA3TC,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,SAAC,EAAU,IAAA,CAAK,CAAC;QA4TrC,CAAC;IACH,CAAC,CA3TC,CAAC;IA6TH,MAAM,CA3TC,KAAA,CAAM,IAAC,CAAI,GAAC,CAAG,MAAC,EAAM,CAAE,CAAC;AA4TlC,CAAC;AACD;;;GAGG;AACH,2BAtTC,GAAA;IAuTC,EAAE,CAAC,CAAC,GA9TC,YAAc,aAAA,CAAc,CAAC,CAAA;QA+ThC,GAAG,GA9TG,GAAA,CAAI,GAAC,CAAG;IA+ThB,CAAC;IACD,MAAM,CA9TC,GAAA,YAAe,SAAA,CAAU;AA+TlC,CAAC","file":"template_parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, InjectionToken, Optional, SchemaMetadata} from '@angular/core/index';\n\nimport {CompileDirectiveMetadata, CompileDirectiveSummary, CompilePipeSummary, CompileTemplateSummary, CompileTokenMetadata, CompileTypeMetadata, identifierName} from '../compile_metadata';\nimport {AST, ASTWithSource, EmptyExpr} from '../expression_parser/ast';\nimport {Parser} from '../expression_parser/parser';\nimport {isPresent} from '../facade/lang';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {Identifiers, createIdentifierToken, identifierToken} from '../identifiers';\nimport {CompilerInjectable} from '../injectable';\nimport * as html from '../ml_parser/ast';\nimport {ParseTreeResult} from '../ml_parser/html_parser';\nimport {expandNodes} from '../ml_parser/icu_ast_expander';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {splitNsName} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {Console} from '../private_import_core';\nimport {ProviderElementContext, ProviderViewContext} from '../provider_analyzer';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {CssSelector, SelectorMatcher} from '../selector';\nimport {isStyleUrlResolvable} from '../style_url_resolver';\nimport {syntaxError} from '../util';\n\nimport {BindingParser, BoundProperty} from './binding_parser';\nimport {AttrAst, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, ReferenceAst, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from './template_ast';\nimport {PreparsedElementType, preparseElement} from './template_preparser';\n\n\n// Group 1 = \"bind-\"\n// Group 2 = \"let-\"\n// Group 3 = \"ref-/#\"\n// Group 4 = \"on-\"\n// Group 5 = \"bindon-\"\n// Group 6 = \"@\"\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n// Group 8 = identifier inside [()]\n// Group 9 = identifier inside []\n// Group 10 = identifier inside ()\nconst /** @type {?} */ BIND_NAME_REGEXP =\n    /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n\nconst /** @type {?} */ KW_BIND_IDX = 1;\nconst /** @type {?} */ KW_LET_IDX = 2;\nconst /** @type {?} */ KW_REF_IDX = 3;\nconst /** @type {?} */ KW_ON_IDX = 4;\nconst /** @type {?} */ KW_BINDON_IDX = 5;\nconst /** @type {?} */ KW_AT_IDX = 6;\nconst /** @type {?} */ IDENT_KW_IDX = 7;\nconst /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;\nconst /** @type {?} */ IDENT_PROPERTY_IDX = 9;\nconst /** @type {?} */ IDENT_EVENT_IDX = 10;\n\nconst /** @type {?} */ TEMPLATE_ELEMENT = 'template';\nconst /** @type {?} */ TEMPLATE_ATTR = 'template';\nconst /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';\nconst /** @type {?} */ CLASS_ATTR = 'class';\n\nconst /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n\n/**\n * Provides an array of {@link TemplateAstVisitor}s which will be used to transform\n * parsed templates before compilation is invoked, allowing custom expression syntax\n * and other advanced transformations.\n *\n * This is currently an internal-only feature and not meant for general use.\n */\nexport const /** @type {?} */ TEMPLATE_TRANSFORMS = new InjectionToken('TemplateTransforms');\nexport class TemplateParseError extends ParseError {\n/**\n * @param {?} message\n * @param {?} span\n * @param {?} level\n */\nconstructor(message: string, span: ParseSourceSpan, level: ParseErrorLevel) {\n    super(span, message, level);\n  }\n}\nexport class TemplateParseResult {\n/**\n * @param {?=} templateAst\n * @param {?=} usedPipes\n * @param {?=} errors\n */\nconstructor(\npublic templateAst?: TemplateAst[],\npublic usedPipes?: CompilePipeSummary[],\npublic errors?: ParseError[]) {}\n}\n\nfunction TemplateParseResult_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateParseResult.prototype.templateAst;\n/** @type {?} */\nTemplateParseResult.prototype.usedPipes;\n/** @type {?} */\nTemplateParseResult.prototype.errors;\n}\n\n@CompilerInjectable()\nexport class TemplateParser {\n/**\n * @param {?} _exprParser\n * @param {?} _schemaRegistry\n * @param {?} _htmlParser\n * @param {?} _console\n * @param {?} transforms\n */\nconstructor(\nprivate _exprParser: Parser,\nprivate _schemaRegistry: ElementSchemaRegistry,\nprivate _htmlParser: I18NHtmlParser,\nprivate _console: Console,\npublic transforms: TemplateAstVisitor[]) {}\n/**\n * @param {?} component\n * @param {?} template\n * @param {?} directives\n * @param {?} pipes\n * @param {?} schemas\n * @param {?} templateUrl\n * @return {?}\n */\nparse(\n      component: CompileDirectiveMetadata, template: string, directives: CompileDirectiveSummary[],\n      pipes: CompilePipeSummary[], schemas: SchemaMetadata[],\n      templateUrl: string): {template: TemplateAst[], pipes: CompilePipeSummary[]} {\n    const /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);\n    const /** @type {?} */ warnings = result.errors.filter(error => error.level === ParseErrorLevel.WARNING);\n    const /** @type {?} */ errors = result.errors.filter(error => error.level === ParseErrorLevel.FATAL);\n\n    if (warnings.length > 0) {\n      this._console.warn(`Template parse warnings:\\n${warnings.join('\\n')}`);\n    }\n\n    if (errors.length > 0) {\n      const /** @type {?} */ errorString = errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    return {template: result.templateAst, pipes: result.usedPipes};\n  }\n/**\n * @param {?} component\n * @param {?} template\n * @param {?} directives\n * @param {?} pipes\n * @param {?} schemas\n * @param {?} templateUrl\n * @return {?}\n */\ntryParse(\n      component: CompileDirectiveMetadata, template: string, directives: CompileDirectiveSummary[],\n      pipes: CompilePipeSummary[], schemas: SchemaMetadata[],\n      templateUrl: string): TemplateParseResult {\n    return this.tryParseHtml(\n        this.expandHtml(this._htmlParser.parse(\n            template, templateUrl, true, this.getInterpolationConfig(component))),\n        component, template, directives, pipes, schemas, templateUrl);\n  }\n/**\n * @param {?} htmlAstWithErrors\n * @param {?} component\n * @param {?} template\n * @param {?} directives\n * @param {?} pipes\n * @param {?} schemas\n * @param {?} templateUrl\n * @return {?}\n */\ntryParseHtml(\n      htmlAstWithErrors: ParseTreeResult, component: CompileDirectiveMetadata, template: string,\n      directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[],\n      templateUrl: string): TemplateParseResult {\n    let /** @type {?} */ result: TemplateAst[];\n    const /** @type {?} */ errors = htmlAstWithErrors.errors;\n    const /** @type {?} */ usedPipes: CompilePipeSummary[] = [];\n    if (htmlAstWithErrors.rootNodes.length > 0) {\n      const /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);\n      const /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);\n      const /** @type {?} */ providerViewContext =\n          new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);\n      let /** @type {?} */ interpolationConfig: InterpolationConfig;\n      if (component.template && component.template.interpolation) {\n        interpolationConfig = {\n          start: component.template.interpolation[0],\n          end: component.template.interpolation[1]\n        };\n      }\n      const /** @type {?} */ bindingParser = new BindingParser(\n          this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);\n      const /** @type {?} */ parseVisitor = new TemplateParseVisitor(\n          providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas,\n          errors);\n      result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n      errors.push(...providerViewContext.errors);\n      usedPipes.push(...bindingParser.getUsedPipes());\n    } else {\n      result = [];\n    }\n    this._assertNoReferenceDuplicationOnTemplate(result, errors);\n\n    if (errors.length > 0) {\n      return new TemplateParseResult(result, usedPipes, errors);\n    }\n\n    if (this.transforms) {\n      this.transforms.forEach(\n          (transform: TemplateAstVisitor) => { result = templateVisitAll(transform, result); });\n    }\n\n    return new TemplateParseResult(result, usedPipes, errors);\n  }\n/**\n * @param {?} htmlAstWithErrors\n * @param {?=} forced\n * @return {?}\n */\nexpandHtml(htmlAstWithErrors: ParseTreeResult, forced: boolean = false): ParseTreeResult {\n    const /** @type {?} */ errors: ParseError[] = htmlAstWithErrors.errors;\n\n    if (errors.length == 0 || forced) {\n      // Transform ICU messages to angular directives\n      const /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n      errors.push(...expandedHtmlAst.errors);\n      htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n    }\n    return htmlAstWithErrors;\n  }\n/**\n * @param {?} component\n * @return {?}\n */\ngetInterpolationConfig(component: CompileDirectiveMetadata): InterpolationConfig {\n    if (component.template) {\n      return InterpolationConfig.fromArray(component.template.interpolation);\n    }\n  }\n/**\n * \\@internal\n * @param {?} result\n * @param {?} errors\n * @return {?}\n */\n_assertNoReferenceDuplicationOnTemplate(result: TemplateAst[], errors: TemplateParseError[]):\n      void {\n    const /** @type {?} */ existingReferences: string[] = [];\n\n    result.filter(element => !!( /** @type {?} */((<any>element))).references)\n        .forEach(element => ( /** @type {?} */((<any>element))).references.forEach((reference: ReferenceAst) => {\n          const /** @type {?} */ name = reference.name;\n          if (existingReferences.indexOf(name) < 0) {\n            existingReferences.push(name);\n          } else {\n            const /** @type {?} */ error = new TemplateParseError(\n                `Reference \"#${name}\" is defined several times`, reference.sourceSpan,\n                ParseErrorLevel.FATAL);\n            errors.push(error);\n          }\n        }));\n  }\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Parser, },\n{type: ElementSchemaRegistry, },\n{type: I18NHtmlParser, },\n{type: Console, },\n{type: Array, decorators: [{ type: Optional }, { type: Inject, args: [TEMPLATE_TRANSFORMS, ] }, ]},\n];\n}\n\nfunction TemplateParser_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nTemplateParser.ctorParameters;\n/** @type {?} */\nTemplateParser.prototype._exprParser;\n/** @type {?} */\nTemplateParser.prototype._schemaRegistry;\n/** @type {?} */\nTemplateParser.prototype._htmlParser;\n/** @type {?} */\nTemplateParser.prototype._console;\n/** @type {?} */\nTemplateParser.prototype.transforms;\n}\n\nclass TemplateParseVisitor implements html.Visitor {\n  selectorMatcher = new SelectorMatcher();\n  directivesIndex = new Map<CompileDirectiveSummary, number>();\n  ngContentCount = 0;\n  contentQueryStartId: number;\n/**\n * @param {?} providerViewContext\n * @param {?} directives\n * @param {?} _bindingParser\n * @param {?} _schemaRegistry\n * @param {?} _schemas\n * @param {?} _targetErrors\n */\nconstructor(\npublic providerViewContext: ProviderViewContext, directives: CompileDirectiveSummary[],\nprivate _bindingParser: BindingParser,\nprivate _schemaRegistry: ElementSchemaRegistry,\nprivate _schemas: SchemaMetadata[],\nprivate _targetErrors: TemplateParseError[]) {\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\n    this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n    directives.forEach((directive, index) => {\n      const selector = CssSelector.parse(directive.selector);\n      this.selectorMatcher.addSelectables(selector, directive);\n      this.directivesIndex.set(directive, index);\n    });\n  }\n/**\n * @param {?} expansion\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(expansion: html.Expansion, context: any): any { return null; }\n/**\n * @param {?} expansionCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return null; }\n/**\n * @param {?} text\n * @param {?} parent\n * @return {?}\n */\nvisitText(text: html.Text, parent: ElementContext): any {\n    const /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n    const /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);\n    if (expr) {\n      return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);\n    } else {\n      return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n    }\n  }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): any {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): any { return null; }\n/**\n * @param {?} element\n * @param {?} parent\n * @return {?}\n */\nvisitElement(element: html.Element, parent: ElementContext): any {\n    const /** @type {?} */ queryStartIndex = this.contentQueryStartId;\n    const /** @type {?} */ nodeName = element.name;\n    const /** @type {?} */ preparsedElement = preparseElement(element);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE) {\n      // Skipping <script> for security reasons\n      // Skipping <style> as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n    if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n        isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      // Skipping stylesheets with either relative urls or package scheme as we already processed\n      // them in the StyleCompiler\n      return null;\n    }\n\n    const /** @type {?} */ matchableAttrs: [string, string][] = [];\n    const /** @type {?} */ elementOrDirectiveProps: BoundProperty[] = [];\n    const /** @type {?} */ elementOrDirectiveRefs: ElementOrDirectiveRef[] = [];\n    const /** @type {?} */ elementVars: VariableAst[] = [];\n    const /** @type {?} */ events: BoundEventAst[] = [];\n\n    const /** @type {?} */ templateElementOrDirectiveProps: BoundProperty[] = [];\n    const /** @type {?} */ templateMatchableAttrs: [string, string][] = [];\n    const /** @type {?} */ templateElementVars: VariableAst[] = [];\n\n    let /** @type {?} */ hasInlineTemplates = false;\n    const /** @type {?} */ attrs: AttrAst[] = [];\n    const /** @type {?} */ lcElName = splitNsName(nodeName.toLowerCase())[1];\n    const /** @type {?} */ isTemplateElement = lcElName == TEMPLATE_ELEMENT;\n\n    element.attrs.forEach(attr => {\n      const /** @type {?} */ hasBinding = this._parseAttr(\n          isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events,\n          elementOrDirectiveRefs, elementVars);\n\n      let /** @type {?} */ templateBindingsSource: string|undefined;\n      let /** @type {?} */ prefixToken: string|undefined;\n      let /** @type {?} */ normalizedName = this._normalizeAttributeName(attr.name);\n\n      if (normalizedName == TEMPLATE_ATTR) {\n        templateBindingsSource = attr.value;\n      } else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n        templateBindingsSource = attr.value;\n        prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';\n      }\n\n      const /** @type {?} */ hasTemplateBinding = isPresent(templateBindingsSource);\n      if (hasTemplateBinding) {\n        if (hasInlineTemplates) {\n          this._reportError(\n              `Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *`,\n              attr.sourceSpan);\n        }\n        hasInlineTemplates = true;\n        this._bindingParser.parseInlineTemplateBinding(\n            prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs,\n            templateElementOrDirectiveProps, templateElementVars);\n      }\n\n      if (!hasBinding && !hasTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attrs.push(this.visitAttribute(attr, null));\n        matchableAttrs.push([attr.name, attr.value]);\n      }\n    });\n\n    const /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\n    const {directives: directiveMetas, matchElement} =\n        this._parseDirectives(this.selectorMatcher, elementCssSelector);\n    const /** @type {?} */ references: ReferenceAst[] = [];\n    const /** @type {?} */ boundDirectivePropNames = new Set<string>();\n    const /** @type {?} */ directiveAsts = this._createDirectiveAsts(\n        isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps,\n        elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);\n    const /** @type {?} */ elementProps: BoundElementPropertyAst[] = this._createElementPropertyAsts(\n        element.name, elementOrDirectiveProps, boundDirectivePropNames);\n    const /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n\n    const /** @type {?} */ providerContext = new ProviderElementContext(\n        this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs,\n        references, isTemplateElement, queryStartIndex, element.sourceSpan);\n\n    const /** @type {?} */ children: TemplateAst[] = html.visitAll(\n        preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children,\n        ElementContext.create(\n            isTemplateElement, directiveAsts,\n            isTemplateElement ? parent.providerContext : providerContext));\n    providerContext.afterElement();\n    // Override the actual selector when the `ngProjectAs` attribute is provided\n    const /** @type {?} */ projectionSelector = isPresent(preparsedElement.projectAs) ?\n        CssSelector.parse(preparsedElement.projectAs)[0] :\n        elementCssSelector;\n    const /** @type {?} */ ngContentIndex = parent.findNgContentIndex(projectionSelector);\n    let /** @type {?} */ parsedElement: TemplateAst;\n\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      if (element.children && !element.children.every(_isEmptyTextNode)) {\n        this._reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n      }\n\n      parsedElement = new NgContentAst(\n          this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n    } else if (isTemplateElement) {\n      this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n      this._assertNoComponentsNorElementBindingsOnTemplate(\n          directiveAsts, elementProps, element.sourceSpan);\n\n      parsedElement = new EmbeddedTemplateAst(\n          attrs, events, references, elementVars, providerContext.transformedDirectiveAsts,\n          providerContext.transformProviders, providerContext.transformedHasViewContainer,\n          providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex,\n          element.sourceSpan);\n    } else {\n      this._assertElementExists(matchElement, element);\n      this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);\n\n      const /** @type {?} */ ngContentIndex =\n          hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n      parsedElement = new ElementAst(\n          nodeName, attrs, elementProps, events, references,\n          providerContext.transformedDirectiveAsts, providerContext.transformProviders,\n          providerContext.transformedHasViewContainer, providerContext.queryMatches, children,\n          hasInlineTemplates ? null : ngContentIndex, element.sourceSpan, element.endSourceSpan);\n\n      this._findComponentDirectives(directiveAsts)\n          .forEach(\n              componentDirectiveAst => this._validateElementAnimationInputOutputs(\n                  componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents,\n                  componentDirectiveAst.directive.template));\n\n      const /** @type {?} */ componentTemplate = providerContext.viewContext.component.template;\n      this._validateElementAnimationInputOutputs(\n          elementProps, events, componentTemplate.toSummary());\n    }\n\n    if (hasInlineTemplates) {\n      const /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;\n      const /** @type {?} */ templateCssSelector =\n          createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);\n      const {directives: templateDirectiveMetas} =\n          this._parseDirectives(this.selectorMatcher, templateCssSelector);\n      const /** @type {?} */ templateBoundDirectivePropNames = new Set<string>();\n      const /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(\n          true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [],\n          element.sourceSpan, [], templateBoundDirectivePropNames);\n      const /** @type {?} */ templateElementProps: BoundElementPropertyAst[] = this._createElementPropertyAsts(\n          element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n      this._assertNoComponentsNorElementBindingsOnTemplate(\n          templateDirectiveAsts, templateElementProps, element.sourceSpan);\n      const /** @type {?} */ templateProviderContext = new ProviderElementContext(\n          this.providerViewContext, parent.providerContext, parent.isTemplateElement,\n          templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);\n      templateProviderContext.afterElement();\n\n      parsedElement = new EmbeddedTemplateAst(\n          [], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts,\n          templateProviderContext.transformProviders,\n          templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches,\n          [parsedElement], ngContentIndex, element.sourceSpan);\n    }\n\n    return parsedElement;\n  }\n/**\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} template\n * @return {?}\n */\nprivate _validateElementAnimationInputOutputs(\n      inputs: BoundElementPropertyAst[], outputs: BoundEventAst[],\n      template: CompileTemplateSummary) {\n    const /** @type {?} */ triggerLookup = new Set<string>();\n    template.animations.forEach(entry => { triggerLookup.add(entry); });\n\n    const /** @type {?} */ animationInputs = inputs.filter(input => input.isAnimation);\n    animationInputs.forEach(input => {\n      const /** @type {?} */ name = input.name;\n      if (!triggerLookup.has(name)) {\n        this._reportError(`Couldn't find an animation entry for \"${name}\"`, input.sourceSpan);\n      }\n    });\n\n    outputs.forEach(output => {\n      if (output.isAnimation) {\n        const /** @type {?} */ found = animationInputs.find(input => input.name == output.name);\n        if (!found) {\n          this._reportError(\n              `Unable to listen on (@${output.name}.${output.phase}) because the animation trigger [@${output.name}] isn't being used on the same element`,\n              output.sourceSpan);\n        }\n      }\n    });\n  }\n/**\n * @param {?} isTemplateElement\n * @param {?} attr\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @param {?} targetEvents\n * @param {?} targetRefs\n * @param {?} targetVars\n * @return {?}\n */\nprivate _parseAttr(\n      isTemplateElement: boolean, attr: html.Attribute, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[], targetEvents: BoundEventAst[],\n      targetRefs: ElementOrDirectiveRef[], targetVars: VariableAst[]): boolean {\n    const /** @type {?} */ name = this._normalizeAttributeName(attr.name);\n    const /** @type {?} */ value = attr.value;\n    const /** @type {?} */ srcSpan = attr.sourceSpan;\n\n    const /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);\n    let /** @type {?} */ hasBinding = false;\n\n    if (bindParts !== null) {\n      hasBinding = true;\n      if (isPresent(bindParts[KW_BIND_IDX])) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n\n      } else if (bindParts[KW_LET_IDX]) {\n        if (isTemplateElement) {\n          const /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n          this._parseVariable(identifier, value, srcSpan, targetVars);\n        } else {\n          this._reportError(`\"let-\" is only supported on template elements.`, srcSpan);\n        }\n\n      } else if (bindParts[KW_REF_IDX]) {\n        const /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n        this._parseReference(identifier, value, srcSpan, targetRefs);\n\n      } else if (bindParts[KW_ON_IDX]) {\n        this._bindingParser.parseEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[KW_BINDON_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n        this._parseAssignmentEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[KW_AT_IDX]) {\n        this._bindingParser.parseLiteralAttr(\n            name, value, srcSpan, targetMatchableAttrs, targetProps);\n\n      } else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs,\n            targetProps);\n        this._parseAssignmentEvent(\n            bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[IDENT_PROPERTY_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs,\n            targetProps);\n\n      } else if (bindParts[IDENT_EVENT_IDX]) {\n        this._bindingParser.parseEvent(\n            bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n      }\n    } else {\n      hasBinding = this._bindingParser.parsePropertyInterpolation(\n          name, value, srcSpan, targetMatchableAttrs, targetProps);\n    }\n\n    if (!hasBinding) {\n      this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n    }\n\n    return hasBinding;\n  }\n/**\n * @param {?} attrName\n * @return {?}\n */\nprivate _normalizeAttributeName(attrName: string): string {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n  }\n/**\n * @param {?} identifier\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetVars\n * @return {?}\n */\nprivate _parseVariable(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan, targetVars: VariableAst[]) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    }\n\n    targetVars.push(new VariableAst(identifier, value, sourceSpan));\n  }\n/**\n * @param {?} identifier\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetRefs\n * @return {?}\n */\nprivate _parseReference(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan,\n      targetRefs: ElementOrDirectiveRef[]) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    }\n\n    targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseAssignmentEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    this._bindingParser.parseEvent(\n        `${name}Change`, `${expression}=$event`, sourceSpan, targetMatchableAttrs, targetEvents);\n  }\n/**\n * @param {?} selectorMatcher\n * @param {?} elementCssSelector\n * @return {?}\n */\nprivate _parseDirectives(selectorMatcher: SelectorMatcher, elementCssSelector: CssSelector):\n      {directives: CompileDirectiveSummary[], matchElement: boolean} {\n    // Need to sort the directives so that we get consistent results throughout,\n    // as selectorMatcher uses Maps inside.\n    // Also deduplicate directives as they might match more than one time!\n    const /** @type {?} */ directives = new Array(this.directivesIndex.size);\n    // Whether any directive selector matches on the element name\n    let /** @type {?} */ matchElement = false;\n\n    selectorMatcher.match(elementCssSelector, (selector, directive) => {\n      directives[this.directivesIndex.get(directive)] = directive;\n      matchElement = matchElement || selector.hasElementSelector();\n    });\n\n    return {\n      directives: directives.filter(dir => !!dir),\n      matchElement,\n    };\n  }\n/**\n * @param {?} isTemplateElement\n * @param {?} elementName\n * @param {?} directives\n * @param {?} props\n * @param {?} elementOrDirectiveRefs\n * @param {?} elementSourceSpan\n * @param {?} targetReferences\n * @param {?} targetBoundDirectivePropNames\n * @return {?}\n */\nprivate _createDirectiveAsts(\n      isTemplateElement: boolean, elementName: string, directives: CompileDirectiveSummary[],\n      props: BoundProperty[], elementOrDirectiveRefs: ElementOrDirectiveRef[],\n      elementSourceSpan: ParseSourceSpan, targetReferences: ReferenceAst[],\n      targetBoundDirectivePropNames: Set<string>): DirectiveAst[] {\n    const /** @type {?} */ matchedReferences = new Set<string>();\n    let /** @type {?} */ component: CompileDirectiveSummary = null;\n\n    const /** @type {?} */ directiveAsts = directives.map((directive) => {\n      const /** @type {?} */ sourceSpan = new ParseSourceSpan(\n          elementSourceSpan.start, elementSourceSpan.end,\n          `Directive ${identifierName(directive.type)}`);\n\n      if (directive.isComponent) {\n        component = directive;\n      }\n      const /** @type {?} */ directiveProperties: BoundDirectivePropertyAst[] = [];\n      let /** @type {?} */ hostProperties =\n          this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);\n      // Note: We need to check the host properties here as well,\n      // as we don't know the element name in the DirectiveWrapperCompiler yet.\n      hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);\n      const /** @type {?} */ hostEvents = this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);\n      this._createDirectivePropertyAsts(\n          directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n      elementOrDirectiveRefs.forEach((elOrDirRef) => {\n        if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n            (directive.exportAs == elOrDirRef.value)) {\n          targetReferences.push(new ReferenceAst(\n              elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));\n          matchedReferences.add(elOrDirRef.name);\n        }\n      });\n      const /** @type {?} */ contentQueryStartId = this.contentQueryStartId;\n      this.contentQueryStartId += directive.queries.length;\n      return new DirectiveAst(\n          directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId,\n          sourceSpan);\n    });\n\n    elementOrDirectiveRefs.forEach((elOrDirRef) => {\n      if (elOrDirRef.value.length > 0) {\n        if (!matchedReferences.has(elOrDirRef.name)) {\n          this._reportError(\n              `There is no directive with \"exportAs\" set to \"${elOrDirRef.value}\"`,\n              elOrDirRef.sourceSpan);\n        }\n      } else if (!component) {\n        let /** @type {?} */ refToken: CompileTokenMetadata = null;\n        if (isTemplateElement) {\n          refToken = createIdentifierToken(Identifiers.TemplateRef);\n        }\n        targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));\n      }\n    });\n    return directiveAsts;\n  }\n/**\n * @param {?} directiveProperties\n * @param {?} boundProps\n * @param {?} targetBoundDirectiveProps\n * @param {?} targetBoundDirectivePropNames\n * @return {?}\n */\nprivate _createDirectivePropertyAsts(\n      directiveProperties: {[key: string]: string}, boundProps: BoundProperty[],\n      targetBoundDirectiveProps: BoundDirectivePropertyAst[],\n      targetBoundDirectivePropNames: Set<string>) {\n    if (directiveProperties) {\n      const /** @type {?} */ boundPropsByName = new Map<string, BoundProperty>();\n      boundProps.forEach(boundProp => {\n        const /** @type {?} */ prevValue = boundPropsByName.get(boundProp.name);\n        if (!prevValue || prevValue.isLiteral) {\n          // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n          boundPropsByName.set(boundProp.name, boundProp);\n        }\n      });\n\n      Object.keys(directiveProperties).forEach(dirProp => {\n        const /** @type {?} */ elProp = directiveProperties[dirProp];\n        const /** @type {?} */ boundProp = boundPropsByName.get(elProp);\n\n        // Bindings are optional, so this binding only needs to be set up if an expression is given.\n        if (boundProp) {\n          targetBoundDirectivePropNames.add(boundProp.name);\n          if (!isEmptyExpression(boundProp.expression)) {\n            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(\n                dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n          }\n        }\n      });\n    }\n  }\n/**\n * @param {?} elementName\n * @param {?} props\n * @param {?} boundDirectivePropNames\n * @return {?}\n */\nprivate _createElementPropertyAsts(\n      elementName: string, props: BoundProperty[],\n      boundDirectivePropNames: Set<string>): BoundElementPropertyAst[] {\n    const /** @type {?} */ boundElementProps: BoundElementPropertyAst[] = [];\n\n    props.forEach((prop: BoundProperty) => {\n      if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n        boundElementProps.push(this._bindingParser.createElementPropertyAst(elementName, prop));\n      }\n    });\n    return this._checkPropertiesInSchema(elementName, boundElementProps);\n  }\n/**\n * @param {?} directives\n * @return {?}\n */\nprivate _findComponentDirectives(directives: DirectiveAst[]): DirectiveAst[] {\n    return directives.filter(directive => directive.directive.isComponent);\n  }\n/**\n * @param {?} directives\n * @return {?}\n */\nprivate _findComponentDirectiveNames(directives: DirectiveAst[]): string[] {\n    return this._findComponentDirectives(directives)\n        .map(directive => identifierName(directive.directive.type));\n  }\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _assertOnlyOneComponent(directives: DirectiveAst[], sourceSpan: ParseSourceSpan) {\n    const /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\n    if (componentTypeNames.length > 1) {\n      this._reportError(\n          `More than one component matched on this element.\\n` +\n              `Make sure that only one component's selector can match a given element.\\n` +\n              `Conflicting components: ${componentTypeNames.join(',')}`,\n          sourceSpan);\n    }\n  }\n/**\n * Make sure that non-angular tags conform to the schemas.\n * \n * Note: An element is considered an angular tag when at least one directive selector matches the\n * tag name.\n * \n * @param {?} matchElement Whether any directive has matched on the tag name\n * @param {?} element the html element\n * @return {?}\n */\nprivate _assertElementExists(matchElement: boolean, element: html.Element) {\n    const /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');\n\n    if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n      let /** @type {?} */ errorMsg = `'${elName}' is not a known element:\\n`;\n      errorMsg +=\n          `1. If '${elName}' is an Angular component, then verify that it is part of this module.\\n`;\n      if (elName.indexOf('-') > -1) {\n        errorMsg +=\n            `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n      } else {\n        errorMsg +=\n            `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n      }\n      this._reportError(errorMsg, element.sourceSpan);\n    }\n  }\n/**\n * @param {?} directives\n * @param {?} elementProps\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _assertNoComponentsNorElementBindingsOnTemplate(\n      directives: DirectiveAst[], elementProps: BoundElementPropertyAst[],\n      sourceSpan: ParseSourceSpan) {\n    const /** @type {?} */ componentTypeNames: string[] = this._findComponentDirectiveNames(directives);\n    if (componentTypeNames.length > 0) {\n      this._reportError(\n          `Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);\n    }\n    elementProps.forEach(prop => {\n      this._reportError(\n          `Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`,\n          sourceSpan);\n    });\n  }\n/**\n * @param {?} directives\n * @param {?} events\n * @return {?}\n */\nprivate _assertAllEventsPublishedByDirectives(\n      directives: DirectiveAst[], events: BoundEventAst[]) {\n    const /** @type {?} */ allDirectiveEvents = new Set<string>();\n\n    directives.forEach(directive => {\n      Object.keys(directive.directive.outputs).forEach(k => {\n        const /** @type {?} */ eventName = directive.directive.outputs[k];\n        allDirectiveEvents.add(eventName);\n      });\n    });\n\n    events.forEach(event => {\n      if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {\n        this._reportError(\n            `Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`,\n            event.sourceSpan);\n      }\n    });\n  }\n/**\n * @param {?} elementName\n * @param {?} boundProps\n * @return {?}\n */\nprivate _checkPropertiesInSchema(elementName: string, boundProps: BoundElementPropertyAst[]):\n      BoundElementPropertyAst[] {\n    // Note: We can't filter out empty expressions before this method,\n    // as we still want to validate them!\n    return boundProps.filter((boundProp) => {\n      if (boundProp.type === PropertyBindingType.Property &&\n          !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {\n        let /** @type {?} */ errorMsg =\n            `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;\n        if (elementName.startsWith('ng-')) {\n          errorMsg +=\n              `\\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +\n              `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        } else if (elementName.indexOf('-') > -1) {\n          errorMsg +=\n              `\\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` +\n              `\\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +\n              `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        }\n        this._reportError(errorMsg, boundProp.sourceSpan);\n      }\n      return !isEmptyExpression(boundProp.value);\n    });\n  }\n/**\n * @param {?} message\n * @param {?} sourceSpan\n * @param {?=} level\n * @return {?}\n */\nprivate _reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.FATAL) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n}\n\nfunction TemplateParseVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplateParseVisitor.prototype.selectorMatcher;\n/** @type {?} */\nTemplateParseVisitor.prototype.directivesIndex;\n/** @type {?} */\nTemplateParseVisitor.prototype.ngContentCount;\n/** @type {?} */\nTemplateParseVisitor.prototype.contentQueryStartId;\n/** @type {?} */\nTemplateParseVisitor.prototype.providerViewContext;\n/** @type {?} */\nTemplateParseVisitor.prototype._bindingParser;\n/** @type {?} */\nTemplateParseVisitor.prototype._schemaRegistry;\n/** @type {?} */\nTemplateParseVisitor.prototype._schemas;\n/** @type {?} */\nTemplateParseVisitor.prototype._targetErrors;\n}\n\nclass NonBindableVisitor implements html.Visitor {\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitElement(ast: html.Element, parent: ElementContext): ElementAst {\n    const /** @type {?} */ preparsedElement = preparseElement(ast);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE ||\n        preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    const /** @type {?} */ attrNameAndValues = ast.attrs.map((attr): [string, string] => [attr.name, attr.value]);\n    const /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);\n    const /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);\n    const /** @type {?} */ children: TemplateAst[] = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n    return new ElementAst(\n        ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, [], children,\n        ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n  }\n/**\n * @param {?} comment\n * @param {?} context\n * @return {?}\n */\nvisitComment(comment: html.Comment, context: any): any { return null; }\n/**\n * @param {?} attribute\n * @param {?} context\n * @return {?}\n */\nvisitAttribute(attribute: html.Attribute, context: any): AttrAst {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n/**\n * @param {?} text\n * @param {?} parent\n * @return {?}\n */\nvisitText(text: html.Text, parent: ElementContext): TextAst {\n    const /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);\n    return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n  }\n/**\n * @param {?} expansion\n * @param {?} context\n * @return {?}\n */\nvisitExpansion(expansion: html.Expansion, context: any): any { return expansion; }\n/**\n * @param {?} expansionCase\n * @param {?} context\n * @return {?}\n */\nvisitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return expansionCase; }\n}\nclass ElementOrDirectiveRef {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan) {}\n}\n\nfunction ElementOrDirectiveRef_tsickle_Closure_declarations() {\n/** @type {?} */\nElementOrDirectiveRef.prototype.name;\n/** @type {?} */\nElementOrDirectiveRef.prototype.value;\n/** @type {?} */\nElementOrDirectiveRef.prototype.sourceSpan;\n}\n\n/**\n * @param {?} classAttrValue\n * @return {?}\n */\nexport function splitClasses(classAttrValue: string): string[] {\n  return classAttrValue.trim().split(/\\s+/g);\n}\nclass ElementContext {\n/**\n * @param {?} isTemplateElement\n * @param {?} directives\n * @param {?} providerContext\n * @return {?}\n */\nstatic create(\n      isTemplateElement: boolean, directives: DirectiveAst[],\n      providerContext: ProviderElementContext): ElementContext {\n    const /** @type {?} */ matcher = new SelectorMatcher();\n    let /** @type {?} */ wildcardNgContentIndex: number = null;\n    const /** @type {?} */ component = directives.find(directive => directive.directive.isComponent);\n    if (component) {\n      const /** @type {?} */ ngContentSelectors = component.directive.template.ngContentSelectors;\n      for (let /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n        const /** @type {?} */ selector = ngContentSelectors[i];\n        if (selector === '*') {\n          wildcardNgContentIndex = i;\n        } else {\n          matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n        }\n      }\n    }\n    return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n  }\n/**\n * @param {?} isTemplateElement\n * @param {?} _ngContentIndexMatcher\n * @param {?} _wildcardNgContentIndex\n * @param {?} providerContext\n */\nconstructor(\npublic isTemplateElement: boolean,\nprivate _ngContentIndexMatcher: SelectorMatcher,\nprivate _wildcardNgContentIndex: number,\npublic providerContext: ProviderElementContext) {}\n/**\n * @param {?} selector\n * @return {?}\n */\nfindNgContentIndex(selector: CssSelector): number {\n    const /** @type {?} */ ngContentIndices: number[] = [];\n    this._ngContentIndexMatcher.match(\n        selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });\n    ngContentIndices.sort();\n    if (isPresent(this._wildcardNgContentIndex)) {\n      ngContentIndices.push(this._wildcardNgContentIndex);\n    }\n    return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n  }\n}\n\nfunction ElementContext_tsickle_Closure_declarations() {\n/** @type {?} */\nElementContext.prototype.isTemplateElement;\n/** @type {?} */\nElementContext.prototype._ngContentIndexMatcher;\n/** @type {?} */\nElementContext.prototype._wildcardNgContentIndex;\n/** @type {?} */\nElementContext.prototype.providerContext;\n}\n\n/**\n * @param {?} elementName\n * @param {?} attributes\n * @return {?}\n */\nexport function createElementCssSelector(\n    elementName: string, attributes: [string, string][]): CssSelector {\n  const /** @type {?} */ cssSelector = new CssSelector();\n  const /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];\n\n  cssSelector.setElement(elNameNoNs);\n\n  for (let /** @type {?} */ i = 0; i < attributes.length; i++) {\n    const /** @type {?} */ attrName = attributes[i][0];\n    const /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];\n    const /** @type {?} */ attrValue = attributes[i][1];\n\n    cssSelector.addAttribute(attrNameNoNs, attrValue);\n    if (attrName.toLowerCase() == CLASS_ATTR) {\n      const /** @type {?} */ classes = splitClasses(attrValue);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  }\n  return cssSelector;\n}\n\nconst /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\nconst /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();\n/**\n * @param {?} node\n * @return {?}\n */\nfunction _isEmptyTextNode(node: html.Node): boolean {\n  return node instanceof html.Text && node.value.trim().length == 0;\n}\n/**\n * @param {?} items\n * @return {?}\n */\nexport function removeSummaryDuplicates<T extends{type: CompileTypeMetadata}>(items: T[]): T[] {\n  const /** @type {?} */ map = new Map<any, T>();\n\n  items.forEach((item) => {\n    if (!map.get(item.type.reference)) {\n      map.set(item.type.reference, item);\n    }\n  });\n\n  return Array.from(map.values());\n}\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction isEmptyExpression(ast: AST): boolean {\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n  return ast instanceof EmptyExpr;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
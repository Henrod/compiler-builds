{"version":3,"sources":["../../../../../modules/@angular/compiler/src/template_parser/binding_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAA,eAAE,EAAe,MAAA,eAAA;OAGjB,EAA6B,SAAA,EAAwB,mBAAA,EAAqC,MAAA,0BAAA;OAG1F,EAAA,cAAE,EAAc,MAAA,mBAAA;OAChB,EAAA,UAAE,EAAW,eAAA,EAAiB,eAAA,EAAgB,MAAA,eAAA;OAE9C,EAAA,WAAE,EAAW,MAAA,aAAA;OACb,EAAA,YAAE,EAAa,aAAA,EAAc,MAAA,SAAA;OAE7B,EAAA,uBAAE,EAAwB,aAAA,EAAe,mBAAA,EAAqB,WAAA,EAAY,MAAA,gBAAA;AAEjF,IAAM,gBAAgB,CAAhB,wBAAA,GAA2B,GAAA,CAAI;AACrC,IAAM,gBAAgB,CAAhB,gBAAA,GAAmB,MAAA,CAAO;AAChC,IAAM,gBAAgB,CAAhB,YAAA,GAAe,OAAA,CAAQ;AAC7B,IAAM,gBAAgB,CAAhB,YAAA,GAAe,OAAA,CAAQ;AAE7B,IAAM,gBAAgB,CAAhB,mBAAA,GAAsB,UAAA,CAAW;AAEvC,OAAO,IAAI,iBAAiB,GAAQ,EAAE,CAAC;AACvC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC;AAC9B,iBAAiB,CAAC,YAAY,GAAG,CAAC,CAAC;AACnC,iBAAiB,CAAC,SAAS,GAAG,CAAC,CAAC;AAChC,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;AACzD,iBAAiB,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC;AACnE,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;AAE7D;;GAEG;AACH;IACA;;;;;OAKG;IACH,uBAPa,IAAM,EAAe,UAAY,EAAsB,IAAM,EAC7D,UAAY;QADZ,SAAA,GAAA,IAAA,CAAM;QAAe,eAAA,GAAA,UAAA,CAAY;QAAsB,SAAA,GAAA,IAAA,CAAM;QAC7D,eAAA,GAAA,UAAA,CAAY;IAAgB,CAAA;IAczC,sBAZG,oCAAA;QASH;;WAEG;aACH,cAZoB,MAAA,CAAO,IAAA,CAAK,IAAC,KAAQ,iBAAA,CAAkB,YAAC,CAAY,CAAC,CAAA;;;OAAA;IAgBzE,sBAdG,sCAAA;QAWH;;WAEG;aACH,cAdsB,MAAA,CAAO,IAAA,CAAK,IAAC,KAAQ,iBAAA,CAAkB,SAAC,CAAS,CAAC,CAAA;;;OAAA;IAexE,oBAAC;AAAD,CApBA,AAoBC,IAAA;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;AACnC,CAAC;AAED;;GAEG;AACH;IAEA;;;;;;OAMG;IACH,uBA9Bc,WAAa,EAAgB,oBAAsB,EACnD,eAAiB,EAAuB,KAA0B,EAClE,aAA0B;QAmBxC,iBAidC;QAtea,gBAAA,GAAA,WAAA,CAAa;QAAgB,yBAAA,GAAA,oBAAA,CAAsB;QACnD,oBAAA,GAAA,eAAA,CAAiB;QACjB,kBAAA,GAAA,aAAA,CAA0B;QAoBtC,gBAAW,GAzBoC,IAAI,GAAA,EAAI,CAAE;QAsCvD,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC;IAC/D,CAAC;IACH;;;;OAIG;IACH,uDApCG,GAoCH,UApCG,OAAA,EAAA,UAAA;QAoCH,iBAgBG;QAdC,EAAE,CAAC,CAAC,OApCC,CAAO,cAAC,CAAc,CAAC,CAAA;YAqC1B,IAAM,gBAAgB,CApChB,YAAA,GAA8B,EAAA,CAAG;YAqCvC,MAAM,CApCC,IAAC,CAAI,OAAC,CAAO,cAAC,CAAc,CAAC,OAAC,CAAO,UAAA,QAAC;gBAqC3C,IAAM,gBAAgB,CApChB,UAAA,GAAa,OAAA,CAAQ,cAAC,CAAc,QAAC,CAAQ,CAAC;gBAqCpD,EAAE,CAAC,CAAC,OApCO,UAAA,KAAe,QAAA,CAAS,CAAC,CAAA;oBAqClC,KAAI,CApCC,oBAAC,CAAoB,QAAC,EAAS,UAAA,EAAY,IAAA,EAAM,UAAA,EAAY,EAAA,EAAI,YAAA,CAAW,CAAC;gBAqCpF,CAAC;gBApCC,IAAA,CAAK,CAAA;oBAqCL,KAAI,CApCC,YAAC,CAqCF,0CAAuC,QApCC,qEAAQ,UAA8D,YAAU,OAAY,UAAA,MAAW,EAqC/I,UAAU,CApCC,CAAC;gBAqClB,CAAC;YACH,CAAC,CApCC,CAAC;YAqCH,MAAM,CApCC,YAAA,CAAW,GAAC,CAAG,UAAC,IAAC,IAAQ,OAAA,KAAA,CAAK,wBAAC,CAAwB,OAAC,CAAO,QAAC,EAAS,IAAA,CAAK,EAArD,CAAqD,CAAC,CAAC;QAqCzF,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,oDAxCG,GAwCH,UAxCG,OAAA,EAAA,UAAA;QAwCH,iBAgBG;QAdC,EAAE,CAAC,CAAC,OAxCC,CAAO,aAAC,CAAa,CAAC,CAAA;YAyCzB,IAAM,gBAAgB,CAxChB,iBAAA,GAAmC,EAAA,CAAG;YAyC5C,MAAM,CAxCC,IAAC,CAAI,OAAC,CAAO,aAAC,CAAa,CAAC,OAAC,CAAO,UAAA,QAAC;gBAyC1C,IAAM,gBAAgB,CAxChB,UAAA,GAAa,OAAA,CAAQ,aAAC,CAAa,QAAC,CAAQ,CAAC;gBAyCnD,EAAE,CAAC,CAAC,OAxCO,UAAA,KAAe,QAAA,CAAS,CAAC,CAAA;oBAyClC,KAAI,CAxCC,UAAC,CAAU,QAAC,EAAS,UAAA,EAAY,UAAA,EAAY,EAAA,EAAI,iBAAA,CAAgB,CAAC;gBAyCzE,CAAC;gBAxCC,IAAA,CAAK,CAAA;oBAyCL,KAAI,CAxCC,YAAC,CAyCF,kCAA+B,QAxCC,qEAAQ,UAA8D,YAAU,OAAY,UAAA,MAAW,EAyCvI,UAAU,CAxCC,CAAC;gBAyClB,CAAC;YACH,CAAC,CAxCC,CAAC;YAyCH,MAAM,CAxCC,iBAAA,CAAgB;QAyCzB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,0CA5CG,GA4CH,UA5CG,KAAA,EAAA,UAAA;QA6CC,IAAM,gBAAgB,CA5ChB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QA8C/C,IA5CI,CAAA;YA6CF,IAAM,gBAAgB,CA5ChB,GAAA,GAAM,IAAA,CAAK,WAAC,CAAW,kBAAC,CAAkB,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YA6C9F,EAAE,CAAC,CAAC,GA5CC,CAAG;gBAAC,IAAA,CAAK,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YA6CpE,IAAI,CA5CC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YA6ClC,MAAM,CA5CC,GAAA,CAAI;QA6Cb,CA5CE;QAAA,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YA6CV,IAAI,CA5CC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YA6CtC,MAAM,CA5CC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QA6CpE,CAAC;IACH,CAAC;IACH;;;;;;;;OAQG;IACH,kDApDG,GAoDH,UACM,WAAmB,EAAE,KAAa,EAAE,UAA2B,EAC/D,oBAAgC,EAAE,WAA4B,EAAE,UAAyB;QAC3F,IAAM,gBAAgB,CApDhB,QAAA,GAAW,IAAA,CAAK,sBAAC,CAAsB,WAAC,EAAY,KAAA,EAAO,UAAA,CAAW,CAAC;QAqD7E,GAAG,CAAC,CAAC,IApDC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;YAqDxC,IAAM,gBAAgB,CApDhB,OAAA,GAAU,QAAA,CAAS,CAAC,CAAC,CAAC;YAqD5B,EAAE,CAAC,CAAC,OApDC,CAAO,QAAC,CAAQ,CAAC,CAAA;gBAqDpB,UAAU,CApDC,IAAC,CAAI,IAAI,WAAA,CAAY,OAAC,CAAO,GAAC,EAAI,OAAA,CAAQ,IAAC,EAAK,UAAA,CAAW,CAAC,CAAC;YAqD1E,CAAC;YApDC,IAAA,CAAK,EAAA,CAAA,CAAA,OAAK,CAAO,UAAC,CAAU,CAAC,CAAA;gBAqD7B,IAAI,CApDC,iBAAC,CAqDF,OAAO,CApDC,GAAC,EAAI,OAAA,CAAQ,UAAC,EAAW,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAqDtF,CAAC;YApDC,IAAA,CAAK,CAAA;gBAqDL,oBAAoB,CApDC,IAAC,CAAI,CAAC,OAAC,CAAO,GAAC,EAAI,EAAA,CAAG,CAAC,CAAC;gBAqD7C,IAAI,CApDC,gBAAC,CAAgB,OAAC,CAAO,GAAC,EAAI,IAAA,EAAM,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAqD1F,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;;OAKG;IAxDA,8CAAA,GAyDH,UAzDG,WAAA,EAAA,KAAA,EAAA,UAAA;QAyDH,iBAmBG;QAjBC,IAAM,gBAAgB,CAzDhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QA2D/C,IAzDI,CAAA;YA0DF,IAAM,gBAAgB,CAzDhB,cAAA,GAAiB,IAAA,CAAK,WAAC,CAAW,qBAAC,CAAqB,WAAC,EAAY,KAAA,EAAO,UAAA,CAAW,CAAC;YA0D9F,IAAI,CAzDC,6BAAC,CAA6B,cAAC,CAAc,MAAC,EAAO,UAAA,CAAW,CAAC;YA0DtE,cAAc,CAzDC,gBAAC,CAAgB,OAAC,CAAO,UAAC,OAAC;gBA0DxC,EAAE,CAAC,CAAC,OAzDC,CAAO,UAAC,CAAU,CAAC,CAAA;oBA0DtB,KAAI,CAzDC,WAAC,CAAW,OAAC,CAAO,UAAC,EAAW,UAAA,CAAW,CAAC;gBA0DnD,CAAC;YACH,CAAC,CAzDC,CAAC;YA0DH,cAAc,CAzDC,QAAC,CAAQ,OAAC,CA0DrB,UAAC,OAzDC,IAAa,KAAA,CAAK,YAAC,CAAY,OAAC,EAAQ,UAAA,EAAY,eAAA,CAAgB,OAAC,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;YA0DvF,MAAM,CAzDC,cAAA,CAAe,gBAAC,CAAgB;QA0DzC,CAzDE;QAAA,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YA0DV,IAAI,CAzDC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YA0DtC,MAAM,CAzDC,EAAA,CAAG;QA0DZ,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IACH,wCAhEG,GAgEH,UACM,IAAY,EAAE,KAAa,EAAE,UAA2B,EAAE,oBAAgC,EAC1F,WAA4B;QAC9B,EAAE,CAAC,CAAC,iBAhEC,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YAiE3B,IAAI,GAhEG,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC;YAiEzB,EAAE,CAAC,CAAC,KAhEC,CAAK,CAAC,CAAA;gBAiET,IAAI,CAhEC,YAAC,CAiEF,0FAAwF;oBACpF,yGAAuG,EAC3G,UAAU,EAhEE,eAAA,CAAgB,KAAC,CAAK,CAAC;YAiEzC,CAAC;YACD,IAAI,CAhEC,eAAC,CAAe,IAAC,EAAK,KAAA,EAAO,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;QAiEnF,CAAC;QAhEC,IAAA,CAAK,CAAA;YAiEL,WAAW,CAhEC,IAAC,CAAI,IAAI,aAAA,CAiEjB,IAAI,EAhEE,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,KAAC,EAAM,EAAA,CAAG,EAAE,iBAAA,CAAkB,YAAC,EAiE3E,UAAU,CAhEC,CAAC,CAAC;QAiEnB,CAAC;IACH,CAAC;IACH;;;;;;;;OAQG;IACH,4CAxEG,GAwEH,UACM,IAAY,EAAE,UAAkB,EAAE,MAAe,EAAE,UAA2B,EAC9E,oBAAgC,EAAE,WAA4B;QAChE,IAAI,gBAAgB,CAxEhB,eAAA,GAAkB,KAAA,CAAM;QAyE5B,EAAE,CAAC,CAAC,IAxEC,CAAI,UAAC,CAAU,mBAAC,CAAmB,CAAC,CAAC,CAAA;YAyExC,eAAe,GAxEG,IAAA,CAAK;YAyEvB,IAAI,GAxEG,IAAA,CAAK,SAAC,CAAS,mBAAC,CAAmB,MAAC,CAAM,CAAC;QAyEpD,CAAC;QAxEC,IAAA,CAAK,EAAA,CAAA,CAAA,iBAAK,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YAyElC,eAAe,GAxEG,IAAA,CAAK;YAyEvB,IAAI,GAxEG,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC;QAyE3B,CAAC;QAED,EAAE,CAAC,CAAC,eAxEC,CAAe,CAAC,CAAA;YAyEnB,IAAI,CAxEC,eAAC,CAAe,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;QAyExF,CAAC;QAxEC,IAAA,CAAK,CAAA;YAyEL,IAAI,CAxEC,iBAAC,CAyEF,IAAI,EAxEE,IAAA,CAAK,aAAC,CAAa,UAAC,EAAW,MAAA,EAAQ,UAAA,CAAW,EAAE,UAAA,EAyE1D,oBAAoB,EAxEE,WAAA,CAAY,CAAC;QAyEzC,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IACH,kDA/EG,GA+EH,UACM,IAAY,EAAE,KAAa,EAAE,UAA2B,EAAE,oBAAgC,EAC1F,WAA4B;QAC9B,IAAM,gBAAgB,CA/EhB,IAAA,GAAO,IAAA,CAAK,kBAAC,CAAkB,KAAC,EAAM,UAAA,CAAW,CAAC;QAgFxD,EAAE,CAAC,CAAC,IA/EC,CAAI,CAAC,CAAA;YAgFR,IAAI,CA/EC,iBAAC,CAAiB,IAAC,EAAK,IAAA,EAAM,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAgFlF,MAAM,CA/EC,IAAA,CAAK;QAgFd,CAAC;QACD,MAAM,CA/EC,KAAA,CAAM;IAgFf,CAAC;IACH;;;;;;;OAOG;IArFA,yCAAA,GAsFH,UACM,IAAY,EAAE,GAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,WAA4B;QAChE,oBAAoB,CAtFC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QAuF9C,WAAW,CAtFC,IAAC,CAAI,IAAI,aAAA,CAAc,IAAC,EAAK,GAAA,EAAK,iBAAA,CAAkB,OAAC,EAAQ,UAAA,CAAW,CAAC,CAAC;IAuFxF,CAAC;IACH;;;;;;;OAOG;IA5FA,uCAAA,GA6FH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,WAA4B;QAChE,oEAAoE;QACpE,oEAAoE;QACpE,0EAA0E;QAC1E,IAAM,gBAAgB,CA7FhB,GAAA,GAAM,IAAA,CAAK,aAAC,CAAa,UAAC,IAAa,MAAA,EAAQ,KAAA,EAAO,UAAA,CAAW,CAAC;QA8FxE,oBAAoB,CA7FC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QA8F9C,WAAW,CA7FC,IAAC,CAAI,IAAI,aAAA,CAAc,IAAC,EAAK,GAAA,EAAK,iBAAA,CAAkB,SAAC,EAAU,UAAA,CAAW,CAAC,CAAC;IA8F1F,CAAC;IACH;;;;;OAKG;IAjGA,qCAAA,GAkGH,UAlGG,KAAA,EAAA,aAAA,EAAA,UAAA;QAoGC,IAAM,gBAAgB,CAlGhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QAoG/C,IAlGI,CAAA;YAmGF,IAAM,gBAAgB,CAlGhB,GAAA,GAAM,aAAA;gBAmGR,IAAI,CAlGC,WAAC,CAAW,kBAAC,CAAkB,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB;gBAmGjF,IAAI,CAlGC,WAAC,CAAW,YAAC,CAAY,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YAmGhF,EAAE,CAAC,CAAC,GAlGC,CAAG;gBAAC,IAAA,CAAK,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YAmGpE,IAAI,CAlGC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YAmGlC,MAAM,CAlGC,GAAA,CAAI;QAmGb,CAlGE;QAAA,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YAmGV,IAAI,CAlGC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YAmGtC,MAAM,CAlGC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QAmGpE,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,gDAtGG,GAsGH,UAtGG,eAAA,EAAA,SAAA;QAwGC,EAAE,CAAC,CAAC,SAtGC,CAAS,WAAC,CAAW,CAAC,CAAA;YAuGzB,MAAM,CAtGC,IAAI,uBAAA,CAuGP,SAAS,CAtGC,IAAC,EAAK,mBAAA,CAAoB,SAAC,EAAU,eAAA,CAAgB,IAAC,EAAK,KAAA,EAuGrE,SAAS,CAtGC,UAAC,EAAW,IAAA,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;QAuGxD,CAAC;QAED,IAAI,gBAAgB,CAtGhB,IAAA,GAAe,IAAA,CAAK;QAuGxB,IAAI,gBAAgB,CAtGhB,WAAa,CAAoB;QAuGrC,IAAI,gBAAgB,CAtGhB,iBAAA,GAA4B,IAAA,CAAK;QAuGrC,IAAM,gBAAgB,CAtGhB,KAAA,GAAQ,SAAA,CAAU,IAAC,CAAI,KAAC,CAAK,wBAAC,CAAwB,CAAC;QAuG7D,IAAI,gBAAgB,CAtGhB,gBAAkC,CAAE;QAwGxC,4DAA4D;QAC5D,EAAE,CAAC,CAAC,KAtGC,CAAK,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YAuGpB,EAAE,CAAC,CAAC,KAtGC,CAAK,CAAC,CAAC,IAAI,gBAAA,CAAiB,CAAC,CAAA;gBAuGhC,iBAAiB,GAtGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBAuG7B,IAAI,CAtGC,gCAAC,CAAgC,iBAAC,EAAkB,SAAA,CAAU,UAAC,EAAW,IAAA,CAAK,CAAC;gBAuGrF,gBAAgB,GAtGG,4BAAA,CAuGf,IAAI,CAtGC,eAAC,EAAgB,eAAA,EAAiB,iBAAA,EAAmB,IAAA,CAAK,CAAC;gBAwGpE,IAAM,gBAAgB,CAtGhB,cAAA,GAAiB,iBAAA,CAAkB,OAAC,CAAO,GAAC,CAAG,CAAC;gBAuGtD,EAAE,CAAC,CAAC,cAtGC,GAAgB,CAAA,CAAE,CAAC,CAAC,CAAA;oBAuGvB,IAAM,gBAAgB,CAtGhB,EAAA,GAAK,iBAAA,CAAkB,SAAC,CAAS,CAAC,EAAE,cAAA,CAAe,CAAC;oBAuG1D,IAAM,gBAAgB,CAtGhB,MAAA,GAAO,iBAAA,CAAkB,SAAC,CAAS,cAAC,GAAgB,CAAA,CAAE,CAAC;oBAuG7D,iBAAiB,GAtGG,cAAA,CAAe,EAAC,EAAG,MAAA,CAAK,CAAC;gBAuG/C,CAAC;gBAED,WAAW,GAtGG,mBAAA,CAAoB,SAAC,CAAS;YAuG9C,CAAC;YAtGC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,CAAK,CAAC,CAAC,IAAI,YAAA,CAAa,CAAC,CAAA;gBAuGnC,iBAAiB,GAtGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBAuG7B,WAAW,GAtGG,mBAAA,CAAoB,KAAC,CAAK;gBAuGxC,gBAAgB,GAtGG,CAAA,eAAE,CAAe,IAAC,CAAI,CAAC;YAuG5C,CAAC;YAtGC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,CAAK,CAAC,CAAC,IAAI,YAAA,CAAa,CAAC,CAAA;gBAuGnC,IAAI,GAtGG,KAAA,CAAM,MAAC,GAAQ,CAAA,GAAI,KAAA,CAAM,CAAC,CAAC,GAAG,IAAA,CAAK;gBAuG1C,iBAAiB,GAtGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBAuG7B,WAAW,GAtGG,mBAAA,CAAoB,KAAC,CAAK;gBAuGxC,gBAAgB,GAtGG,CAAA,eAAE,CAAe,KAAC,CAAK,CAAC;YAuG7C,CAAC;QACH,CAAC;QAED,oDAAoD;QACpD,EAAE,CAAC,CAAC,iBAtGC,KAAqB,IAAA,CAAK,CAAC,CAAA;YAuG9B,iBAAiB,GAtGG,IAAA,CAAK,eAAC,CAAe,iBAAC,CAAiB,SAAC,CAAS,IAAC,CAAI,CAAC;YAuG3E,gBAAgB,GAtGG,4BAAA,CAuGf,IAAI,CAtGC,eAAC,EAAgB,eAAA,EAAiB,iBAAA,EAAmB,KAAA,CAAM,CAAC;YAuGrE,WAAW,GAtGG,mBAAA,CAAoB,QAAC,CAAQ;YAuG3C,IAAI,CAtGC,gCAAC,CAAgC,iBAAC,EAAkB,SAAA,CAAU,UAAC,EAAW,KAAA,CAAM,CAAC;QAuGxF,CAAC;QAED,MAAM,CAtGC,IAAI,uBAAA,CAuGP,iBAAiB,EAtGE,WAAA,EAAa,gBAAA,CAAiB,MAAC,KAAU,CAAA,GAAI,gBAAA,CAAiB,CAAC,CAAC,GAAG,IAAA,EAuGtF,gBAAgB,CAtGC,MAAC,GAAQ,CAAA,EAAG,SAAA,CAAU,UAAC,EAAW,IAAA,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;IAuGrF,CAAC;IACH;;;;;;;OAOG;IACH,kCA7GG,GA6GH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,YAA6B;QACjE,EAAE,CAAC,CAAC,iBA7GC,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YA8G3B,IAAI,GA7GG,IAAA,CAAK,MAAC,CAAM,CAAC,CAAC,CAAC;YA8GtB,IAAI,CA7GC,oBAAC,CAAoB,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,YAAA,CAAa,CAAC;QA8GxE,CAAC;QA7GC,IAAA,CAAK,CAAA;YA8GL,IAAI,CA7GC,WAAC,CAAW,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,oBAAA,EAAsB,YAAA,CAAa,CAAC;QA8GrF,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IAlHA,4CAAA,GAmHH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,YAA6B;QAC/B,IAAM,gBAAgB,CAnHhB,OAAA,GAAU,aAAA,CAAc,IAAC,EAAK,CAAA,IAAE,EAAK,EAAA,CAAG,CAAC,CAAC;QAoHhD,IAAM,gBAAgB,CAnHhB,SAAA,GAAY,OAAA,CAAQ,CAAC,CAAC,CAAC;QAoH7B,IAAM,gBAAgB,CAnHhB,KAAA,GAAQ,OAAA,CAAQ,CAAC,CAAC,CAAC,WAAC,EAAW,CAAE;QAoHvC,EAAE,CAAC,CAAC,KAnHC,CAAK,CAAC,CAAA;YAoHT,MAAM,CAAC,CAAC,KAnHC,CAAK,CAAC,CAAA;gBAoHb,KAnHK,OAAA,CAAQ;gBAoHb,KAnHK,MAAA;oBAoHH,IAAM,gBAAgB,CAnHhB,GAAA,GAAM,IAAA,CAAK,YAAC,CAAY,UAAC,EAAW,UAAA,CAAW,CAAC;oBAoHtD,YAAY,CAnHC,IAAC,CAAI,IAAI,aAAA,CAAc,SAAC,EAAU,IAAA,EAAM,KAAA,EAAO,GAAA,EAAK,UAAA,CAAW,CAAC,CAAC;oBAoH9E,KAAK,CAAC;gBAER;oBACE,IAAI,CAnHC,YAAC,CAoHF,iDAA8C,KAnHC,kBAAK,SAAW,4CAAS,EAoHxE,UAAU,CAnHC,CAAC;oBAoHhB,KAAK,CAAC;YACV,CAAC;QACH,CAAC;QAnHC,IAAA,CAAK,CAAA;YAoHL,IAAI,CAnHC,YAAC,CAoHF,0CAAwC,SAnHC,8EAAS,EAoHlD,UAAU,CAnHC,CAAC;QAoHlB,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IAzHA,mCAAA,GA0HH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,YAA6B;QACjE,mCAAmC;QACnC,IAAA,qCA1H4D,EAAtD,cAAE,EAAO,iBAAA,CAA8C;QA2H7D,IAAM,gBAAgB,CA1HhB,GAAA,GAAM,IAAA,CAAK,YAAC,CAAY,UAAC,EAAW,UAAA,CAAW,CAAC;QA2HtD,oBAAoB,CA1HC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QA2H9C,YAAY,CA1HC,IAAC,CAAI,IAAI,aAAA,CAAc,SAAC,EAAU,MAAA,EAAQ,IAAA,EAAM,GAAA,EAAK,UAAA,CAAW,CAAC,CAAC;QA2H/E,mDAAmD;QACnD,oDAAoD;IACtD,CAAC;IACH;;;;OAIG;IA7HA,oCAAA,GA8HH,UA9HG,KAAA,EAAA,UAAA;QA+HC,IAAM,gBAAgB,CA9HhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QAgI/C,IA9HI,CAAA;YA+HF,IAAM,gBAAgB,CA9HhB,GAAA,GAAM,IAAA,CAAK,WAAC,CAAW,WAAC,CAAW,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YA+HvF,EAAE,CAAC,CAAC,GA9HC,CAAG,CAAC,CAAA;gBA+HP,IAAI,CA9HC,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YA+H7D,CAAC;YACD,EAAE,CAAC,CAAC,CA9HC,GAAC,IAAM,GAAA,CAAI,GAAC,YAAc,SAAA,CAAU,CAAC,CAAA;gBA+HxC,IAAI,CA9HC,YAAC,CAAY,mCAAC,EAAoC,UAAA,CAAW,CAAC;gBA+HnE,MAAM,CA9HC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;YA+HpE,CAAC;YACD,IAAI,CA9HC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YA+HlC,MAAM,CA9HC,GAAA,CAAI;QA+Hb,CA9HE;QAAA,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YA+HV,IAAI,CA9HC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YA+HtC,MAAM,CA9HC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QA+HpE,CAAC;IACH,CAAC;IACH;;;;;OAKG;IAlIA,oCAAA,GAmIH,UACM,OAAe,EAAE,UAA2B,EAC5C,KAA8C;QAA9C,qBAA8C,GAA9C,QAAyB,eAAe,CAAC,KAAK;QAChD,IAAI,CAnIC,aAAC,CAAa,IAAC,CAAI,IAAI,UAAA,CAAW,UAAC,EAAW,OAAA,EAAS,KAAA,CAAM,CAAC,CAAC;IAoItE,CAAC;IACH;;;;OAIG;IAtIA,qDAAA,GAuIH,UAvIG,MAAA,EAAA,UAAA;QAwIC,GAAG,CAAC,CAvIgB,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA,CAAO;YAuItB,IAvIM,KAAA,eAAA;YAwIT,IAAI,CAvIC,YAAC,CAAY,KAAC,CAAK,OAAC,EAAQ,UAAA,CAAW,CAAC;SAwI9C;IACH,CAAC;IACH;;;;OAIG;IA1IA,mCAAA,GA2IH,UA3IG,GAAA,EAAA,UAAA;QA2IH,iBAaG;QAZC,EAAE,CAAC,CAAC,GA3IC,CAAG,CAAC,CAAA;YA4IP,IAAM,gBAAgB,CA3IhB,SAAA,GAAY,IAAI,aAAA,EAAc,CAAE;YA4ItC,GAAG,CA3IC,KAAC,CAAK,SAAC,CAAS,CAAC;YA4IrB,SAAS,CA3IC,KAAC,CAAK,OAAC,CAAO,UAAC,GAAC,EAAI,QAAA;gBA4I5B,EAAE,CAAC,CAAC,CA3IC,KAAC,CAAI,WAAC,CAAW,GAAC,CAAG,QAAC,CAAQ,CAAC,CAAC,CAAA;oBA4InC,KAAI,CA3IC,YAAC,CA4IF,eAAa,QA3IC,yBAAQ,EA4ItB,IA3II,eAAA,CA4IA,UAAU,CA3IC,KAAC,CAAK,MAAC,CAAM,GAAC,CAAG,IAAC,CAAI,KAAC,CAAK,EAAE,UAAA,CAAW,KAAC,CAAK,MAAC,CAAM,GAAC,CAAG,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAC;gBA4I3F,CAAC;YACH,CAAC,CA3IC,CAAC;QA4IL,CAAC;IACH,CAAC;IACH;;;;;OAKG;IAzIA,wDAAA,GA0IH,UACM,QAAgB,EAAE,UAA2B,EAAE,MAAe;QAChE,IAAM,gBAAgB,CA1IhB,MAAA,GAAS,MAAA,GAAS,IAAA,CAAK,eAAC,CAAe,iBAAC,CAAiB,QAAC,CAAQ;YA2IhD,IAAI,CA1IC,eAAC,CAAe,gBAAC,CAAgB,QAAC,CAAQ,CAAC;QA2IxE,EAAE,CAAC,CAAC,MA1IC,CAAM,KAAC,CAAK,CAAC,CAAA;YA2IhB,IAAI,CA1IC,YAAC,CAAY,MAAC,CAAM,GAAC,EAAI,UAAA,EAAY,eAAA,CAAgB,KAAC,CAAK,CAAC;QA2InE,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAjdA,AAidC,IAAA;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;IACpC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;IACpC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC7C,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC;IACxC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC;AACtC,CAAC;AAED;IAvJC,iCAAA;IAuJD;QAvJC,8BAAA;QAwJC,UAAK,GAvJG,IAAI,GAAA,EAAwB,CAAG;IAmKzC,CAAC;IAXD;;;;OAIG;IACH,iCA5JG,GA4JH,UA5JG,GAAA,EAAA,OAAA;QA6JC,IAAI,CA5JC,KAAC,CAAK,GAAC,CAAG,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,CAAC;QA6J9B,GAAG,CA5JC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QA6JpB,IAAI,CA5JC,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;QA6JjC,MAAM,CA5JC,IAAA,CAAK;IA6Jd,CAAC;IACH,oBAAC;AAAD,CAbA,AAaC,CApKA,mBAAA,GAoKA;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC;AAED;;;GAGG;AACH,2BArKC,IAAA;IAsKC,MAAM,CArKC,IAAA,CAAK,CAAC,CAAC,IAAI,GAAA,CAAI;AAsKxB,CAAC;AACD;;;;;;GAMG;AACH,6CACI,QAA+B,EAAE,QAAgB,EAAE,QAAgB,EACnE,WAAoB;IACtB,IAAM,gBAAgB,CA3KhB,IAAA,GAA0B,EAAA,CAAG;IA4KnC,WAAW,CA3KC,KAAC,CAAK,QAAC,CAAQ,CAAC,OAAC,CAAO,UAAC,QAAC;QA4KpC,IAAM,gBAAgB,CA3KhB,YAAA,GAAe,QAAA,CAAS,OAAC,GAAS,CAAA,QAAE,CAAQ,OAAC,CAAO,GAAG,QAAA,CAAS,oBAAC,EAAoB,CAAE;QA4K7F,IAAM,gBAAgB,CA3KhB,eAAA,GA4KF,IA3KI,GAAA,CAAI,QAAC,CAAQ,YAAC,CAAY,MAAC,CAAM,UAAA,QAAC,IAAW,OAAA,QAAA,CAAS,iBAAC,EAAiB,EAA3B,CAA2B,CAAE;aA4KjE,GA3KC,CAAG,UAAC,QAAC,IAAY,OAAA,QAAA,CAAS,OAAC,EAAV,CAAU,CAAO,CAAC,CAAC;QA4KtD,IAAM,gBAAgB,CA3KhB,oBAAA,GA4KF,YAAY,CA3KC,MAAC,CAAM,UAAA,WAAC,IAAc,OAAA,CAAA,eAAE,CAAe,GAAC,CAAG,WAAC,CAAW,EAAjC,CAAiC,CAAC,CAAC;QA6K1E,IAAI,CA3KC,IAAC,OA2KN,IAAI,EA3KO,oBAAG,CAAoB,GAAC,CA4K/B,UAAA,WAAW,IA3KI,OAAA,QAAA,CAAS,eAAC,CAAe,WAAC,EAAY,QAAA,EAAU,WAAA,CAAY,EAA5D,CAA4D,CAAC,CAAC,CAAC;IA4KpF,CAAC,CA3KC,CAAC;IA4KH,MAAM,CA3KC,IAAA,CAAK,MAAC,KAAU,CAAA,GAAI,CAAA,eAAE,CAAe,IAAC,CAAI,GAAG,KAAA,CAAM,IAAC,CAAI,IAAI,GAAA,CAAI,IAAC,CAAI,CAAC,CAAC,IAAC,EAAI,CAAE;AA4KvF,CAAC","file":"binding_parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core';\n\nimport {CompileDirectiveSummary, CompilePipeSummary} from '../compile_metadata';\nimport {ASTWithSource, BindingPipe, EmptyExpr, ParserError, RecursiveAstVisitor, TemplateBinding} from '../expression_parser/ast';\nimport {Parser} from '../expression_parser/parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {mergeNsAndName} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {CssSelector} from '../selector';\nimport {splitAtColon, splitAtPeriod} from '../util';\n\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType, VariableAst} from './template_ast';\n\nconst /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';\nconst /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';\nconst /** @type {?} */ CLASS_PREFIX = 'class';\nconst /** @type {?} */ STYLE_PREFIX = 'style';\n\nconst /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';\nexport type BoundPropertyType = number;\nexport let BoundPropertyType: any = {};\nBoundPropertyType.DEFAULT = 0;\nBoundPropertyType.LITERAL_ATTR = 1;\nBoundPropertyType.ANIMATION = 2;\nBoundPropertyType[BoundPropertyType.DEFAULT] = \"DEFAULT\";\nBoundPropertyType[BoundPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\nBoundPropertyType[BoundPropertyType.ANIMATION] = \"ANIMATION\";\n\n/**\n * Represents a parsed property.\n */\nexport class BoundProperty {\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} type\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic expression: ASTWithSource,\npublic type: BoundPropertyType,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @return {?}\n */\nget isLiteral() { return this.type === BoundPropertyType.LITERAL_ATTR; }\n/**\n * @return {?}\n */\nget isAnimation() { return this.type === BoundPropertyType.ANIMATION; }\n}\n\nfunction BoundProperty_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundProperty.prototype.name;\n/** @type {?} */\nBoundProperty.prototype.expression;\n/** @type {?} */\nBoundProperty.prototype.type;\n/** @type {?} */\nBoundProperty.prototype.sourceSpan;\n}\n\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport class BindingParser {\n  pipesByName: Map<string, CompilePipeSummary> = new Map();\n/**\n * @param {?} _exprParser\n * @param {?} _interpolationConfig\n * @param {?} _schemaRegistry\n * @param {?} pipes\n * @param {?} _targetErrors\n */\nconstructor(\nprivate _exprParser: Parser,\nprivate _interpolationConfig: InterpolationConfig,\nprivate _schemaRegistry: ElementSchemaRegistry, pipes: CompilePipeSummary[],\nprivate _targetErrors: ParseError[]) {\n    pipes.forEach(pipe => this.pipesByName.set(pipe.name, pipe));\n  }\n/**\n * @param {?} dirMeta\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostPropertyAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan):\n      BoundElementPropertyAst[] {\n    if (dirMeta.hostProperties) {\n      const /** @type {?} */ boundProps: BoundProperty[] = [];\n      Object.keys(dirMeta.hostProperties).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostProperties[propName];\n        if (typeof expression === 'string') {\n          this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);\n        } else {\n          this._reportError(\n              `Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return boundProps.map((prop) => this.createElementPropertyAst(dirMeta.selector, prop));\n    }\n  }\n/**\n * @param {?} dirMeta\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostEventAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan):\n      BoundEventAst[] {\n    if (dirMeta.hostListeners) {\n      const /** @type {?} */ targetEventAsts: BoundEventAst[] = [];\n      Object.keys(dirMeta.hostListeners).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostListeners[propName];\n        if (typeof expression === 'string') {\n          this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);\n        } else {\n          this._reportError(\n              `Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return targetEventAsts;\n    }\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nparseInterpolation(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @param {?} targetVars\n * @return {?}\n */\nparseInlineTemplateBinding(\n      prefixToken: string, value: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[], targetVars: VariableAst[]) {\n    const /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n      const /** @type {?} */ binding = bindings[i];\n      if (binding.keyIsVar) {\n        targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\n      } else if (binding.expression) {\n        this._parsePropertyAst(\n            binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetMatchableAttrs.push([binding.key, '']);\n        this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n      }\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseTemplateBindings(prefixToken: string, value: string, sourceSpan: ParseSourceSpan):\n      TemplateBinding[] {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\n      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n      bindingsResult.templateBindings.forEach((binding) => {\n        if (binding.expression) {\n          this._checkPipes(binding.expression, sourceSpan);\n        }\n      });\n      bindingsResult.warnings.forEach(\n          (warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n      return bindingsResult.templateBindings;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return [];\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparseLiteralAttr(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substring(1);\n      if (value) {\n        this._reportError(\n            `Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`,\n            sourceSpan, ParseErrorLevel.FATAL);\n      }\n      this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      targetProps.push(new BoundProperty(\n          name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR,\n          sourceSpan));\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} isHost\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyBinding(\n      name: string, expression: string, isHost: boolean, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    let /** @type {?} */ isAnimationProp = false;\n    if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n      isAnimationProp = true;\n      name = name.substring(ANIMATE_PROP_PREFIX.length);\n    } else if (_isAnimationLabel(name)) {\n      isAnimationProp = true;\n      name = name.substring(1);\n    }\n\n    if (isAnimationProp) {\n      this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      this._parsePropertyAst(\n          name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan,\n          targetMatchableAttrs, targetProps);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyInterpolation(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]): boolean {\n    const /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\n    if (expr) {\n      this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} name\n * @param {?} ast\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parsePropertyAst(\n      name: string, ast: ASTWithSource, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parseAnimation(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    // This will occur when a @trigger is not paired with an expression.\n    // For animations it is valid to not have an expression since */void\n    // states will be applied by angular when the element is attached/detached\n    const /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\n  }\n/**\n * @param {?} value\n * @param {?} isHostBinding\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseBinding(value: string, isHostBinding: boolean, sourceSpan: ParseSourceSpan):\n      ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = isHostBinding ?\n          this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n          this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} elementSelector\n * @param {?} boundProp\n * @return {?}\n */\ncreateElementPropertyAst(elementSelector: string, boundProp: BoundProperty):\n      BoundElementPropertyAst {\n    if (boundProp.isAnimation) {\n      return new BoundElementPropertyAst(\n          boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, false,\n          boundProp.expression, null, boundProp.sourceSpan);\n    }\n\n    let /** @type {?} */ unit: string = null;\n    let /** @type {?} */ bindingType: PropertyBindingType;\n    let /** @type {?} */ boundPropertyName: string = null;\n    const /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n    let /** @type {?} */ securityContexts: SecurityContext[];\n\n    // Check check for special cases (prefix style, attr, class)\n    if (parts.length > 1) {\n      if (parts[0] == ATTRIBUTE_PREFIX) {\n        boundPropertyName = parts[1];\n        this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n        securityContexts = calcPossibleSecurityContexts(\n            this._schemaRegistry, elementSelector, boundPropertyName, true);\n\n        const /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\n        if (nsSeparatorIdx > -1) {\n          const /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\n          const /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);\n          boundPropertyName = mergeNsAndName(ns, name);\n        }\n\n        bindingType = PropertyBindingType.Attribute;\n      } else if (parts[0] == CLASS_PREFIX) {\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Class;\n        securityContexts = [SecurityContext.NONE];\n      } else if (parts[0] == STYLE_PREFIX) {\n        unit = parts.length > 2 ? parts[2] : null;\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Style;\n        securityContexts = [SecurityContext.STYLE];\n      }\n    }\n\n    // If not a special case, use the full property name\n    if (boundPropertyName === null) {\n      boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n      securityContexts = calcPossibleSecurityContexts(\n          this._schemaRegistry, elementSelector, boundPropertyName, false);\n      bindingType = PropertyBindingType.Property;\n      this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n    }\n\n    return new BoundElementPropertyAst(\n        boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null,\n        securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nparseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substr(1);\n      this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n    } else {\n      this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseAnimationEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetEvents: BoundEventAst[]) {\n    const /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\n    const /** @type {?} */ eventName = matches[0];\n    const /** @type {?} */ phase = matches[1].toLowerCase();\n    if (phase) {\n      switch (phase) {\n        case 'start':\n        case 'done':\n          const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n          targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\n          break;\n\n        default:\n          this._reportError(\n              `The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`,\n              sourceSpan);\n          break;\n      }\n    } else {\n      this._reportError(\n          `The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`,\n          sourceSpan);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    // long format: 'target: eventName'\n    const [target, eventName] = splitAtColon(name, [null, name]);\n    const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\n    // Don't detect directives for event names for now,\n    // so don't add the event name to the matchableAttrs\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseAction(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n      if (ast) {\n        this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      }\n      if (!ast || ast.ast instanceof EmptyExpr) {\n        this._reportError(`Empty expressions are not allowed`, sourceSpan);\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n      }\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} message\n * @param {?} sourceSpan\n * @param {?=} level\n * @return {?}\n */\nprivate _reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.FATAL) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n/**\n * @param {?} errors\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _reportExpressionParserErrors(errors: ParserError[], sourceSpan: ParseSourceSpan) {\n    for (const /** @type {?} */ error of errors) {\n      this._reportError(error.message, sourceSpan);\n    }\n  }\n/**\n * @param {?} ast\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _checkPipes(ast: ASTWithSource, sourceSpan: ParseSourceSpan) {\n    if (ast) {\n      const /** @type {?} */ collector = new PipeCollector();\n      ast.visit(collector);\n      collector.pipes.forEach((ast, pipeName) => {\n        if (!this.pipesByName.has(pipeName)) {\n          this._reportError(\n              `The pipe '${pipeName}' could not be found`,\n              new ParseSourceSpan(\n                  sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n        }\n      });\n    }\n  }\n/**\n * @param {?} propName the name of the property / attribute\n * @param {?} sourceSpan\n * @param {?} isAttr true when binding to an attribute\n * @return {?}\n */\nprivate _validatePropertyOrAttributeName(\n      propName: string, sourceSpan: ParseSourceSpan, isAttr: boolean): void {\n    const /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n                            this._schemaRegistry.validateProperty(propName);\n    if (report.error) {\n      this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);\n    }\n  }\n}\n\nfunction BindingParser_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingParser.prototype.pipesByName;\n/** @type {?} */\nBindingParser.prototype._exprParser;\n/** @type {?} */\nBindingParser.prototype._interpolationConfig;\n/** @type {?} */\nBindingParser.prototype._schemaRegistry;\n/** @type {?} */\nBindingParser.prototype._targetErrors;\n}\n\nexport class PipeCollector extends RecursiveAstVisitor {\n  pipes = new Map<string, BindingPipe>();\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    this.pipes.set(ast.name, ast);\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n}\n\nfunction PipeCollector_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeCollector.prototype.pipes;\n}\n\n/**\n * @param {?} name\n * @return {?}\n */\nfunction _isAnimationLabel(name: string): boolean {\n  return name[0] == '@';\n}\n/**\n * @param {?} registry\n * @param {?} selector\n * @param {?} propName\n * @param {?} isAttribute\n * @return {?}\n */\nexport function calcPossibleSecurityContexts(\n    registry: ElementSchemaRegistry, selector: string, propName: string,\n    isAttribute: boolean): SecurityContext[] {\n  const /** @type {?} */ ctxs: SecurityContext[] = [];\n  CssSelector.parse(selector).forEach((selector) => {\n    const /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    const /** @type {?} */ notElementNames =\n        new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n                    .map((selector) => selector.element));\n    const /** @type {?} */ possibleElementNames =\n        elementNames.filter(elementName => !notElementNames.has(elementName));\n\n    ctxs.push(...possibleElementNames.map(\n        elementName => registry.securityContext(elementName, propName, isAttribute)));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n"]}
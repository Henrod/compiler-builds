{"version":3,"sources":["../../../../../modules/@angular/compiler/src/template_parser/binding_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH,OAAO,EAAA,eAAE,EAAe,MAAA,eAAA,CAAA;AAGxB,OAAO,EAA6B,SAAA,EAAwB,mBAAA,EAAqC,MAAA,0BAAA,CAAA;AAGjG,OAAO,EAAA,cAAE,EAAc,MAAA,mBAAA,CAAA;AACvB,OAAO,EAAA,UAAE,EAAW,eAAA,EAAiB,eAAA,EAAgB,MAAA,eAAA,CAAA;AAErD,OAAO,EAAA,WAAE,EAAW,MAAA,aAAA,CAAA;AACpB,OAAO,EAAA,YAAE,EAAa,aAAA,EAAc,MAAA,SAAA,CAAA;AAEpC,OAAO,EAAA,uBAAE,EAAwB,aAAA,EAAe,mBAAA,EAAqB,WAAA,EAAY,MAAA,gBAAA,CAAA;AAEjF,IAAM,gBAAgB,CAAhB,wBAAA,GAA2B,GAAA,CAAI;AACrC,IAAM,gBAAgB,CAAhB,gBAAA,GAAmB,MAAA,CAAO;AAChC,IAAM,gBAAgB,CAAhB,YAAA,GAAe,OAAA,CAAQ;AAC7B,IAAM,gBAAgB,CAAhB,YAAA,GAAe,OAAA,CAAQ;AAE7B,IAAM,gBAAgB,CAAhB,mBAAA,GAAsB,UAAA,CAAW;AAEvC,MAAM,CAAC,IAAI,iBAAiB,GAAQ,EAAE,CAAC;AACvC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC;AAC9B,iBAAiB,CAAC,YAAY,GAAG,CAAC,CAAC;AACnC,iBAAiB,CAAC,SAAS,GAAG,CAAC,CAAC;AAChC,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;AACzD,iBAAiB,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC;AACnE,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;AAE7D;;GAEG;AACH;IACA;;;;;OAKG;IACH,uBAPa,IAAM,EAAe,UAAY,EAAsB,IAAM,EAC7D,UAAY;QADZ,SAAA,GAAA,IAAA,CAAM;QAAe,eAAA,GAAA,UAAA,CAAY;QAAsB,SAAA,GAAA,IAAA,CAAM;QAC7D,eAAA,GAAA,UAAA,CAAY;IAAgB,CAAA;IAczC,sBAZG,oCAAA;QASH;;WAEG;aACH,cAZoB,MAAA,CAAO,IAAA,CAAK,IAAC,KAAQ,iBAAA,CAAkB,YAAC,CAAY,CAAC,CAAA;;;OAAA;IAgBzE,sBAdG,sCAAA;QAWH;;WAEG;aACH,cAdsB,MAAA,CAAO,IAAA,CAAK,IAAC,KAAQ,iBAAA,CAAkB,SAAC,CAAS,CAAC,CAAA;;;OAAA;IAexE,oBAAC;AAAD,CApBA,AAoBC,IAAA;;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;AACnC,CAAC;AAED;;GAEG;AACH;IAGA;;;;;;OAMG;IACH,uBA9Bc,WAAa,EAAgB,oBAAsB,EACnD,eAAiB,EAAuB,KAA0B,EAClE,aAA0B;QA4BxC,iBAMG;QApCW,gBAAA,GAAA,WAAA,CAAa;QAAgB,yBAAA,GAAA,oBAAA,CAAsB;QACnD,oBAAA,GAAA,eAAA,CAAiB;QACjB,kBAAA,GAAA,aAAA,CAA0B;QAmBtC,gBAAW,GAzBoC,IAAI,GAAA,EAAI,CAAE;QACjD,eAAA,GAA8C,IAAI,GAAA,EAAI,CAAE;QAsC9D,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAArC,CAAqC,CAAC,CAAC;IAC/D,CAAC;IACH;;OAEG;IACH,oCAlCG,GAkCH,cAlCyC,MAAA,CAAO,KAAA,CAAM,IAAC,CAAI,IAAC,CAAI,UAAC,CAAU,MAAC,EAAM,CAAE,CAAC,CAAC,CAAA;IAmCtF;;;;;OAKG;IACH,uDAvCG,GAuCH,UACM,OAAgC,EAAE,eAAuB,EACzD,UAA2B;QAFjC,iBAiBG;QAdC,EAAE,CAAC,CAAC,OAvCC,CAAO,cAAC,CAAc,CAAC,CAAA;YAwC1B,IAAM,gBAAgB,CAvChB,YAAA,GAA8B,EAAA,CAAG;YAwCvC,MAAM,CAvCC,IAAC,CAAI,OAAC,CAAO,cAAC,CAAc,CAAC,OAAC,CAAO,UAAA,QAAC;gBAwC3C,IAAM,gBAAgB,CAvChB,UAAA,GAAa,OAAA,CAAQ,cAAC,CAAc,QAAC,CAAQ,CAAC;gBAwCpD,EAAE,CAAC,CAAC,OAvCO,UAAA,KAAe,QAAA,CAAS,CAAC,CAAA;oBAwClC,KAAI,CAvCC,oBAAC,CAAoB,QAAC,EAAS,UAAA,EAAY,IAAA,EAAM,UAAA,EAAY,EAAA,EAAI,YAAA,CAAW,CAAC;gBAwCpF,CAAC;gBAvCC,IAAA,CAAK,CAAA;oBAwCL,KAAI,CAvCC,YAAC,CAwCF,0CAAuC,QAvCC,qEAAQ,UAA8D,YAAU,OAAY,UAAA,MAAW,EAwC/I,UAAU,CAvCC,CAAC;gBAwClB,CAAC;YACH,CAAC,CAvCC,CAAC;YAwCH,MAAM,CAvCC,YAAA,CAAW,GAAC,CAAG,UAAC,IAAC,IAAQ,OAAA,KAAA,CAAK,wBAAC,CAAwB,eAAC,EAAgB,IAAA,CAAK,EAApD,CAAoD,CAAC,CAAC;QAwCxF,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,oDA3CG,GA2CH,UA3CG,OAAA,EAAA,UAAA;QA2CH,iBAgBG;QAdC,EAAE,CAAC,CAAC,OA3CC,CAAO,aAAC,CAAa,CAAC,CAAA;YA4CzB,IAAM,gBAAgB,CA3ChB,iBAAA,GAAmC,EAAA,CAAG;YA4C5C,MAAM,CA3CC,IAAC,CAAI,OAAC,CAAO,aAAC,CAAa,CAAC,OAAC,CAAO,UAAA,QAAC;gBA4C1C,IAAM,gBAAgB,CA3ChB,UAAA,GAAa,OAAA,CAAQ,aAAC,CAAa,QAAC,CAAQ,CAAC;gBA4CnD,EAAE,CAAC,CAAC,OA3CO,UAAA,KAAe,QAAA,CAAS,CAAC,CAAA;oBA4ClC,KAAI,CA3CC,UAAC,CAAU,QAAC,EAAS,UAAA,EAAY,UAAA,EAAY,EAAA,EAAI,iBAAA,CAAgB,CAAC;gBA4CzE,CAAC;gBA3CC,IAAA,CAAK,CAAA;oBA4CL,KAAI,CA3CC,YAAC,CA4CF,kCAA+B,QA3CC,qEAAQ,UAA8D,YAAU,OAAY,UAAA,MAAW,EA4CvI,UAAU,CA3CC,CAAC;gBA4ClB,CAAC;YACH,CAAC,CA3CC,CAAC;YA4CH,MAAM,CA3CC,iBAAA,CAAgB;QA4CzB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,0CA/CG,GA+CH,UA/CG,KAAA,EAAA,UAAA;QAgDC,IAAM,gBAAgB,CA/ChB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QAiD/C,IA/CI,CAAA;YAgDF,IAAM,gBAAgB,CA/ChB,GAAA,GAAM,IAAA,CAAK,WAAC,CAAW,kBAAC,CAAkB,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YAgD9F,EAAE,CAAC,CAAC,GA/CC,CAAG;gBAAC,IAAA,CAAK,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YAgDpE,IAAI,CA/CC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YAgDlC,MAAM,CA/CC,GAAA,CAAI;QAgDb,CAAC;QA/CC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YAgDV,IAAI,CA/CC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YAgDtC,MAAM,CA/CC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QAgDpE,CAAC;IACH,CAAC;IACH;;;;;;;;OAQG;IACH,kDAvDG,GAuDH,UACM,WAAmB,EAAE,KAAa,EAAE,UAA2B,EAC/D,oBAAgC,EAAE,WAA4B,EAAE,UAAyB;QAC3F,IAAM,gBAAgB,CAvDhB,QAAA,GAAW,IAAA,CAAK,sBAAC,CAAsB,WAAC,EAAY,KAAA,EAAO,UAAA,CAAW,CAAC;QAwD7E,GAAG,CAAC,CAAC,IAvDC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,CAAS,MAAC,EAAO,CAAA,EAAE,EAAG,CAAA;YAwDxC,IAAM,gBAAgB,CAvDhB,OAAA,GAAU,QAAA,CAAS,CAAC,CAAC,CAAC;YAwD5B,EAAE,CAAC,CAAC,OAvDC,CAAO,QAAC,CAAQ,CAAC,CAAA;gBAwDpB,UAAU,CAvDC,IAAC,CAAI,IAAI,WAAA,CAAY,OAAC,CAAO,GAAC,EAAI,OAAA,CAAQ,IAAC,EAAK,UAAA,CAAW,CAAC,CAAC;YAwD1E,CAAC;YAvDC,IAAA,CAAK,EAAA,CAAA,CAAA,OAAK,CAAO,UAAC,CAAU,CAAC,CAAA;gBAwD7B,IAAI,CAvDC,iBAAC,CAwDF,OAAO,CAvDC,GAAC,EAAI,OAAA,CAAQ,UAAC,EAAW,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAwDtF,CAAC;YAvDC,IAAA,CAAK,CAAA;gBAwDL,oBAAoB,CAvDC,IAAC,CAAI,CAAC,OAAC,CAAO,GAAC,EAAI,EAAA,CAAG,CAAC,CAAC;gBAwD7C,IAAI,CAvDC,gBAAC,CAAgB,OAAC,CAAO,GAAC,EAAI,IAAA,EAAM,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAwD1F,CAAC;QACH,CAAC;IACH,CAAC;IACH;;;;;OAKG;IA3DA,8CAAA,GA4DH,UA5DG,WAAA,EAAA,KAAA,EAAA,UAAA;QA4DH,iBAmBG;QAjBC,IAAM,gBAAgB,CA5DhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QA8D/C,IA5DI,CAAA;YA6DF,IAAM,gBAAgB,CA5DhB,cAAA,GAAiB,IAAA,CAAK,WAAC,CAAW,qBAAC,CAAqB,WAAC,EAAY,KAAA,EAAO,UAAA,CAAW,CAAC;YA6D9F,IAAI,CA5DC,6BAAC,CAA6B,cAAC,CAAc,MAAC,EAAO,UAAA,CAAW,CAAC;YA6DtE,cAAc,CA5DC,gBAAC,CAAgB,OAAC,CAAO,UAAC,OAAC;gBA6DxC,EAAE,CAAC,CAAC,OA5DC,CAAO,UAAC,CAAU,CAAC,CAAA;oBA6DtB,KAAI,CA5DC,WAAC,CAAW,OAAC,CAAO,UAAC,EAAW,UAAA,CAAW,CAAC;gBA6DnD,CAAC;YACH,CAAC,CA5DC,CAAC;YA6DH,cAAc,CA5DC,QAAC,CAAQ,OAAC,CA6DrB,UAAC,OA5DC,IAAa,KAAA,CAAK,YAAC,CAAY,OAAC,EAAQ,UAAA,EAAY,eAAA,CAAgB,OAAC,CAAO,CAAC,CAAC,CAAA,CAAE,CAAC;YA6DvF,MAAM,CA5DC,cAAA,CAAe,gBAAC,CAAgB;QA6DzC,CAAC;QA5DC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YA6DV,IAAI,CA5DC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YA6DtC,MAAM,CA5DC,EAAA,CAAG;QA6DZ,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IACH,wCAnEG,GAmEH,UACM,IAAY,EAAE,KAAa,EAAE,UAA2B,EAAE,oBAAgC,EAC1F,WAA4B;QAC9B,EAAE,CAAC,CAAC,iBAnEC,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YAoE3B,IAAI,GAnEG,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC;YAoEzB,EAAE,CAAC,CAAC,KAnEC,CAAK,CAAC,CAAA;gBAoET,IAAI,CAnEC,YAAC,CAoEF,0FAAwF;oBACpF,yGAAuG,EAC3G,UAAU,EAnEE,eAAA,CAAgB,KAAC,CAAK,CAAC;YAoEzC,CAAC;YACD,IAAI,CAnEC,eAAC,CAAe,IAAC,EAAK,KAAA,EAAO,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;QAoEnF,CAAC;QAnEC,IAAA,CAAK,CAAA;YAoEL,WAAW,CAnEC,IAAC,CAAI,IAAI,aAAA,CAoEjB,IAAI,EAnEE,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,KAAC,EAAM,EAAA,CAAG,EAAE,iBAAA,CAAkB,YAAC,EAoE3E,UAAU,CAnEC,CAAC,CAAC;QAoEnB,CAAC;IACH,CAAC;IACH;;;;;;;;OAQG;IACH,4CA3EG,GA2EH,UACM,IAAY,EAAE,UAAkB,EAAE,MAAe,EAAE,UAA2B,EAC9E,oBAAgC,EAAE,WAA4B;QAChE,IAAI,gBAAgB,CA3EhB,eAAA,GAAkB,KAAA,CAAM;QA4E5B,EAAE,CAAC,CAAC,IA3EC,CAAI,UAAC,CAAU,mBAAC,CAAmB,CAAC,CAAC,CAAA;YA4ExC,eAAe,GA3EG,IAAA,CAAK;YA4EvB,IAAI,GA3EG,IAAA,CAAK,SAAC,CAAS,mBAAC,CAAmB,MAAC,CAAM,CAAC;QA4EpD,CAAC;QA3EC,IAAA,CAAK,EAAA,CAAA,CAAA,iBAAK,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YA4ElC,eAAe,GA3EG,IAAA,CAAK;YA4EvB,IAAI,GA3EG,IAAA,CAAK,SAAC,CAAS,CAAC,CAAC,CAAC;QA4E3B,CAAC;QAED,EAAE,CAAC,CAAC,eA3EC,CAAe,CAAC,CAAA;YA4EnB,IAAI,CA3EC,eAAC,CAAe,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;QA4ExF,CAAC;QA3EC,IAAA,CAAK,CAAA;YA4EL,IAAI,CA3EC,iBAAC,CA4EF,IAAI,EA3EE,IAAA,CAAK,aAAC,CAAa,UAAC,EAAW,MAAA,EAAQ,UAAA,CAAW,EAAE,UAAA,EA4E1D,oBAAoB,EA3EE,WAAA,CAAY,CAAC;QA4EzC,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IACH,kDAlFG,GAkFH,UACM,IAAY,EAAE,KAAa,EAAE,UAA2B,EAAE,oBAAgC,EAC1F,WAA4B;QAC9B,IAAM,gBAAgB,CAlFhB,IAAA,GAAO,IAAA,CAAK,kBAAC,CAAkB,KAAC,EAAM,UAAA,CAAW,CAAC;QAmFxD,EAAE,CAAC,CAAC,IAlFC,CAAI,CAAC,CAAA;YAmFR,IAAI,CAlFC,iBAAC,CAAiB,IAAC,EAAK,IAAA,EAAM,UAAA,EAAY,oBAAA,EAAsB,WAAA,CAAY,CAAC;YAmFlF,MAAM,CAlFC,IAAA,CAAK;QAmFd,CAAC;QACD,MAAM,CAlFC,KAAA,CAAM;IAmFf,CAAC;IACH;;;;;;;OAOG;IAxFA,yCAAA,GAyFH,UACM,IAAY,EAAE,GAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,WAA4B;QAChE,oBAAoB,CAzFC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QA0F9C,WAAW,CAzFC,IAAC,CAAI,IAAI,aAAA,CAAc,IAAC,EAAK,GAAA,EAAK,iBAAA,CAAkB,OAAC,EAAQ,UAAA,CAAW,CAAC,CAAC;IA0FxF,CAAC;IACH;;;;;;;OAOG;IA/FA,uCAAA,GAgGH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,WAA4B;QAChE,oEAAoE;QACpE,oEAAoE;QACpE,0EAA0E;QAC1E,IAAM,gBAAgB,CAhGhB,GAAA,GAAM,IAAA,CAAK,aAAC,CAAa,UAAC,IAAa,MAAA,EAAQ,KAAA,EAAO,UAAA,CAAW,CAAC;QAiGxE,oBAAoB,CAhGC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QAiG9C,WAAW,CAhGC,IAAC,CAAI,IAAI,aAAA,CAAc,IAAC,EAAK,GAAA,EAAK,iBAAA,CAAkB,SAAC,EAAU,UAAA,CAAW,CAAC,CAAC;IAiG1F,CAAC;IACH;;;;;OAKG;IApGA,qCAAA,GAqGH,UArGG,KAAA,EAAA,aAAA,EAAA,UAAA;QAuGC,IAAM,gBAAgB,CArGhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QAuG/C,IArGI,CAAA;YAsGF,IAAM,gBAAgB,CArGhB,GAAA,GAAM,aAAA;gBAsGR,IAAI,CArGC,WAAC,CAAW,kBAAC,CAAkB,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB;gBAsGjF,IAAI,CArGC,WAAC,CAAW,YAAC,CAAY,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YAsGhF,EAAE,CAAC,CAAC,GArGC,CAAG;gBAAC,IAAA,CAAK,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YAsGpE,IAAI,CArGC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YAsGlC,MAAM,CArGC,GAAA,CAAI;QAsGb,CAAC;QArGC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YAsGV,IAAI,CArGC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YAsGtC,MAAM,CArGC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QAsGpE,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,gDAzGG,GAyGH,UAzGG,eAAA,EAAA,SAAA;QA2GC,EAAE,CAAC,CAAC,SAzGC,CAAS,WAAC,CAAW,CAAC,CAAA;YA0GzB,MAAM,CAzGC,IAAI,uBAAA,CA0GP,SAAS,CAzGC,IAAC,EAAK,mBAAA,CAAoB,SAAC,EAAU,eAAA,CAAgB,IAAC,EAAK,KAAA,EA0GrE,SAAS,CAzGC,UAAC,EAAW,IAAA,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;QA0GxD,CAAC;QAED,IAAI,gBAAgB,CAzGhB,IAAA,GAAe,IAAA,CAAK;QA0GxB,IAAI,gBAAgB,CAzGhB,WAAa,CAAoB;QA0GrC,IAAI,gBAAgB,CAzGhB,iBAAA,GAA4B,IAAA,CAAK;QA0GrC,IAAM,gBAAgB,CAzGhB,KAAA,GAAQ,SAAA,CAAU,IAAC,CAAI,KAAC,CAAK,wBAAC,CAAwB,CAAC;QA0G7D,IAAI,gBAAgB,CAzGhB,gBAAkC,CAAE;QA2GxC,4DAA4D;QAC5D,EAAE,CAAC,CAAC,KAzGC,CAAK,MAAC,GAAQ,CAAA,CAAE,CAAC,CAAA;YA0GpB,EAAE,CAAC,CAAC,KAzGC,CAAK,CAAC,CAAC,IAAI,gBAAA,CAAiB,CAAC,CAAA;gBA0GhC,iBAAiB,GAzGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBA0G7B,IAAI,CAzGC,gCAAC,CAAgC,iBAAC,EAAkB,SAAA,CAAU,UAAC,EAAW,IAAA,CAAK,CAAC;gBA0GrF,gBAAgB,GAzGG,4BAAA,CA0Gf,IAAI,CAzGC,eAAC,EAAgB,eAAA,EAAiB,iBAAA,EAAmB,IAAA,CAAK,CAAC;gBA2GpE,IAAM,gBAAgB,CAzGhB,cAAA,GAAiB,iBAAA,CAAkB,OAAC,CAAO,GAAC,CAAG,CAAC;gBA0GtD,EAAE,CAAC,CAAC,cAzGC,GAAgB,CAAA,CAAE,CAAC,CAAC,CAAA;oBA0GvB,IAAM,gBAAgB,CAzGhB,EAAA,GAAK,iBAAA,CAAkB,SAAC,CAAS,CAAC,EAAE,cAAA,CAAe,CAAC;oBA0G1D,IAAM,gBAAgB,CAzGhB,MAAA,GAAO,iBAAA,CAAkB,SAAC,CAAS,cAAC,GAAgB,CAAA,CAAE,CAAC;oBA0G7D,iBAAiB,GAzGG,cAAA,CAAe,EAAC,EAAG,MAAA,CAAK,CAAC;gBA0G/C,CAAC;gBAED,WAAW,GAzGG,mBAAA,CAAoB,SAAC,CAAS;YA0G9C,CAAC;YAzGC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,CAAK,CAAC,CAAC,IAAI,YAAA,CAAa,CAAC,CAAA;gBA0GnC,iBAAiB,GAzGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBA0G7B,WAAW,GAzGG,mBAAA,CAAoB,KAAC,CAAK;gBA0GxC,gBAAgB,GAzGG,CAAA,eAAE,CAAe,IAAC,CAAI,CAAC;YA0G5C,CAAC;YAzGC,IAAA,CAAK,EAAA,CAAA,CAAA,KAAK,CAAK,CAAC,CAAC,IAAI,YAAA,CAAa,CAAC,CAAA;gBA0GnC,IAAI,GAzGG,KAAA,CAAM,MAAC,GAAQ,CAAA,GAAI,KAAA,CAAM,CAAC,CAAC,GAAG,IAAA,CAAK;gBA0G1C,iBAAiB,GAzGG,KAAA,CAAM,CAAC,CAAC,CAAC;gBA0G7B,WAAW,GAzGG,mBAAA,CAAoB,KAAC,CAAK;gBA0GxC,gBAAgB,GAzGG,CAAA,eAAE,CAAe,KAAC,CAAK,CAAC;YA0G7C,CAAC;QACH,CAAC;QAED,oDAAoD;QACpD,EAAE,CAAC,CAAC,iBAzGC,KAAqB,IAAA,CAAK,CAAC,CAAA;YA0G9B,iBAAiB,GAzGG,IAAA,CAAK,eAAC,CAAe,iBAAC,CAAiB,SAAC,CAAS,IAAC,CAAI,CAAC;YA0G3E,gBAAgB,GAzGG,4BAAA,CA0Gf,IAAI,CAzGC,eAAC,EAAgB,eAAA,EAAiB,iBAAA,EAAmB,KAAA,CAAM,CAAC;YA0GrE,WAAW,GAzGG,mBAAA,CAAoB,QAAC,CAAQ;YA0G3C,IAAI,CAzGC,gCAAC,CAAgC,iBAAC,EAAkB,SAAA,CAAU,UAAC,EAAW,KAAA,CAAM,CAAC;QA0GxF,CAAC;QAED,MAAM,CAzGC,IAAI,uBAAA,CA0GP,iBAAiB,EAzGE,WAAA,EAAa,gBAAA,CAAiB,MAAC,KAAU,CAAA,GAAI,gBAAA,CAAiB,CAAC,CAAC,GAAG,IAAA,EA0GtF,gBAAgB,CAzGC,MAAC,GAAQ,CAAA,EAAG,SAAA,CAAU,UAAC,EAAW,IAAA,EAAM,SAAA,CAAU,UAAC,CAAU,CAAC;IA0GrF,CAAC;IACH;;;;;;;OAOG;IACH,kCAhHG,GAgHH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,YAA6B;QACjE,EAAE,CAAC,CAAC,iBAhHC,CAAiB,IAAC,CAAI,CAAC,CAAC,CAAA;YAiH3B,IAAI,GAhHG,IAAA,CAAK,MAAC,CAAM,CAAC,CAAC,CAAC;YAiHtB,IAAI,CAhHC,oBAAC,CAAoB,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,YAAA,CAAa,CAAC;QAiHxE,CAAC;QAhHC,IAAA,CAAK,CAAA;YAiHL,IAAI,CAhHC,WAAC,CAAW,IAAC,EAAK,UAAA,EAAY,UAAA,EAAY,oBAAA,EAAsB,YAAA,CAAa,CAAC;QAiHrF,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IArHA,4CAAA,GAsHH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,YAA6B;QAC/B,IAAM,gBAAgB,CAtHhB,OAAA,GAAU,aAAA,CAAc,IAAC,EAAK,CAAA,IAAE,EAAK,EAAA,CAAG,CAAC,CAAC;QAuHhD,IAAM,gBAAgB,CAtHhB,SAAA,GAAY,OAAA,CAAQ,CAAC,CAAC,CAAC;QAuH7B,IAAM,gBAAgB,CAtHhB,KAAA,GAAQ,OAAA,CAAQ,CAAC,CAAC,CAAC,WAAC,EAAW,CAAE;QAuHvC,EAAE,CAAC,CAAC,KAtHC,CAAK,CAAC,CAAA;YAuHT,MAAM,CAAC,CAAC,KAtHC,CAAK,CAAC,CAAA;gBAuHb,KAtHK,OAAA,CAAQ;gBAuHb,KAtHK,MAAA;oBAuHH,IAAM,gBAAgB,CAtHhB,GAAA,GAAM,IAAA,CAAK,YAAC,CAAY,UAAC,EAAW,UAAA,CAAW,CAAC;oBAuHtD,YAAY,CAtHC,IAAC,CAAI,IAAI,aAAA,CAAc,SAAC,EAAU,IAAA,EAAM,KAAA,EAAO,GAAA,EAAK,UAAA,CAAW,CAAC,CAAC;oBAuH9E,KAAK,CAAC;gBAER;oBACE,IAAI,CAtHC,YAAC,CAuHF,iDAA8C,KAtHC,kBAAK,SAAW,4CAAS,EAuHxE,UAAU,CAtHC,CAAC;oBAuHhB,KAAK,CAAC;YACV,CAAC;QACH,CAAC;QAtHC,IAAA,CAAK,CAAA;YAuHL,IAAI,CAtHC,YAAC,CAuHF,0CAAwC,SAtHC,8EAAS,EAuHlD,UAAU,CAtHC,CAAC;QAuHlB,CAAC;IACH,CAAC;IACH;;;;;;;OAOG;IA5HA,mCAAA,GA6HH,UACM,IAAY,EAAE,UAAkB,EAAE,UAA2B,EAC7D,oBAAgC,EAAE,YAA6B;QACjE,mCAAmC;QA5H7B,IAAA,qCAAsD,EAAtD,cAAE,EAAO,iBAAA,CAA8C;QA8H7D,IAAM,gBAAgB,CA7HhB,GAAA,GAAM,IAAA,CAAK,YAAC,CAAY,UAAC,EAAW,UAAA,CAAW,CAAC;QA8HtD,oBAAoB,CA7HC,IAAC,CAAI,CAAC,IAAC,EAAK,GAAA,CAAI,MAAC,CAAM,CAAC,CAAC;QA8H9C,YAAY,CA7HC,IAAC,CAAI,IAAI,aAAA,CAAc,SAAC,EAAU,MAAA,EAAQ,IAAA,EAAM,GAAA,EAAK,UAAA,CAAW,CAAC,CAAC;QA8H/E,mDAAmD;QACnD,oDAAoD;IACtD,CAAC;IACH;;;;OAIG;IAhIA,oCAAA,GAiIH,UAjIG,KAAA,EAAA,UAAA;QAkIC,IAAM,gBAAgB,CAjIhB,UAAA,GAAa,UAAA,CAAW,KAAC,CAAK,QAAC,EAAQ,CAAE;QAmI/C,IAjII,CAAA;YAkIF,IAAM,gBAAgB,CAjIhB,GAAA,GAAM,IAAA,CAAK,WAAC,CAAW,WAAC,CAAW,KAAC,EAAM,UAAA,EAAY,IAAA,CAAK,oBAAC,CAAoB,CAAC;YAkIvF,EAAE,CAAC,CAAC,GAjIC,CAAG,CAAC,CAAA;gBAkIP,IAAI,CAjIC,6BAAC,CAA6B,GAAC,CAAG,MAAC,EAAO,UAAA,CAAW,CAAC;YAkI7D,CAAC;YACD,EAAE,CAAC,CAAC,CAjIC,GAAC,IAAM,GAAA,CAAI,GAAC,YAAc,SAAA,CAAU,CAAC,CAAA;gBAkIxC,IAAI,CAjIC,YAAC,CAAY,mCAAC,EAAoC,UAAA,CAAW,CAAC;gBAkInE,MAAM,CAjIC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;YAkIpE,CAAC;YACD,IAAI,CAjIC,WAAC,CAAW,GAAC,EAAI,UAAA,CAAW,CAAC;YAkIlC,MAAM,CAjIC,GAAA,CAAI;QAkIb,CAAC;QAjIC,KAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,CAAA;YAkIV,IAAI,CAjIC,YAAC,CAAY,KAAC,CAAI,EAAG,UAAA,CAAW,CAAC;YAkItC,MAAM,CAjIC,IAAA,CAAK,WAAC,CAAW,oBAAC,CAAoB,OAAC,EAAQ,UAAA,CAAW,CAAC;QAkIpE,CAAC;IACH,CAAC;IACH;;;;;OAKG;IArIA,oCAAA,GAsIH,UACM,OAAe,EAAE,UAA2B,EAC5C,KAA8C;QAA9C,sBAAA,EAAA,QAAyB,eAAe,CAAC,KAAK;QAChD,IAAI,CAtIC,aAAC,CAAa,IAAC,CAAI,IAAI,UAAA,CAAW,UAAC,EAAW,OAAA,EAAS,KAAA,CAAM,CAAC,CAAC;IAuItE,CAAC;IACH;;;;OAIG;IAzIA,qDAAA,GA0IH,UA1IG,MAAA,EAAA,UAAA;QA2IC,GAAG,CAAC,CA1IgB,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,IAAA;YA0If,IA1IM,KAAA,eAAA;YA2IT,IAAI,CA1IC,YAAC,CAAY,KAAC,CAAK,OAAC,EAAQ,UAAA,CAAW,CAAC;SA2I9C;IACH,CAAC;IACH;;;;OAIG;IA7IA,mCAAA,GA8IH,UA9IG,GAAA,EAAA,UAAA;QA8IH,iBAgBG;QAfC,EAAE,CAAC,CAAC,GA9IC,CAAG,CAAC,CAAA;YA+IP,IAAM,gBAAgB,CA9IhB,SAAA,GAAY,IAAI,aAAA,EAAc,CAAE;YA+ItC,GAAG,CA9IC,KAAC,CAAK,SAAC,CAAS,CAAC;YA+IrB,SAAS,CA9IC,KAAC,CAAK,OAAC,CAAO,UAAC,GAAC,EAAI,QAAA;gBA+I5B,IAAM,gBAAgB,CA9IhB,QAAA,GAAW,KAAA,CAAK,WAAC,CAAW,GAAC,CAAG,QAAC,CAAQ,CAAC;gBA+IhD,EAAE,CAAC,CAAC,CA9IC,QAAC,CAAQ,CAAC,CAAA;oBA+Ib,KAAI,CA9IC,YAAC,CA+IF,eAAa,QA9IC,yBAAQ,EA+ItB,IA9II,eAAA,CA+IA,UAAU,CA9IC,KAAC,CAAK,MAAC,CAAM,GAAC,CAAG,IAAC,CAAI,KAAC,CAAK,EAAE,UAAA,CAAW,KAAC,CAAK,MAAC,CAAM,GAAC,CAAG,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAC;gBA+I3F,CAAC;gBA9IC,IAAA,CAAK,CAAA;oBA+IL,KAAI,CA9IC,UAAC,CAAU,GAAC,CAAG,QAAC,EAAS,QAAA,CAAS,CAAC;gBA+I1C,CAAC;YACH,CAAC,CA9IC,CAAC;QA+IL,CAAC;IACH,CAAC;IACH;;;;;OAKG;IA5IA,wDAAA,GA6IH,UACM,QAAgB,EAAE,UAA2B,EAAE,MAAe;QAChE,IAAM,gBAAgB,CA7IhB,MAAA,GAAS,MAAA,GAAS,IAAA,CAAK,eAAC,CAAe,iBAAC,CAAiB,QAAC,CAAQ;YA8IhD,IAAI,CA7IC,eAAC,CAAe,gBAAC,CAAgB,QAAC,CAAQ,CAAC;QA8IxE,EAAE,CAAC,CAAC,MA7IC,CAAM,KAAC,CAAK,CAAC,CAAA;YA8IhB,IAAI,CA7IC,YAAC,CAAY,MAAC,CAAM,GAAC,EAAI,UAAA,EAAY,eAAA,CAAgB,KAAC,CAAK,CAAC;QA8InE,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CA3dA,AA2dC,IAAA;;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;IACpC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC;IACnC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;IACpC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,oBAAoB,CAAC;IAC7C,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC;IACxC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC;AACtC,CAAC;AAED;IA5JC,iCAAA;IA4JD;QAAA,qEAaC;QAZC,WAAK,GA5JG,IAAI,GAAA,EAAwB,CAAG;;IAwKzC,CAAC;IAXD;;;;OAIG;IACH,iCAjKG,GAiKH,UAjKG,GAAA,EAAA,OAAA;QAkKC,IAAI,CAjKC,KAAC,CAAK,GAAC,CAAG,GAAC,CAAG,IAAC,EAAK,GAAA,CAAI,CAAC;QAkK9B,GAAG,CAjKC,GAAC,CAAG,KAAC,CAAK,IAAC,CAAI,CAAC;QAkKpB,IAAI,CAjKC,QAAC,CAAQ,GAAC,CAAG,IAAC,EAAK,OAAA,CAAQ,CAAC;QAkKjC,MAAM,CAjKC,IAAA,CAAK;IAkKd,CAAC;IACH,oBAAC;AAAD,CAbA,AAaC,CAzKA,mBAAA,GAyKA;;AAED;IACA,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,CAAC;AAED;;;GAGG;AACH,2BA1KC,IAAA;IA2KC,MAAM,CA1KC,IAAA,CAAK,CAAC,CAAC,IAAI,GAAA,CAAI;AA2KxB,CAAC;AACD;;;;;;GAMG;AACH,MAhLC,uCAiLG,QAA+B,EAAE,QAAgB,EAAE,QAAgB,EACnE,WAAoB;IACtB,IAAM,gBAAgB,CAhLhB,IAAA,GAA0B,EAAA,CAAG;IAiLnC,WAAW,CAhLC,KAAC,CAAK,QAAC,CAAQ,CAAC,OAAC,CAAO,UAAC,QAAC;QAiLpC,IAAM,gBAAgB,CAhLhB,YAAA,GAAe,QAAA,CAAS,OAAC,GAAS,CAAA,QAAE,CAAQ,OAAC,CAAO,GAAG,QAAA,CAAS,oBAAC,EAAoB,CAAE;QAiL7F,IAAM,gBAAgB,CAhLhB,eAAA,GAiLF,IAhLI,GAAA,CAAI,QAAC,CAAQ,YAAC,CAAY,MAAC,CAAM,UAAA,QAAC,IAAW,OAAA,QAAA,CAAS,iBAAC,EAAiB,EAA3B,CAA2B,CAAE;aAiLjE,GAhLC,CAAG,UAAC,QAAC,IAAY,OAAA,QAAA,CAAS,OAAC,EAAV,CAAU,CAAO,CAAC,CAAC;QAiLtD,IAAM,gBAAgB,CAhLhB,oBAAA,GAiLF,YAAY,CAhLC,MAAC,CAAM,UAAA,WAAC,IAAc,OAAA,CAAA,eAAE,CAAe,GAAC,CAAG,WAAC,CAAW,EAAjC,CAAiC,CAAC,CAAC;QAkL1E,IAAI,CAhLC,IAAC,OAgLN,IAAI,EAhLO,oBAAG,CAAoB,GAAC,CAiL/B,UAAA,WAAW,IAhLI,OAAA,QAAA,CAAS,eAAC,CAAe,WAAC,EAAY,QAAA,EAAU,WAAA,CAAY,EAA5D,CAA4D,CAAC,EAAE;IAiLpF,CAAC,CAhLC,CAAC;IAiLH,MAAM,CAhLC,IAAA,CAAK,MAAC,KAAU,CAAA,GAAI,CAAA,eAAE,CAAe,IAAC,CAAI,GAAG,KAAA,CAAM,IAAC,CAAI,IAAI,GAAA,CAAI,IAAC,CAAI,CAAC,CAAC,IAAC,EAAI,CAAE;AAiLvF,CAAC","file":"binding_parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core';\n\nimport {CompileDirectiveSummary, CompilePipeSummary} from '../compile_metadata';\nimport {ASTWithSource, BindingPipe, EmptyExpr, ParserError, RecursiveAstVisitor, TemplateBinding} from '../expression_parser/ast';\nimport {Parser} from '../expression_parser/parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {mergeNsAndName} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {CssSelector} from '../selector';\nimport {splitAtColon, splitAtPeriod} from '../util';\n\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType, VariableAst} from './template_ast';\n\nconst /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';\nconst /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';\nconst /** @type {?} */ CLASS_PREFIX = 'class';\nconst /** @type {?} */ STYLE_PREFIX = 'style';\n\nconst /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';\nexport type BoundPropertyType = number;\nexport let BoundPropertyType: any = {};\nBoundPropertyType.DEFAULT = 0;\nBoundPropertyType.LITERAL_ATTR = 1;\nBoundPropertyType.ANIMATION = 2;\nBoundPropertyType[BoundPropertyType.DEFAULT] = \"DEFAULT\";\nBoundPropertyType[BoundPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\nBoundPropertyType[BoundPropertyType.ANIMATION] = \"ANIMATION\";\n\n/**\n * Represents a parsed property.\n */\nexport class BoundProperty {\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} type\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic expression: ASTWithSource,\npublic type: BoundPropertyType,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @return {?}\n */\nget isLiteral() { return this.type === BoundPropertyType.LITERAL_ATTR; }\n/**\n * @return {?}\n */\nget isAnimation() { return this.type === BoundPropertyType.ANIMATION; }\n}\n\nfunction BoundProperty_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundProperty.prototype.name;\n/** @type {?} */\nBoundProperty.prototype.expression;\n/** @type {?} */\nBoundProperty.prototype.type;\n/** @type {?} */\nBoundProperty.prototype.sourceSpan;\n}\n\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport class BindingParser {\n  pipesByName: Map<string, CompilePipeSummary> = new Map();\nprivate _usedPipes: Map<string, CompilePipeSummary> = new Map();\n/**\n * @param {?} _exprParser\n * @param {?} _interpolationConfig\n * @param {?} _schemaRegistry\n * @param {?} pipes\n * @param {?} _targetErrors\n */\nconstructor(\nprivate _exprParser: Parser,\nprivate _interpolationConfig: InterpolationConfig,\nprivate _schemaRegistry: ElementSchemaRegistry, pipes: CompilePipeSummary[],\nprivate _targetErrors: ParseError[]) {\n    pipes.forEach(pipe => this.pipesByName.set(pipe.name, pipe));\n  }\n/**\n * @return {?}\n */\ngetUsedPipes(): CompilePipeSummary[] { return Array.from(this._usedPipes.values()); }\n/**\n * @param {?} dirMeta\n * @param {?} elementSelector\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostPropertyAsts(\n      dirMeta: CompileDirectiveSummary, elementSelector: string,\n      sourceSpan: ParseSourceSpan): BoundElementPropertyAst[] {\n    if (dirMeta.hostProperties) {\n      const /** @type {?} */ boundProps: BoundProperty[] = [];\n      Object.keys(dirMeta.hostProperties).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostProperties[propName];\n        if (typeof expression === 'string') {\n          this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);\n        } else {\n          this._reportError(\n              `Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return boundProps.map((prop) => this.createElementPropertyAst(elementSelector, prop));\n    }\n  }\n/**\n * @param {?} dirMeta\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostEventAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan):\n      BoundEventAst[] {\n    if (dirMeta.hostListeners) {\n      const /** @type {?} */ targetEventAsts: BoundEventAst[] = [];\n      Object.keys(dirMeta.hostListeners).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostListeners[propName];\n        if (typeof expression === 'string') {\n          this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);\n        } else {\n          this._reportError(\n              `Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return targetEventAsts;\n    }\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nparseInterpolation(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @param {?} targetVars\n * @return {?}\n */\nparseInlineTemplateBinding(\n      prefixToken: string, value: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[], targetVars: VariableAst[]) {\n    const /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n      const /** @type {?} */ binding = bindings[i];\n      if (binding.keyIsVar) {\n        targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\n      } else if (binding.expression) {\n        this._parsePropertyAst(\n            binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetMatchableAttrs.push([binding.key, '']);\n        this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n      }\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseTemplateBindings(prefixToken: string, value: string, sourceSpan: ParseSourceSpan):\n      TemplateBinding[] {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\n      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n      bindingsResult.templateBindings.forEach((binding) => {\n        if (binding.expression) {\n          this._checkPipes(binding.expression, sourceSpan);\n        }\n      });\n      bindingsResult.warnings.forEach(\n          (warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n      return bindingsResult.templateBindings;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return [];\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparseLiteralAttr(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substring(1);\n      if (value) {\n        this._reportError(\n            `Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`,\n            sourceSpan, ParseErrorLevel.FATAL);\n      }\n      this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      targetProps.push(new BoundProperty(\n          name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR,\n          sourceSpan));\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} isHost\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyBinding(\n      name: string, expression: string, isHost: boolean, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    let /** @type {?} */ isAnimationProp = false;\n    if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n      isAnimationProp = true;\n      name = name.substring(ANIMATE_PROP_PREFIX.length);\n    } else if (_isAnimationLabel(name)) {\n      isAnimationProp = true;\n      name = name.substring(1);\n    }\n\n    if (isAnimationProp) {\n      this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      this._parsePropertyAst(\n          name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan,\n          targetMatchableAttrs, targetProps);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyInterpolation(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]): boolean {\n    const /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\n    if (expr) {\n      this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} name\n * @param {?} ast\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parsePropertyAst(\n      name: string, ast: ASTWithSource, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parseAnimation(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    // This will occur when a @trigger is not paired with an expression.\n    // For animations it is valid to not have an expression since */void\n    // states will be applied by angular when the element is attached/detached\n    const /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\n  }\n/**\n * @param {?} value\n * @param {?} isHostBinding\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseBinding(value: string, isHostBinding: boolean, sourceSpan: ParseSourceSpan):\n      ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = isHostBinding ?\n          this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n          this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} elementSelector\n * @param {?} boundProp\n * @return {?}\n */\ncreateElementPropertyAst(elementSelector: string, boundProp: BoundProperty):\n      BoundElementPropertyAst {\n    if (boundProp.isAnimation) {\n      return new BoundElementPropertyAst(\n          boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, false,\n          boundProp.expression, null, boundProp.sourceSpan);\n    }\n\n    let /** @type {?} */ unit: string = null;\n    let /** @type {?} */ bindingType: PropertyBindingType;\n    let /** @type {?} */ boundPropertyName: string = null;\n    const /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n    let /** @type {?} */ securityContexts: SecurityContext[];\n\n    // Check check for special cases (prefix style, attr, class)\n    if (parts.length > 1) {\n      if (parts[0] == ATTRIBUTE_PREFIX) {\n        boundPropertyName = parts[1];\n        this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n        securityContexts = calcPossibleSecurityContexts(\n            this._schemaRegistry, elementSelector, boundPropertyName, true);\n\n        const /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\n        if (nsSeparatorIdx > -1) {\n          const /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\n          const /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);\n          boundPropertyName = mergeNsAndName(ns, name);\n        }\n\n        bindingType = PropertyBindingType.Attribute;\n      } else if (parts[0] == CLASS_PREFIX) {\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Class;\n        securityContexts = [SecurityContext.NONE];\n      } else if (parts[0] == STYLE_PREFIX) {\n        unit = parts.length > 2 ? parts[2] : null;\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Style;\n        securityContexts = [SecurityContext.STYLE];\n      }\n    }\n\n    // If not a special case, use the full property name\n    if (boundPropertyName === null) {\n      boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n      securityContexts = calcPossibleSecurityContexts(\n          this._schemaRegistry, elementSelector, boundPropertyName, false);\n      bindingType = PropertyBindingType.Property;\n      this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n    }\n\n    return new BoundElementPropertyAst(\n        boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null,\n        securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nparseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substr(1);\n      this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n    } else {\n      this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseAnimationEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetEvents: BoundEventAst[]) {\n    const /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\n    const /** @type {?} */ eventName = matches[0];\n    const /** @type {?} */ phase = matches[1].toLowerCase();\n    if (phase) {\n      switch (phase) {\n        case 'start':\n        case 'done':\n          const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n          targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\n          break;\n\n        default:\n          this._reportError(\n              `The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`,\n              sourceSpan);\n          break;\n      }\n    } else {\n      this._reportError(\n          `The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`,\n          sourceSpan);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    // long format: 'target: eventName'\n    const [target, eventName] = splitAtColon(name, [null, name]);\n    const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\n    // Don't detect directives for event names for now,\n    // so don't add the event name to the matchableAttrs\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseAction(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n      if (ast) {\n        this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      }\n      if (!ast || ast.ast instanceof EmptyExpr) {\n        this._reportError(`Empty expressions are not allowed`, sourceSpan);\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n      }\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} message\n * @param {?} sourceSpan\n * @param {?=} level\n * @return {?}\n */\nprivate _reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.FATAL) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n/**\n * @param {?} errors\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _reportExpressionParserErrors(errors: ParserError[], sourceSpan: ParseSourceSpan) {\n    for (const /** @type {?} */ error of errors) {\n      this._reportError(error.message, sourceSpan);\n    }\n  }\n/**\n * @param {?} ast\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _checkPipes(ast: ASTWithSource, sourceSpan: ParseSourceSpan) {\n    if (ast) {\n      const /** @type {?} */ collector = new PipeCollector();\n      ast.visit(collector);\n      collector.pipes.forEach((ast, pipeName) => {\n        const /** @type {?} */ pipeMeta = this.pipesByName.get(pipeName);\n        if (!pipeMeta) {\n          this._reportError(\n              `The pipe '${pipeName}' could not be found`,\n              new ParseSourceSpan(\n                  sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n        } else {\n          this._usedPipes.set(pipeName, pipeMeta);\n        }\n      });\n    }\n  }\n/**\n * @param {?} propName the name of the property / attribute\n * @param {?} sourceSpan\n * @param {?} isAttr true when binding to an attribute\n * @return {?}\n */\nprivate _validatePropertyOrAttributeName(\n      propName: string, sourceSpan: ParseSourceSpan, isAttr: boolean): void {\n    const /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n                            this._schemaRegistry.validateProperty(propName);\n    if (report.error) {\n      this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);\n    }\n  }\n}\n\nfunction BindingParser_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingParser.prototype.pipesByName;\n/** @type {?} */\nBindingParser.prototype._usedPipes;\n/** @type {?} */\nBindingParser.prototype._exprParser;\n/** @type {?} */\nBindingParser.prototype._interpolationConfig;\n/** @type {?} */\nBindingParser.prototype._schemaRegistry;\n/** @type {?} */\nBindingParser.prototype._targetErrors;\n}\n\nexport class PipeCollector extends RecursiveAstVisitor {\n  pipes = new Map<string, BindingPipe>();\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    this.pipes.set(ast.name, ast);\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n}\n\nfunction PipeCollector_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeCollector.prototype.pipes;\n}\n\n/**\n * @param {?} name\n * @return {?}\n */\nfunction _isAnimationLabel(name: string): boolean {\n  return name[0] == '@';\n}\n/**\n * @param {?} registry\n * @param {?} selector\n * @param {?} propName\n * @param {?} isAttribute\n * @return {?}\n */\nexport function calcPossibleSecurityContexts(\n    registry: ElementSchemaRegistry, selector: string, propName: string,\n    isAttribute: boolean): SecurityContext[] {\n  const /** @type {?} */ ctxs: SecurityContext[] = [];\n  CssSelector.parse(selector).forEach((selector) => {\n    const /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    const /** @type {?} */ notElementNames =\n        new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n                    .map((selector) => selector.element));\n    const /** @type {?} */ possibleElementNames =\n        elementNames.filter(elementName => !notElementNames.has(elementName));\n\n    ctxs.push(...possibleElementNames.map(\n        elementName => registry.securityContext(elementName, propName, isAttribute)));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n"]}
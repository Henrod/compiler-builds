{"version":3,"sources":["../../../../../modules/@angular/compiler/src/template_parser/binding_parser.ts"],"names":[],"mappings":"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","file":"binding_parser.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SecurityContext} from '@angular/core/index';\n\nimport {CompileDirectiveSummary, CompilePipeSummary} from '../compile_metadata';\nimport {ASTWithSource, BindingPipe, EmptyExpr, ParserError, RecursiveAstVisitor, TemplateBinding} from '../expression_parser/ast';\nimport {Parser} from '../expression_parser/parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {mergeNsAndName} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {CssSelector} from '../selector';\nimport {splitAtColon, splitAtPeriod} from '../util';\n\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType, VariableAst} from './template_ast';\n\nconst /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';\nconst /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';\nconst /** @type {?} */ CLASS_PREFIX = 'class';\nconst /** @type {?} */ STYLE_PREFIX = 'style';\n\nconst /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';\nexport type BoundPropertyType = number;\nexport let BoundPropertyType: any = {};\nBoundPropertyType.DEFAULT = 0;\nBoundPropertyType.LITERAL_ATTR = 1;\nBoundPropertyType.ANIMATION = 2;\nBoundPropertyType[BoundPropertyType.DEFAULT] = \"DEFAULT\";\nBoundPropertyType[BoundPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\nBoundPropertyType[BoundPropertyType.ANIMATION] = \"ANIMATION\";\n\n/**\n * Represents a parsed property.\n */\nexport class BoundProperty {\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} type\n * @param {?} sourceSpan\n */\nconstructor(\npublic name: string,\npublic expression: ASTWithSource,\npublic type: BoundPropertyType,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @return {?}\n */\nget isLiteral() { return this.type === BoundPropertyType.LITERAL_ATTR; }\n/**\n * @return {?}\n */\nget isAnimation() { return this.type === BoundPropertyType.ANIMATION; }\n}\n\nfunction BoundProperty_tsickle_Closure_declarations() {\n/** @type {?} */\nBoundProperty.prototype.name;\n/** @type {?} */\nBoundProperty.prototype.expression;\n/** @type {?} */\nBoundProperty.prototype.type;\n/** @type {?} */\nBoundProperty.prototype.sourceSpan;\n}\n\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport class BindingParser {\n  pipesByName: Map<string, CompilePipeSummary> = new Map();\nprivate _usedPipes: Map<string, CompilePipeSummary> = new Map();\n/**\n * @param {?} _exprParser\n * @param {?} _interpolationConfig\n * @param {?} _schemaRegistry\n * @param {?} pipes\n * @param {?} _targetErrors\n */\nconstructor(\nprivate _exprParser: Parser,\nprivate _interpolationConfig: InterpolationConfig,\nprivate _schemaRegistry: ElementSchemaRegistry, pipes: CompilePipeSummary[],\nprivate _targetErrors: ParseError[]) {\n    pipes.forEach(pipe => this.pipesByName.set(pipe.name, pipe));\n  }\n/**\n * @return {?}\n */\ngetUsedPipes(): CompilePipeSummary[] { return Array.from(this._usedPipes.values()); }\n/**\n * @param {?} dirMeta\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostPropertyAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan):\n      BoundElementPropertyAst[] {\n    if (dirMeta.hostProperties) {\n      const /** @type {?} */ boundProps: BoundProperty[] = [];\n      Object.keys(dirMeta.hostProperties).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostProperties[propName];\n        if (typeof expression === 'string') {\n          this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);\n        } else {\n          this._reportError(\n              `Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return boundProps.map((prop) => this.createElementPropertyAst(dirMeta.selector, prop));\n    }\n  }\n/**\n * @param {?} dirMeta\n * @param {?} sourceSpan\n * @return {?}\n */\ncreateDirectiveHostEventAsts(dirMeta: CompileDirectiveSummary, sourceSpan: ParseSourceSpan):\n      BoundEventAst[] {\n    if (dirMeta.hostListeners) {\n      const /** @type {?} */ targetEventAsts: BoundEventAst[] = [];\n      Object.keys(dirMeta.hostListeners).forEach(propName => {\n        const /** @type {?} */ expression = dirMeta.hostListeners[propName];\n        if (typeof expression === 'string') {\n          this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);\n        } else {\n          this._reportError(\n              `Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`,\n              sourceSpan);\n        }\n      });\n      return targetEventAsts;\n    }\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nparseInterpolation(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @param {?} targetVars\n * @return {?}\n */\nparseInlineTemplateBinding(\n      prefixToken: string, value: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[], targetVars: VariableAst[]) {\n    const /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n      const /** @type {?} */ binding = bindings[i];\n      if (binding.keyIsVar) {\n        targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\n      } else if (binding.expression) {\n        this._parsePropertyAst(\n            binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetMatchableAttrs.push([binding.key, '']);\n        this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n      }\n    }\n  }\n/**\n * @param {?} prefixToken\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseTemplateBindings(prefixToken: string, value: string, sourceSpan: ParseSourceSpan):\n      TemplateBinding[] {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\n      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n      bindingsResult.templateBindings.forEach((binding) => {\n        if (binding.expression) {\n          this._checkPipes(binding.expression, sourceSpan);\n        }\n      });\n      bindingsResult.warnings.forEach(\n          (warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n      return bindingsResult.templateBindings;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return [];\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparseLiteralAttr(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substring(1);\n      if (value) {\n        this._reportError(\n            `Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`,\n            sourceSpan, ParseErrorLevel.FATAL);\n      }\n      this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      targetProps.push(new BoundProperty(\n          name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR,\n          sourceSpan));\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} isHost\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyBinding(\n      name: string, expression: string, isHost: boolean, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    let /** @type {?} */ isAnimationProp = false;\n    if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n      isAnimationProp = true;\n      name = name.substring(ANIMATE_PROP_PREFIX.length);\n    } else if (_isAnimationLabel(name)) {\n      isAnimationProp = true;\n      name = name.substring(1);\n    }\n\n    if (isAnimationProp) {\n      this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n    } else {\n      this._parsePropertyAst(\n          name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan,\n          targetMatchableAttrs, targetProps);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nparsePropertyInterpolation(\n      name: string, value: string, sourceSpan: ParseSourceSpan, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[]): boolean {\n    const /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\n    if (expr) {\n      this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n      return true;\n    }\n    return false;\n  }\n/**\n * @param {?} name\n * @param {?} ast\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parsePropertyAst(\n      name: string, ast: ASTWithSource, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetProps\n * @return {?}\n */\nprivate _parseAnimation(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetProps: BoundProperty[]) {\n    // This will occur when a @trigger is not paired with an expression.\n    // For animations it is valid to not have an expression since */void\n    // states will be applied by angular when the element is attached/detached\n    const /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\n  }\n/**\n * @param {?} value\n * @param {?} isHostBinding\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseBinding(value: string, isHostBinding: boolean, sourceSpan: ParseSourceSpan):\n      ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = isHostBinding ?\n          this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n          this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} elementSelector\n * @param {?} boundProp\n * @return {?}\n */\ncreateElementPropertyAst(elementSelector: string, boundProp: BoundProperty):\n      BoundElementPropertyAst {\n    if (boundProp.isAnimation) {\n      return new BoundElementPropertyAst(\n          boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, false,\n          boundProp.expression, null, boundProp.sourceSpan);\n    }\n\n    let /** @type {?} */ unit: string = null;\n    let /** @type {?} */ bindingType: PropertyBindingType;\n    let /** @type {?} */ boundPropertyName: string = null;\n    const /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n    let /** @type {?} */ securityContexts: SecurityContext[];\n\n    // Check check for special cases (prefix style, attr, class)\n    if (parts.length > 1) {\n      if (parts[0] == ATTRIBUTE_PREFIX) {\n        boundPropertyName = parts[1];\n        this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n        securityContexts = calcPossibleSecurityContexts(\n            this._schemaRegistry, elementSelector, boundPropertyName, true);\n\n        const /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\n        if (nsSeparatorIdx > -1) {\n          const /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\n          const /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);\n          boundPropertyName = mergeNsAndName(ns, name);\n        }\n\n        bindingType = PropertyBindingType.Attribute;\n      } else if (parts[0] == CLASS_PREFIX) {\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Class;\n        securityContexts = [SecurityContext.NONE];\n      } else if (parts[0] == STYLE_PREFIX) {\n        unit = parts.length > 2 ? parts[2] : null;\n        boundPropertyName = parts[1];\n        bindingType = PropertyBindingType.Style;\n        securityContexts = [SecurityContext.STYLE];\n      }\n    }\n\n    // If not a special case, use the full property name\n    if (boundPropertyName === null) {\n      boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n      securityContexts = calcPossibleSecurityContexts(\n          this._schemaRegistry, elementSelector, boundPropertyName, false);\n      bindingType = PropertyBindingType.Property;\n      this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n    }\n\n    return new BoundElementPropertyAst(\n        boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null,\n        securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nparseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    if (_isAnimationLabel(name)) {\n      name = name.substr(1);\n      this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n    } else {\n      this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseAnimationEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetEvents: BoundEventAst[]) {\n    const /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\n    const /** @type {?} */ eventName = matches[0];\n    const /** @type {?} */ phase = matches[1].toLowerCase();\n    if (phase) {\n      switch (phase) {\n        case 'start':\n        case 'done':\n          const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n          targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\n          break;\n\n        default:\n          this._reportError(\n              `The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`,\n              sourceSpan);\n          break;\n      }\n    } else {\n      this._reportError(\n          `The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`,\n          sourceSpan);\n    }\n  }\n/**\n * @param {?} name\n * @param {?} expression\n * @param {?} sourceSpan\n * @param {?} targetMatchableAttrs\n * @param {?} targetEvents\n * @return {?}\n */\nprivate _parseEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    // long format: 'target: eventName'\n    const [target, eventName] = splitAtColon(name, [null, name]);\n    const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n    targetMatchableAttrs.push([name, ast.source]);\n    targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\n    // Don't detect directives for event names for now,\n    // so don't add the event name to the matchableAttrs\n  }\n/**\n * @param {?} value\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _parseAction(value: string, sourceSpan: ParseSourceSpan): ASTWithSource {\n    const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n      if (ast) {\n        this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      }\n      if (!ast || ast.ast instanceof EmptyExpr) {\n        this._reportError(`Empty expressions are not allowed`, sourceSpan);\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n      }\n      this._checkPipes(ast, sourceSpan);\n      return ast;\n    } catch ( /** @type {?} */e) {\n      this._reportError(`${e}`, sourceSpan);\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n    }\n  }\n/**\n * @param {?} message\n * @param {?} sourceSpan\n * @param {?=} level\n * @return {?}\n */\nprivate _reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.FATAL) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n/**\n * @param {?} errors\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _reportExpressionParserErrors(errors: ParserError[], sourceSpan: ParseSourceSpan) {\n    for (const /** @type {?} */ error of errors) {\n      this._reportError(error.message, sourceSpan);\n    }\n  }\n/**\n * @param {?} ast\n * @param {?} sourceSpan\n * @return {?}\n */\nprivate _checkPipes(ast: ASTWithSource, sourceSpan: ParseSourceSpan) {\n    if (ast) {\n      const /** @type {?} */ collector = new PipeCollector();\n      ast.visit(collector);\n      collector.pipes.forEach((ast, pipeName) => {\n        const /** @type {?} */ pipeMeta = this.pipesByName.get(pipeName);\n        if (!pipeMeta) {\n          this._reportError(\n              `The pipe '${pipeName}' could not be found`,\n              new ParseSourceSpan(\n                  sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n        } else {\n          this._usedPipes.set(pipeName, pipeMeta);\n        }\n      });\n    }\n  }\n/**\n * @param {?} propName the name of the property / attribute\n * @param {?} sourceSpan\n * @param {?} isAttr true when binding to an attribute\n * @return {?}\n */\nprivate _validatePropertyOrAttributeName(\n      propName: string, sourceSpan: ParseSourceSpan, isAttr: boolean): void {\n    const /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n                            this._schemaRegistry.validateProperty(propName);\n    if (report.error) {\n      this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);\n    }\n  }\n}\n\nfunction BindingParser_tsickle_Closure_declarations() {\n/** @type {?} */\nBindingParser.prototype.pipesByName;\n/** @type {?} */\nBindingParser.prototype._usedPipes;\n/** @type {?} */\nBindingParser.prototype._exprParser;\n/** @type {?} */\nBindingParser.prototype._interpolationConfig;\n/** @type {?} */\nBindingParser.prototype._schemaRegistry;\n/** @type {?} */\nBindingParser.prototype._targetErrors;\n}\n\nexport class PipeCollector extends RecursiveAstVisitor {\n  pipes = new Map<string, BindingPipe>();\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any): any {\n    this.pipes.set(ast.name, ast);\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n}\n\nfunction PipeCollector_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeCollector.prototype.pipes;\n}\n\n/**\n * @param {?} name\n * @return {?}\n */\nfunction _isAnimationLabel(name: string): boolean {\n  return name[0] == '@';\n}\n/**\n * @param {?} registry\n * @param {?} selector\n * @param {?} propName\n * @param {?} isAttribute\n * @return {?}\n */\nexport function calcPossibleSecurityContexts(\n    registry: ElementSchemaRegistry, selector: string, propName: string,\n    isAttribute: boolean): SecurityContext[] {\n  const /** @type {?} */ ctxs: SecurityContext[] = [];\n  CssSelector.parse(selector).forEach((selector) => {\n    const /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    const /** @type {?} */ notElementNames =\n        new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n                    .map((selector) => selector.element));\n    const /** @type {?} */ possibleElementNames =\n        elementNames.filter(elementName => !notElementNames.has(elementName));\n\n    ctxs.push(...possibleElementNames.map(\n        elementName => registry.securityContext(elementName, propName, isAttribute)));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n"]}